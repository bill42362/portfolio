"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[737],{9477:function(a,b,c){c.d(b,{NDo:function(){return o},m7l:function(){return Vea},Xcj:function(){return Fra},y8_:function(){return swa},"N$j":function(){return UU},DvJ:function(){return HH},TlE:function(){return WA},u9r:function(){return PC},Rki:function(){return bwa},SUY:function(){return Xka},Ilk:function(){return Gd},DqL:function(){return _ga},Xaj:function(){return j},fHI:function(){return zZ},yxD:function(){return Kha},Ox3:function(){return Zia},cBI:function(){return Vva},ehD:function(){return i},fSK:function(){return m},USm:function(){return Qv},pBf:function(){return C},hH6:function(){return Pga},"a$l":function(){return EC},Wl3:function(){return g},"_C8":function(){return Pba},x12:function(){return KW},nls:function(){return CW},D1R:function(){return r},aNw:function(){return Ega},Zp0:function(){return hka},lLk:function(){return tga},RsA:function(){return d},yGw:function(){return Kq},Kj0:function(){return yG},vBJ:function(){return RA},Ns1:function(){return n},TyD:function(){return q},dUE:function(){return Bea},Tme:function(){return Vw},LgZ:function(){return l},ntZ:function(){return f},cPb:function(){return qI},"_fP":function(){return Lh},iLg:function(){return Rea},wk1:function(){return s},v3W:function(){return u},ILR:function(){return v},fto:function(){return y},l0P:function(){return z},vCx:function(){return x},"_AM":function(){return w},wuA:function(){return t},rpg:function(){return p},xsS:function(){return CS},Vj0:function(){return hM},jyz:function(){return $H},OdW:function(){return iV},TUv:function(){return BU},"xo$":function(){return l8},"$V":function(){return Wua},k74:function(){return k},QmN:function(){return e},IOt:function(){return A},dpR:function(){return Tha},qlB:function(){return tC},rDY:function(){return ZH},FM8:function(){return ea},Pa4:function(){return qk},yC1:function(){return Uea},b5g:function(){return uS}});const d={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},e={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},f=2,g=0,h=1,i=2,j=5,k=204,l=205,m=206,n=0,o=2,p=1000,q=1003,r=1008,s=1023,t=33776,u=33778,v=33779,w=35840,x=35841,y=36196,z=37492,A=0,B="300 es";class C{addEventListener(D,E){void 0===this._listeners&&(this._listeners={});const F=this._listeners;void 0===F[D]&&(F[D]=[]),-1===F[D].indexOf(E)&&F[D].push(E)}hasEventListener(G,H){if(void 0===this._listeners)return!1;const I=this._listeners;return void 0!==I[G]&& -1!==I[G].indexOf(H)}removeEventListener(J,K){if(void 0===this._listeners)return;const L=this._listeners,M=L[J];if(void 0!==M){const N=M.indexOf(K);-1!==N&&M.splice(N,1)}}dispatchEvent(O){if(void 0===this._listeners)return;const P=this._listeners,Q=P[O.type];if(void 0!==Q){O.target=this;const R=Q.slice(0);for(let S=0,T=R.length;S<T;S++)R[S].call(this,O);O.target=null}}}const U=[];for(let V=0;V<256;V++)U[V]=(V<16?"0":"")+V.toString(16);let W=1234567;const X=Math.PI/180,Y=180/Math.PI;function Z(){const a=4294967295*Math.random()|0,b=4294967295*Math.random()|0,c=4294967295*Math.random()|0,d=4294967295*Math.random()|0,e=U[255&a]+U[a>>8&255]+U[a>>16&255]+U[a>>24&255]+"-"+U[255&b]+U[b>>8&255]+"-"+U[b>>16&15|64]+U[b>>24&255]+"-"+U[63&c|128]+U[c>>8&255]+"-"+U[c>>16&255]+U[c>>24&255]+U[255&d]+U[d>>8&255]+U[d>>16&255]+U[d>>24&255];return e.toUpperCase()}function $(a,b,c){return Math.max(b,Math.min(c,a))}function _(a,b){return(a%b+b)%b}function aa(a,b,c){return(1-c)*a+c*b}function ba(a){return(a&a-1)==0&&0!==a}function ca(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))}function da(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}Object.freeze({__proto__:null,DEG2RAD:X,RAD2DEG:Y,generateUUID:Z,clamp:$,euclideanModulo:_,mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},inverseLerp:function(a,b,c){return a!==b?(c-a)/(b-a):0},lerp:aa,damp:function(a,b,c,d){return aa(a,b,1-Math.exp(-c*d))},pingpong:function(a,b=1){return b-Math.abs(_(a,2*b)-b)},smoothstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b))*a*(3-2*a)},smootherstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b))*a*a*(a*(6*a-15)+10)},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},seededRandom:function(a){return void 0!==a&&(W=a%2147483647),((W=16807*W%2147483647)-1)/2147483646},degToRad:function(a){return a*X},radToDeg:function(a){return a*Y},isPowerOfTwo:ba,ceilPowerOfTwo:ca,floorPowerOfTwo:da,setQuaternionFromProperEuler:function(a,b,c,d,e){const f=Math.cos,g=Math.sin,h=f(c/2),i=g(c/2),j=f((b+d)/2),k=g((b+d)/2),l=f((b-d)/2),m=g((b-d)/2),n=f((d-b)/2),o=g((d-b)/2);switch(e){case"XYX":a.set(h*k,i*l,i*m,h*j);break;case"YZY":a.set(i*m,h*k,i*l,h*j);break;case"ZXZ":a.set(i*l,i*m,h*k,h*j);break;case"XZX":a.set(h*k,i*o,i*n,h*j);break;case"YXY":a.set(i*n,h*k,i*o,h*j);break;case"ZYZ":a.set(i*o,i*n,h*k,h*j);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+e)}}});class ea{constructor(fa=0,ga=0){this.x=fa,this.y=ga}get width(){return this.x}set width(ha){this.x=ha}get height(){return this.y}set height(ia){this.y=ia}set(ja,ka){return this.x=ja,this.y=ka,this}setScalar(la){return this.x=la,this.y=la,this}setX(ma){return this.x=ma,this}setY(na){return this.y=na,this}setComponent(oa,pa){switch(oa){case 0:this.x=pa;break;case 1:this.y=pa;break;default:throw new Error("index is out of range: "+oa)}return this}getComponent(qa){switch(qa){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+qa)}}clone(){return new this.constructor(this.x,this.y)}copy(ra){return this.x=ra.x,this.y=ra.y,this}add(sa,ta){return void 0!==ta?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(sa,ta)):(this.x+=sa.x,this.y+=sa.y,this)}addScalar(ua){return this.x+=ua,this.y+=ua,this}addVectors(va,wa){return this.x=va.x+wa.x,this.y=va.y+wa.y,this}addScaledVector(xa,ya){return this.x+=xa.x*ya,this.y+=xa.y*ya,this}sub(za,Aa){return void 0!==Aa?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(za,Aa)):(this.x-=za.x,this.y-=za.y,this)}subScalar(Ba){return this.x-=Ba,this.y-=Ba,this}subVectors(Ca,Da){return this.x=Ca.x-Da.x,this.y=Ca.y-Da.y,this}multiply(Ea){return this.x*=Ea.x,this.y*=Ea.y,this}multiplyScalar(Fa){return this.x*=Fa,this.y*=Fa,this}divide(Ga){return this.x/=Ga.x,this.y/=Ga.y,this}divideScalar(Ha){return this.multiplyScalar(1/Ha)}applyMatrix3(Ia){const Ja=this.x,Ka=this.y,La=Ia.elements;return this.x=La[0]*Ja+La[3]*Ka+La[6],this.y=La[1]*Ja+La[4]*Ka+La[7],this}min(Ma){return this.x=Math.min(this.x,Ma.x),this.y=Math.min(this.y,Ma.y),this}max(Na){return this.x=Math.max(this.x,Na.x),this.y=Math.max(this.y,Na.y),this}clamp(Oa,Pa){return this.x=Math.max(Oa.x,Math.min(Pa.x,this.x)),this.y=Math.max(Oa.y,Math.min(Pa.y,this.y)),this}clampScalar(Qa,Ra){return this.x=Math.max(Qa,Math.min(Ra,this.x)),this.y=Math.max(Qa,Math.min(Ra,this.y)),this}clampLength(Sa,Ta){const Ua=this.length();return this.divideScalar(Ua||1).multiplyScalar(Math.max(Sa,Math.min(Ta,Ua)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(Va){return this.x*Va.x+this.y*Va.y}cross(Wa){return this.x*Wa.y-this.y*Wa.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const Xa=Math.atan2(-this.y,-this.x)+Math.PI;return Xa}distanceTo(Ya){return Math.sqrt(this.distanceToSquared(Ya))}distanceToSquared(Za){const $a=this.x-Za.x,_a=this.y-Za.y;return $a*$a+_a*_a}manhattanDistanceTo(ab){return Math.abs(this.x-ab.x)+Math.abs(this.y-ab.y)}setLength(bb){return this.normalize().multiplyScalar(bb)}lerp(cb,db){return this.x+=(cb.x-this.x)*db,this.y+=(cb.y-this.y)*db,this}lerpVectors(eb,fb,gb){return this.x=eb.x+(fb.x-eb.x)*gb,this.y=eb.y+(fb.y-eb.y)*gb,this}equals(hb){return hb.x===this.x&&hb.y===this.y}fromArray(ib,jb=0){return this.x=ib[jb],this.y=ib[jb+1],this}toArray(kb=[],lb=0){return kb[lb]=this.x,kb[lb+1]=this.y,kb}fromBufferAttribute(mb,nb,ob){return void 0!==ob&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=mb.getX(nb),this.y=mb.getY(nb),this}rotateAround(pb,qb){const rb=Math.cos(qb),sb=Math.sin(qb),tb=this.x-pb.x,ub=this.y-pb.y;return this.x=tb*rb-ub*sb+pb.x,this.y=tb*sb+ub*rb+pb.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}ea.prototype.isVector2=!0;class vb{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(wb,xb,yb,zb,Ab,Bb,Cb,Db,Eb){const Fb=this.elements;return Fb[0]=wb,Fb[1]=zb,Fb[2]=Cb,Fb[3]=xb,Fb[4]=Ab,Fb[5]=Db,Fb[6]=yb,Fb[7]=Bb,Fb[8]=Eb,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(Gb){const Hb=this.elements,Ib=Gb.elements;return Hb[0]=Ib[0],Hb[1]=Ib[1],Hb[2]=Ib[2],Hb[3]=Ib[3],Hb[4]=Ib[4],Hb[5]=Ib[5],Hb[6]=Ib[6],Hb[7]=Ib[7],Hb[8]=Ib[8],this}extractBasis(Jb,Kb,Lb){return Jb.setFromMatrix3Column(this,0),Kb.setFromMatrix3Column(this,1),Lb.setFromMatrix3Column(this,2),this}setFromMatrix4(Mb){const Nb=Mb.elements;return this.set(Nb[0],Nb[4],Nb[8],Nb[1],Nb[5],Nb[9],Nb[2],Nb[6],Nb[10]),this}multiply(Ob){return this.multiplyMatrices(this,Ob)}premultiply(Pb){return this.multiplyMatrices(Pb,this)}multiplyMatrices(Qb,Rb){const Sb=Qb.elements,Tb=Rb.elements,Ub=this.elements,Vb=Sb[0],Wb=Sb[3],Xb=Sb[6],Yb=Sb[1],Zb=Sb[4],$b=Sb[7],_b=Sb[2],ac=Sb[5],bc=Sb[8],cc=Tb[0],dc=Tb[3],ec=Tb[6],fc=Tb[1],gc=Tb[4],hc=Tb[7],ic=Tb[2],jc=Tb[5],kc=Tb[8];return Ub[0]=Vb*cc+Wb*fc+Xb*ic,Ub[3]=Vb*dc+Wb*gc+Xb*jc,Ub[6]=Vb*ec+Wb*hc+Xb*kc,Ub[1]=Yb*cc+Zb*fc+$b*ic,Ub[4]=Yb*dc+Zb*gc+$b*jc,Ub[7]=Yb*ec+Zb*hc+$b*kc,Ub[2]=_b*cc+ac*fc+bc*ic,Ub[5]=_b*dc+ac*gc+bc*jc,Ub[8]=_b*ec+ac*hc+bc*kc,this}multiplyScalar(lc){const mc=this.elements;return mc[0]*=lc,mc[3]*=lc,mc[6]*=lc,mc[1]*=lc,mc[4]*=lc,mc[7]*=lc,mc[2]*=lc,mc[5]*=lc,mc[8]*=lc,this}determinant(){const nc=this.elements,oc=nc[0],pc=nc[1],qc=nc[2],rc=nc[3],sc=nc[4],tc=nc[5],uc=nc[6],vc=nc[7],wc=nc[8];return oc*sc*wc-oc*tc*vc-pc*rc*wc+pc*tc*uc+qc*rc*vc-qc*sc*uc}invert(){const xc=this.elements,yc=xc[0],zc=xc[1],Ac=xc[2],Bc=xc[3],Cc=xc[4],Dc=xc[5],Ec=xc[6],Fc=xc[7],Gc=xc[8],Hc=Gc*Cc-Dc*Fc,Ic=Dc*Ec-Gc*Bc,Jc=Fc*Bc-Cc*Ec,Kc=yc*Hc+zc*Ic+Ac*Jc;if(0===Kc)return this.set(0,0,0,0,0,0,0,0,0);const Lc=1/Kc;return xc[0]=Hc*Lc,xc[1]=(Ac*Fc-Gc*zc)*Lc,xc[2]=(Dc*zc-Ac*Cc)*Lc,xc[3]=Ic*Lc,xc[4]=(Gc*yc-Ac*Ec)*Lc,xc[5]=(Ac*Bc-Dc*yc)*Lc,xc[6]=Jc*Lc,xc[7]=(zc*Ec-Fc*yc)*Lc,xc[8]=(Cc*yc-zc*Bc)*Lc,this}transpose(){let Mc;const Nc=this.elements;return Mc=Nc[1],Nc[1]=Nc[3],Nc[3]=Mc,Mc=Nc[2],Nc[2]=Nc[6],Nc[6]=Mc,Mc=Nc[5],Nc[5]=Nc[7],Nc[7]=Mc,this}getNormalMatrix(Oc){return this.setFromMatrix4(Oc).invert().transpose()}transposeIntoArray(Pc){const Qc=this.elements;return Pc[0]=Qc[0],Pc[1]=Qc[3],Pc[2]=Qc[6],Pc[3]=Qc[1],Pc[4]=Qc[4],Pc[5]=Qc[7],Pc[6]=Qc[2],Pc[7]=Qc[5],Pc[8]=Qc[8],this}setUvTransform(Rc,Sc,Tc,Uc,Vc,Wc,Xc){const Yc=Math.cos(Vc),Zc=Math.sin(Vc);return this.set(Tc*Yc,Tc*Zc,-Tc*(Yc*Wc+Zc*Xc)+Wc+Rc,-Uc*Zc,Uc*Yc,-Uc*(-Zc*Wc+Yc*Xc)+Xc+Sc,0,0,1),this}scale($c,_c){const ad=this.elements;return ad[0]*=$c,ad[3]*=$c,ad[6]*=$c,ad[1]*=_c,ad[4]*=_c,ad[7]*=_c,this}rotate(bd){const cd=Math.cos(bd),dd=Math.sin(bd),ed=this.elements,fd=ed[0],gd=ed[3],hd=ed[6],id=ed[1],jd=ed[4],kd=ed[7];return ed[0]=cd*fd+dd*id,ed[3]=cd*gd+dd*jd,ed[6]=cd*hd+dd*kd,ed[1]=-dd*fd+cd*id,ed[4]=-dd*gd+cd*jd,ed[7]=-dd*hd+cd*kd,this}translate(ld,md){const nd=this.elements;return nd[0]+=ld*nd[2],nd[3]+=ld*nd[5],nd[6]+=ld*nd[8],nd[1]+=md*nd[2],nd[4]+=md*nd[5],nd[7]+=md*nd[8],this}equals(od){const pd=this.elements,qd=od.elements;for(let rd=0;rd<9;rd++)if(pd[rd]!==qd[rd])return!1;return!0}fromArray(sd,td=0){for(let ud=0;ud<9;ud++)this.elements[ud]=sd[ud+td];return this}toArray(vd=[],wd=0){const xd=this.elements;return vd[wd]=xd[0],vd[wd+1]=xd[1],vd[wd+2]=xd[2],vd[wd+3]=xd[3],vd[wd+4]=xd[4],vd[wd+5]=xd[5],vd[wd+6]=xd[6],vd[wd+7]=xd[7],vd[wd+8]=xd[8],vd}clone(){return new this.constructor().fromArray(this.elements)}}function yd(a){for(let b=a.length-1;b>=0;--b)if(a[b]>65535)return!0;return!1}function zd(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}vb.prototype.isMatrix3=!0;const Ad={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Bd={h:0,s:0,l:0},Cd={h:0,s:0,l:0};function Dd(a,b,c){return(c<0&&(c+=1),c>1&&(c-=1),c<1/6)?a+(b-a)*6*c:c<0.5?b:c<2/3?a+(b-a)*6*(2/3-c):a}function Ed(a){return a<0.04045?0.0773993808*a:Math.pow(0.9478672986*a+0.0521327014,2.4)}function Fd(a){return a<0.0031308?12.92*a:1.055*Math.pow(a,0.41666)-0.055}class Gd{constructor(Hd,Id,Jd){if(void 0===Id&& void 0===Jd)return this.set(Hd);return this.setRGB(Hd,Id,Jd)}set(Kd){return Kd&&Kd.isColor?this.copy(Kd):"number"==typeof Kd?this.setHex(Kd):"string"==typeof Kd&&this.setStyle(Kd),this}setScalar(Ld){return this.r=Ld,this.g=Ld,this.b=Ld,this}setHex(Md){return Md=Math.floor(Md),this.r=(Md>>16&255)/255,this.g=(Md>>8&255)/255,this.b=(255&Md)/255,this}setRGB(Nd,Od,Pd){return this.r=Nd,this.g=Od,this.b=Pd,this}setHSL(Qd,Rd,Sd){if(Qd=_(Qd,1),Rd=$(Rd,0,1),Sd=$(Sd,0,1),0===Rd)this.r=this.g=this.b=Sd;else{const Td=Sd<=0.5?Sd*(1+Rd):Sd+Rd-Sd*Rd,Ud=2*Sd-Td;this.r=Dd(Ud,Td,Qd+1/3),this.g=Dd(Ud,Td,Qd),this.b=Dd(Ud,Td,Qd-1/3)}return this}setStyle(Vd){function Wd(a){void 0!==a&&1>parseFloat(a)&&console.warn("THREE.Color: Alpha component of "+Vd+" will be ignored.")}let Xd;if(Xd=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(Vd)){let Yd;const Zd=Xd[1],$d=Xd[2];switch(Zd){case"rgb":case"rgba":if(Yd=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec($d))return this.r=Math.min(255,parseInt(Yd[1],10))/255,this.g=Math.min(255,parseInt(Yd[2],10))/255,this.b=Math.min(255,parseInt(Yd[3],10))/255,Wd(Yd[4]),this;if(Yd=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec($d))return this.r=Math.min(100,parseInt(Yd[1],10))/100,this.g=Math.min(100,parseInt(Yd[2],10))/100,this.b=Math.min(100,parseInt(Yd[3],10))/100,Wd(Yd[4]),this;break;case"hsl":case"hsla":if(Yd=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec($d)){const _d=parseFloat(Yd[1])/360,ae=parseInt(Yd[2],10)/100,be=parseInt(Yd[3],10)/100;return Wd(Yd[4]),this.setHSL(_d,ae,be)}break}}else if(Xd=/^\#([A-Fa-f\d]+)$/.exec(Vd)){const ce=Xd[1],de=ce.length;if(3===de)return this.r=parseInt(ce.charAt(0)+ce.charAt(0),16)/255,this.g=parseInt(ce.charAt(1)+ce.charAt(1),16)/255,this.b=parseInt(ce.charAt(2)+ce.charAt(2),16)/255,this;if(6===de)return this.r=parseInt(ce.charAt(0)+ce.charAt(1),16)/255,this.g=parseInt(ce.charAt(2)+ce.charAt(3),16)/255,this.b=parseInt(ce.charAt(4)+ce.charAt(5),16)/255,this}return Vd&&Vd.length>0?this.setColorName(Vd):this}setColorName(ee){const fe=Ad[ee.toLowerCase()];return void 0!==fe?this.setHex(fe):console.warn("THREE.Color: Unknown color "+ee),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(ge){return this.r=ge.r,this.g=ge.g,this.b=ge.b,this}copySRGBToLinear(he){return this.r=Ed(he.r),this.g=Ed(he.g),this.b=Ed(he.b),this}copyLinearToSRGB(ie){return this.r=Fd(ie.r),this.g=Fd(ie.g),this.b=Fd(ie.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(je){const ke=this.r,le=this.g,me=this.b,ne=Math.max(ke,le,me),oe=Math.min(ke,le,me);let pe,qe;const re=(oe+ne)/2;if(oe===ne)pe=0,qe=0;else{const se=ne-oe;switch(qe=re<=0.5?se/(ne+oe):se/(2-ne-oe),ne){case ke:pe=(le-me)/se+(le<me?6:0);break;case le:pe=(me-ke)/se+2;break;case me:pe=(ke-le)/se+4;break}pe/=6}return je.h=pe,je.s=qe,je.l=re,je}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(te,ue,ve){return this.getHSL(Bd),Bd.h+=te,Bd.s+=ue,Bd.l+=ve,this.setHSL(Bd.h,Bd.s,Bd.l),this}add(we){return this.r+=we.r,this.g+=we.g,this.b+=we.b,this}addColors(xe,ye){return this.r=xe.r+ye.r,this.g=xe.g+ye.g,this.b=xe.b+ye.b,this}addScalar(ze){return this.r+=ze,this.g+=ze,this.b+=ze,this}sub(Ae){return this.r=Math.max(0,this.r-Ae.r),this.g=Math.max(0,this.g-Ae.g),this.b=Math.max(0,this.b-Ae.b),this}multiply(Be){return this.r*=Be.r,this.g*=Be.g,this.b*=Be.b,this}multiplyScalar(Ce){return this.r*=Ce,this.g*=Ce,this.b*=Ce,this}lerp(De,Ee){return this.r+=(De.r-this.r)*Ee,this.g+=(De.g-this.g)*Ee,this.b+=(De.b-this.b)*Ee,this}lerpColors(Fe,Ge,He){return this.r=Fe.r+(Ge.r-Fe.r)*He,this.g=Fe.g+(Ge.g-Fe.g)*He,this.b=Fe.b+(Ge.b-Fe.b)*He,this}lerpHSL(Ie,Je){this.getHSL(Bd),Ie.getHSL(Cd);const Ke=aa(Bd.h,Cd.h,Je),Le=aa(Bd.s,Cd.s,Je),Me=aa(Bd.l,Cd.l,Je);return this.setHSL(Ke,Le,Me),this}equals(Ne){return Ne.r===this.r&&Ne.g===this.g&&Ne.b===this.b}fromArray(Oe,Pe=0){return this.r=Oe[Pe],this.g=Oe[Pe+1],this.b=Oe[Pe+2],this}toArray(Qe=[],Re=0){return Qe[Re]=this.r,Qe[Re+1]=this.g,Qe[Re+2]=this.b,Qe}fromBufferAttribute(Se,Te){return this.r=Se.getX(Te),this.g=Se.getY(Te),this.b=Se.getZ(Te),!0===Se.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Gd.NAMES=Ad,Gd.prototype.isColor=!0,Gd.prototype.r=1,Gd.prototype.g=1,Gd.prototype.b=1;let Ue;class Ve{static getDataURL(We){if(/^data:/i.test(We.src))return We.src;if("undefined"==typeof HTMLCanvasElement)return We.src;let Xe;if(We instanceof HTMLCanvasElement)Xe=We;else{void 0===Ue&&(Ue=zd("canvas")),Ue.width=We.width,Ue.height=We.height;const Ye=Ue.getContext("2d");We instanceof ImageData?Ye.putImageData(We,0,0):Ye.drawImage(We,0,0,We.width,We.height),Xe=Ue}return Xe.width>2048||Xe.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",We),Xe.toDataURL("image/jpeg",0.6)):Xe.toDataURL("image/png")}static sRGBToLinear(Ze){if("undefined"!=typeof HTMLImageElement&&Ze instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&Ze instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&Ze instanceof ImageBitmap){const $e=zd("canvas");$e.width=Ze.width,$e.height=Ze.height;const _e=$e.getContext("2d");_e.drawImage(Ze,0,0,Ze.width,Ze.height);const af=_e.getImageData(0,0,Ze.width,Ze.height),bf=af.data;for(let cf=0;cf<bf.length;cf++)bf[cf]=255*Ed(bf[cf]/255);return _e.putImageData(af,0,0),$e}{if(!Ze.data)return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),Ze;const df=Ze.data.slice(0);for(let ef=0;ef<df.length;ef++)df instanceof Uint8Array||df instanceof Uint8ClampedArray?df[ef]=Math.floor(255*Ed(df[ef]/255)):df[ef]=Ed(df[ef]);return{data:df,width:Ze.width,height:Ze.height}}}}let ff=0;class gf extends C{constructor(hf=gf.DEFAULT_IMAGE,jf=gf.DEFAULT_MAPPING,kf=1001,lf=1001,mf=1006,nf=r,of=s,pf=1009,qf=1,rf=3000){super(),Object.defineProperty(this,"id",{value:ff++}),this.uuid=Z(),this.name="",this.image=hf,this.mipmaps=[],this.mapping=jf,this.wrapS=kf,this.wrapT=lf,this.magFilter=mf,this.minFilter=nf,this.anisotropy=qf,this.format=of,this.internalFormat=null,this.type=pf,this.offset=new ea(0,0),this.repeat=new ea(1,1),this.center=new ea(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new vb(),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=rf,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(sf){return this.name=sf.name,this.image=sf.image,this.mipmaps=sf.mipmaps.slice(0),this.mapping=sf.mapping,this.wrapS=sf.wrapS,this.wrapT=sf.wrapT,this.magFilter=sf.magFilter,this.minFilter=sf.minFilter,this.anisotropy=sf.anisotropy,this.format=sf.format,this.internalFormat=sf.internalFormat,this.type=sf.type,this.offset.copy(sf.offset),this.repeat.copy(sf.repeat),this.center.copy(sf.center),this.rotation=sf.rotation,this.matrixAutoUpdate=sf.matrixAutoUpdate,this.matrix.copy(sf.matrix),this.generateMipmaps=sf.generateMipmaps,this.premultiplyAlpha=sf.premultiplyAlpha,this.flipY=sf.flipY,this.unpackAlignment=sf.unpackAlignment,this.encoding=sf.encoding,this.userData=JSON.parse(JSON.stringify(sf.userData)),this}toJSON(tf){const uf=void 0===tf||"string"==typeof tf;if(!uf&& void 0!==tf.textures[this.uuid])return tf.textures[this.uuid];const vf={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const wf=this.image;if(void 0===wf.uuid&&(wf.uuid=Z()),!uf&& void 0===tf.images[wf.uuid]){let xf;if(Array.isArray(wf)){xf=[];for(let yf=0,zf=wf.length;yf<zf;yf++)wf[yf].isDataTexture?xf.push(Cf(wf[yf].image)):xf.push(Cf(wf[yf]))}else xf=Cf(wf);tf.images[wf.uuid]={uuid:wf.uuid,url:xf}}vf.image=wf.uuid}return"{}"!==JSON.stringify(this.userData)&&(vf.userData=this.userData),uf||(tf.textures[this.uuid]=vf),vf}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(Af){if(300!==this.mapping)return Af;if(Af.applyMatrix3(this.matrix),Af.x<0||Af.x>1)switch(this.wrapS){case p:Af.x=Af.x-Math.floor(Af.x);break;case 1001:Af.x=Af.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(Af.x)%2)?Af.x=Math.ceil(Af.x)-Af.x:Af.x=Af.x-Math.floor(Af.x);break}if(Af.y<0||Af.y>1)switch(this.wrapT){case p:Af.y=Af.y-Math.floor(Af.y);break;case 1001:Af.y=Af.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(Af.y)%2)?Af.y=Math.ceil(Af.y)-Af.y:Af.y=Af.y-Math.floor(Af.y);break}return this.flipY&&(Af.y=1-Af.y),Af}set needsUpdate(Bf){!0===Bf&&this.version++}}function Cf(a){return"undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&a instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&a instanceof ImageBitmap?Ve.getDataURL(a):a.data?{data:Array.prototype.slice.call(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}gf.DEFAULT_IMAGE=void 0,gf.DEFAULT_MAPPING=300,gf.prototype.isTexture=!0;class Df{constructor(Ef=0,Ff=0,Gf=0,Hf=1){this.x=Ef,this.y=Ff,this.z=Gf,this.w=Hf}get width(){return this.z}set width(If){this.z=If}get height(){return this.w}set height(Jf){this.w=Jf}set(Kf,Lf,Mf,Nf){return this.x=Kf,this.y=Lf,this.z=Mf,this.w=Nf,this}setScalar(Of){return this.x=Of,this.y=Of,this.z=Of,this.w=Of,this}setX(Pf){return this.x=Pf,this}setY(Qf){return this.y=Qf,this}setZ(Rf){return this.z=Rf,this}setW(Sf){return this.w=Sf,this}setComponent(Tf,Uf){switch(Tf){case 0:this.x=Uf;break;case 1:this.y=Uf;break;case 2:this.z=Uf;break;case 3:this.w=Uf;break;default:throw new Error("index is out of range: "+Tf)}return this}getComponent(Vf){switch(Vf){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+Vf)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(Wf){return this.x=Wf.x,this.y=Wf.y,this.z=Wf.z,this.w=void 0!==Wf.w?Wf.w:1,this}add(Xf,Yf){return void 0!==Yf?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(Xf,Yf)):(this.x+=Xf.x,this.y+=Xf.y,this.z+=Xf.z,this.w+=Xf.w,this)}addScalar(Zf){return this.x+=Zf,this.y+=Zf,this.z+=Zf,this.w+=Zf,this}addVectors($f,_f){return this.x=$f.x+_f.x,this.y=$f.y+_f.y,this.z=$f.z+_f.z,this.w=$f.w+_f.w,this}addScaledVector(ag,bg){return this.x+=ag.x*bg,this.y+=ag.y*bg,this.z+=ag.z*bg,this.w+=ag.w*bg,this}sub(cg,dg){return void 0!==dg?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(cg,dg)):(this.x-=cg.x,this.y-=cg.y,this.z-=cg.z,this.w-=cg.w,this)}subScalar(eg){return this.x-=eg,this.y-=eg,this.z-=eg,this.w-=eg,this}subVectors(fg,gg){return this.x=fg.x-gg.x,this.y=fg.y-gg.y,this.z=fg.z-gg.z,this.w=fg.w-gg.w,this}multiply(hg){return this.x*=hg.x,this.y*=hg.y,this.z*=hg.z,this.w*=hg.w,this}multiplyScalar(ig){return this.x*=ig,this.y*=ig,this.z*=ig,this.w*=ig,this}applyMatrix4(jg){const kg=this.x,lg=this.y,mg=this.z,ng=this.w,og=jg.elements;return this.x=og[0]*kg+og[4]*lg+og[8]*mg+og[12]*ng,this.y=og[1]*kg+og[5]*lg+og[9]*mg+og[13]*ng,this.z=og[2]*kg+og[6]*lg+og[10]*mg+og[14]*ng,this.w=og[3]*kg+og[7]*lg+og[11]*mg+og[15]*ng,this}divideScalar(pg){return this.multiplyScalar(1/pg)}setAxisAngleFromQuaternion(qg){this.w=2*Math.acos(qg.w);const rg=Math.sqrt(1-qg.w*qg.w);return rg<0.0001?(this.x=1,this.y=0,this.z=0):(this.x=qg.x/rg,this.y=qg.y/rg,this.z=qg.z/rg),this}setAxisAngleFromRotationMatrix(sg){let tg,ug,vg,wg;const xg=sg.elements,yg=xg[0],zg=xg[4],Ag=xg[8],Bg=xg[1],Cg=xg[5],Dg=xg[9],Eg=xg[2],Fg=xg[6],Gg=xg[10];if(0.01>Math.abs(zg-Bg)&&0.01>Math.abs(Ag-Eg)&&0.01>Math.abs(Dg-Fg)){if(0.1>Math.abs(zg+Bg)&&0.1>Math.abs(Ag+Eg)&&0.1>Math.abs(Dg+Fg)&&0.1>Math.abs(yg+Cg+Gg-3))return this.set(1,0,0,0),this;tg=Math.PI;const Hg=(yg+1)/2,Ig=(Cg+1)/2,Jg=(Gg+1)/2,Kg=(zg+Bg)/4,Lg=(Ag+Eg)/4,Mg=(Dg+Fg)/4;return Hg>Ig&&Hg>Jg?Hg<0.01?(ug=0,vg=0.707106781,wg=0.707106781):(vg=Kg/(ug=Math.sqrt(Hg)),wg=Lg/ug):Ig>Jg?Ig<0.01?(ug=0.707106781,vg=0,wg=0.707106781):(ug=Kg/(vg=Math.sqrt(Ig)),wg=Mg/vg):Jg<0.01?(ug=0.707106781,vg=0.707106781,wg=0):(ug=Lg/(wg=Math.sqrt(Jg)),vg=Mg/wg),this.set(ug,vg,wg,tg),this}let Ng=Math.sqrt((Fg-Dg)*(Fg-Dg)+(Ag-Eg)*(Ag-Eg)+(Bg-zg)*(Bg-zg));return 0.001>Math.abs(Ng)&&(Ng=1),this.x=(Fg-Dg)/Ng,this.y=(Ag-Eg)/Ng,this.z=(Bg-zg)/Ng,this.w=Math.acos((yg+Cg+Gg-1)/2),this}min(Og){return this.x=Math.min(this.x,Og.x),this.y=Math.min(this.y,Og.y),this.z=Math.min(this.z,Og.z),this.w=Math.min(this.w,Og.w),this}max(Pg){return this.x=Math.max(this.x,Pg.x),this.y=Math.max(this.y,Pg.y),this.z=Math.max(this.z,Pg.z),this.w=Math.max(this.w,Pg.w),this}clamp(Qg,Rg){return this.x=Math.max(Qg.x,Math.min(Rg.x,this.x)),this.y=Math.max(Qg.y,Math.min(Rg.y,this.y)),this.z=Math.max(Qg.z,Math.min(Rg.z,this.z)),this.w=Math.max(Qg.w,Math.min(Rg.w,this.w)),this}clampScalar(Sg,Tg){return this.x=Math.max(Sg,Math.min(Tg,this.x)),this.y=Math.max(Sg,Math.min(Tg,this.y)),this.z=Math.max(Sg,Math.min(Tg,this.z)),this.w=Math.max(Sg,Math.min(Tg,this.w)),this}clampLength(Ug,Vg){const Wg=this.length();return this.divideScalar(Wg||1).multiplyScalar(Math.max(Ug,Math.min(Vg,Wg)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(Xg){return this.x*Xg.x+this.y*Xg.y+this.z*Xg.z+this.w*Xg.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(Yg){return this.normalize().multiplyScalar(Yg)}lerp(Zg,$g){return this.x+=(Zg.x-this.x)*$g,this.y+=(Zg.y-this.y)*$g,this.z+=(Zg.z-this.z)*$g,this.w+=(Zg.w-this.w)*$g,this}lerpVectors(_g,ah,bh){return this.x=_g.x+(ah.x-_g.x)*bh,this.y=_g.y+(ah.y-_g.y)*bh,this.z=_g.z+(ah.z-_g.z)*bh,this.w=_g.w+(ah.w-_g.w)*bh,this}equals(ch){return ch.x===this.x&&ch.y===this.y&&ch.z===this.z&&ch.w===this.w}fromArray(dh,eh=0){return this.x=dh[eh],this.y=dh[eh+1],this.z=dh[eh+2],this.w=dh[eh+3],this}toArray(fh=[],gh=0){return fh[gh]=this.x,fh[gh+1]=this.y,fh[gh+2]=this.z,fh[gh+3]=this.w,fh}fromBufferAttribute(hh,ih,jh){return void 0!==jh&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=hh.getX(ih),this.y=hh.getY(ih),this.z=hh.getZ(ih),this.w=hh.getW(ih),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}Df.prototype.isVector4=!0;class kh extends C{constructor(lh,mh,nh={}){super(),this.width=lh,this.height=mh,this.depth=1,this.scissor=new Df(0,0,lh,mh),this.scissorTest=!1,this.viewport=new Df(0,0,lh,mh),this.texture=new gf(void 0,nh.mapping,nh.wrapS,nh.wrapT,nh.magFilter,nh.minFilter,nh.format,nh.type,nh.anisotropy,nh.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:lh,height:mh,depth:1},this.texture.generateMipmaps=void 0!==nh.generateMipmaps&&nh.generateMipmaps,this.texture.internalFormat=void 0!==nh.internalFormat?nh.internalFormat:null,this.texture.minFilter=void 0!==nh.minFilter?nh.minFilter:1006,this.depthBuffer=void 0===nh.depthBuffer||nh.depthBuffer,this.stencilBuffer=void 0!==nh.stencilBuffer&&nh.stencilBuffer,this.depthTexture=void 0!==nh.depthTexture?nh.depthTexture:null}setTexture(oh){oh.image={width:this.width,height:this.height,depth:this.depth},this.texture=oh}setSize(ph,qh,rh=1){(this.width!==ph||this.height!==qh||this.depth!==rh)&&(this.width=ph,this.height=qh,this.depth=rh,this.texture.image.width=ph,this.texture.image.height=qh,this.texture.image.depth=rh,this.dispose()),this.viewport.set(0,0,ph,qh),this.scissor.set(0,0,ph,qh)}clone(){return new this.constructor().copy(this)}copy(sh){return this.width=sh.width,this.height=sh.height,this.depth=sh.depth,this.viewport.copy(sh.viewport),this.texture=sh.texture.clone(),this.texture.image=Object.assign({},sh.texture.image),this.depthBuffer=sh.depthBuffer,this.stencilBuffer=sh.stencilBuffer,this.depthTexture=sh.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}kh.prototype.isWebGLRenderTarget=!0,(class extends kh{constructor(th,uh,vh){super(th,uh);const wh=this.texture;this.texture=[];for(let xh=0;xh<vh;xh++)this.texture[xh]=wh.clone()}setSize(yh,zh,Ah=1){if(this.width!==yh||this.height!==zh||this.depth!==Ah){this.width=yh,this.height=zh,this.depth=Ah;for(let Bh=0,Ch=this.texture.length;Bh<Ch;Bh++)this.texture[Bh].image.width=yh,this.texture[Bh].image.height=zh,this.texture[Bh].image.depth=Ah;this.dispose()}return this.viewport.set(0,0,yh,zh),this.scissor.set(0,0,yh,zh),this}copy(Dh){this.dispose(),this.width=Dh.width,this.height=Dh.height,this.depth=Dh.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=Dh.depthBuffer,this.stencilBuffer=Dh.stencilBuffer,this.depthTexture=Dh.depthTexture,this.texture.length=0;for(let Eh=0,Fh=Dh.texture.length;Eh<Fh;Eh++)this.texture[Eh]=Dh.texture[Eh].clone();return this}}).prototype.isWebGLMultipleRenderTargets=!0;class Gh extends kh{constructor(Hh,Ih,Jh={}){super(Hh,Ih,Jh),this.samples=4,this.ignoreDepthForMultisampleCopy=void 0===Jh.ignoreDepth||Jh.ignoreDepth,this.useRenderToTexture=void 0!==Jh.useRenderToTexture&&Jh.useRenderToTexture,this.useRenderbuffer=!1===this.useRenderToTexture}copy(Kh){return super.copy.call(this,Kh),this.samples=Kh.samples,this.useRenderToTexture=Kh.useRenderToTexture,this.useRenderbuffer=Kh.useRenderbuffer,this}}Gh.prototype.isWebGLMultisampleRenderTarget=!0;class Lh{constructor(Mh=0,Nh=0,Oh=0,Ph=1){this._x=Mh,this._y=Nh,this._z=Oh,this._w=Ph}static slerp(Qh,Rh,Sh,Th){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),Sh.slerpQuaternions(Qh,Rh,Th)}static slerpFlat(Uh,Vh,Wh,Xh,Yh,Zh,$h){let _h=Wh[Xh+0],ai=Wh[Xh+1],bi=Wh[Xh+2],ci=Wh[Xh+3];const di=Yh[Zh+0],ei=Yh[Zh+1],fi=Yh[Zh+2],gi=Yh[Zh+3];if(0===$h){Uh[Vh+0]=_h,Uh[Vh+1]=ai,Uh[Vh+2]=bi,Uh[Vh+3]=ci;return}if(1===$h){Uh[Vh+0]=di,Uh[Vh+1]=ei,Uh[Vh+2]=fi,Uh[Vh+3]=gi;return}if(ci!==gi||_h!==di||ai!==ei||bi!==fi){let hi=1-$h;const ii=_h*di+ai*ei+bi*fi+ci*gi,ji=ii>=0?1:-1,ki=1-ii*ii;if(ki>Number.EPSILON){const li=Math.sqrt(ki),mi=Math.atan2(li,ii*ji);hi=Math.sin(hi*mi)/li,$h=Math.sin($h*mi)/li}const ni=$h*ji;if(_h=_h*hi+di*ni,ai=ai*hi+ei*ni,bi=bi*hi+fi*ni,ci=ci*hi+gi*ni,hi===1-$h){const oi=1/Math.sqrt(_h*_h+ai*ai+bi*bi+ci*ci);_h*=oi,ai*=oi,bi*=oi,ci*=oi}}Uh[Vh]=_h,Uh[Vh+1]=ai,Uh[Vh+2]=bi,Uh[Vh+3]=ci}static multiplyQuaternionsFlat(pi,qi,ri,si,ti,ui){const vi=ri[si],wi=ri[si+1],xi=ri[si+2],yi=ri[si+3],zi=ti[ui],Ai=ti[ui+1],Bi=ti[ui+2],Ci=ti[ui+3];return pi[qi]=vi*Ci+yi*zi+wi*Bi-xi*Ai,pi[qi+1]=wi*Ci+yi*Ai+xi*zi-vi*Bi,pi[qi+2]=xi*Ci+yi*Bi+vi*Ai-wi*zi,pi[qi+3]=yi*Ci-vi*zi-wi*Ai-xi*Bi,pi}get x(){return this._x}set x(Di){this._x=Di,this._onChangeCallback()}get y(){return this._y}set y(Ei){this._y=Ei,this._onChangeCallback()}get z(){return this._z}set z(Fi){this._z=Fi,this._onChangeCallback()}get w(){return this._w}set w(Gi){this._w=Gi,this._onChangeCallback()}set(Hi,Ii,Ji,Ki){return this._x=Hi,this._y=Ii,this._z=Ji,this._w=Ki,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(Li){return this._x=Li.x,this._y=Li.y,this._z=Li.z,this._w=Li.w,this._onChangeCallback(),this}setFromEuler(Mi,Ni){if(!(Mi&&Mi.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const Oi=Mi._x,Pi=Mi._y,Qi=Mi._z,Ri=Mi._order,Si=Math.cos,Ti=Math.sin,Ui=Si(Oi/2),Vi=Si(Pi/2),Wi=Si(Qi/2),Xi=Ti(Oi/2),Yi=Ti(Pi/2),Zi=Ti(Qi/2);switch(Ri){case"XYZ":this._x=Xi*Vi*Wi+Ui*Yi*Zi,this._y=Ui*Yi*Wi-Xi*Vi*Zi,this._z=Ui*Vi*Zi+Xi*Yi*Wi,this._w=Ui*Vi*Wi-Xi*Yi*Zi;break;case"YXZ":this._x=Xi*Vi*Wi+Ui*Yi*Zi,this._y=Ui*Yi*Wi-Xi*Vi*Zi,this._z=Ui*Vi*Zi-Xi*Yi*Wi,this._w=Ui*Vi*Wi+Xi*Yi*Zi;break;case"ZXY":this._x=Xi*Vi*Wi-Ui*Yi*Zi,this._y=Ui*Yi*Wi+Xi*Vi*Zi,this._z=Ui*Vi*Zi+Xi*Yi*Wi,this._w=Ui*Vi*Wi-Xi*Yi*Zi;break;case"ZYX":this._x=Xi*Vi*Wi-Ui*Yi*Zi,this._y=Ui*Yi*Wi+Xi*Vi*Zi,this._z=Ui*Vi*Zi-Xi*Yi*Wi,this._w=Ui*Vi*Wi+Xi*Yi*Zi;break;case"YZX":this._x=Xi*Vi*Wi+Ui*Yi*Zi,this._y=Ui*Yi*Wi+Xi*Vi*Zi,this._z=Ui*Vi*Zi-Xi*Yi*Wi,this._w=Ui*Vi*Wi-Xi*Yi*Zi;break;case"XZY":this._x=Xi*Vi*Wi-Ui*Yi*Zi,this._y=Ui*Yi*Wi-Xi*Vi*Zi,this._z=Ui*Vi*Zi+Xi*Yi*Wi,this._w=Ui*Vi*Wi+Xi*Yi*Zi;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+Ri)}return!1!==Ni&&this._onChangeCallback(),this}setFromAxisAngle($i,_i){const aj=_i/2,bj=Math.sin(aj);return this._x=$i.x*bj,this._y=$i.y*bj,this._z=$i.z*bj,this._w=Math.cos(aj),this._onChangeCallback(),this}setFromRotationMatrix(cj){const dj=cj.elements,ej=dj[0],fj=dj[4],gj=dj[8],hj=dj[1],ij=dj[5],jj=dj[9],kj=dj[2],lj=dj[6],mj=dj[10],nj=ej+ij+mj;if(nj>0){const oj=0.5/Math.sqrt(nj+1);this._w=0.25/oj,this._x=(lj-jj)*oj,this._y=(gj-kj)*oj,this._z=(hj-fj)*oj}else if(ej>ij&&ej>mj){const pj=2*Math.sqrt(1+ej-ij-mj);this._w=(lj-jj)/pj,this._x=0.25*pj,this._y=(fj+hj)/pj,this._z=(gj+kj)/pj}else if(ij>mj){const qj=2*Math.sqrt(1+ij-ej-mj);this._w=(gj-kj)/qj,this._x=(fj+hj)/qj,this._y=0.25*qj,this._z=(jj+lj)/qj}else{const rj=2*Math.sqrt(1+mj-ej-ij);this._w=(hj-fj)/rj,this._x=(gj+kj)/rj,this._y=(jj+lj)/rj,this._z=0.25*rj}return this._onChangeCallback(),this}setFromUnitVectors(sj,tj){let uj=sj.dot(tj)+1;return uj<Number.EPSILON?(uj=0,Math.abs(sj.x)>Math.abs(sj.z)?(this._x=-sj.y,this._y=sj.x,this._z=0,this._w=uj):(this._x=0,this._y=-sj.z,this._z=sj.y,this._w=uj)):(this._x=sj.y*tj.z-sj.z*tj.y,this._y=sj.z*tj.x-sj.x*tj.z,this._z=sj.x*tj.y-sj.y*tj.x,this._w=uj),this.normalize()}angleTo(vj){return 2*Math.acos(Math.abs($(this.dot(vj),-1,1)))}rotateTowards(wj,xj){const yj=this.angleTo(wj);if(0===yj)return this;const zj=Math.min(1,xj/yj);return this.slerp(wj,zj),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(Aj){return this._x*Aj._x+this._y*Aj._y+this._z*Aj._z+this._w*Aj._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let Bj=this.length();return 0===Bj?(this._x=0,this._y=0,this._z=0,this._w=1):(Bj=1/Bj,this._x=this._x*Bj,this._y=this._y*Bj,this._z=this._z*Bj,this._w=this._w*Bj),this._onChangeCallback(),this}multiply(Cj,Dj){return void 0!==Dj?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(Cj,Dj)):this.multiplyQuaternions(this,Cj)}premultiply(Ej){return this.multiplyQuaternions(Ej,this)}multiplyQuaternions(Fj,Gj){const Hj=Fj._x,Ij=Fj._y,Jj=Fj._z,Kj=Fj._w,Lj=Gj._x,Mj=Gj._y,Nj=Gj._z,Oj=Gj._w;return this._x=Hj*Oj+Kj*Lj+Ij*Nj-Jj*Mj,this._y=Ij*Oj+Kj*Mj+Jj*Lj-Hj*Nj,this._z=Jj*Oj+Kj*Nj+Hj*Mj-Ij*Lj,this._w=Kj*Oj-Hj*Lj-Ij*Mj-Jj*Nj,this._onChangeCallback(),this}slerp(Pj,Qj){if(0===Qj)return this;if(1===Qj)return this.copy(Pj);const Rj=this._x,Sj=this._y,Tj=this._z,Uj=this._w;let Vj=Uj*Pj._w+Rj*Pj._x+Sj*Pj._y+Tj*Pj._z;if(Vj<0?(this._w=-Pj._w,this._x=-Pj._x,this._y=-Pj._y,this._z=-Pj._z,Vj=-Vj):this.copy(Pj),Vj>=1)return this._w=Uj,this._x=Rj,this._y=Sj,this._z=Tj,this;const Wj=1-Vj*Vj;if(Wj<=Number.EPSILON){const Xj=1-Qj;return this._w=Xj*Uj+Qj*this._w,this._x=Xj*Rj+Qj*this._x,this._y=Xj*Sj+Qj*this._y,this._z=Xj*Tj+Qj*this._z,this.normalize(),this._onChangeCallback(),this}const Yj=Math.sqrt(Wj),Zj=Math.atan2(Yj,Vj),$j=Math.sin((1-Qj)*Zj)/Yj,_j=Math.sin(Qj*Zj)/Yj;return this._w=Uj*$j+this._w*_j,this._x=Rj*$j+this._x*_j,this._y=Sj*$j+this._y*_j,this._z=Tj*$j+this._z*_j,this._onChangeCallback(),this}slerpQuaternions(ak,bk,ck){return this.copy(ak).slerp(bk,ck)}random(){const dk=Math.random(),ek=Math.sqrt(1-dk),fk=Math.sqrt(dk),gk=2*Math.PI*Math.random(),hk=2*Math.PI*Math.random();return this.set(ek*Math.cos(gk),fk*Math.sin(hk),fk*Math.cos(hk),ek*Math.sin(gk))}equals(ik){return ik._x===this._x&&ik._y===this._y&&ik._z===this._z&&ik._w===this._w}fromArray(jk,kk=0){return this._x=jk[kk],this._y=jk[kk+1],this._z=jk[kk+2],this._w=jk[kk+3],this._onChangeCallback(),this}toArray(lk=[],mk=0){return lk[mk]=this._x,lk[mk+1]=this._y,lk[mk+2]=this._z,lk[mk+3]=this._w,lk}fromBufferAttribute(nk,ok){return this._x=nk.getX(ok),this._y=nk.getY(ok),this._z=nk.getZ(ok),this._w=nk.getW(ok),this}_onChange(pk){return this._onChangeCallback=pk,this}_onChangeCallback(){}}Lh.prototype.isQuaternion=!0;class qk{constructor(rk=0,sk=0,tk=0){this.x=rk,this.y=sk,this.z=tk}set(uk,vk,wk){return void 0===wk&&(wk=this.z),this.x=uk,this.y=vk,this.z=wk,this}setScalar(xk){return this.x=xk,this.y=xk,this.z=xk,this}setX(yk){return this.x=yk,this}setY(zk){return this.y=zk,this}setZ(Ak){return this.z=Ak,this}setComponent(Bk,Ck){switch(Bk){case 0:this.x=Ck;break;case 1:this.y=Ck;break;case 2:this.z=Ck;break;default:throw new Error("index is out of range: "+Bk)}return this}getComponent(Dk){switch(Dk){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+Dk)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(Ek){return this.x=Ek.x,this.y=Ek.y,this.z=Ek.z,this}add(Fk,Gk){return void 0!==Gk?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(Fk,Gk)):(this.x+=Fk.x,this.y+=Fk.y,this.z+=Fk.z,this)}addScalar(Hk){return this.x+=Hk,this.y+=Hk,this.z+=Hk,this}addVectors(Ik,Jk){return this.x=Ik.x+Jk.x,this.y=Ik.y+Jk.y,this.z=Ik.z+Jk.z,this}addScaledVector(Kk,Lk){return this.x+=Kk.x*Lk,this.y+=Kk.y*Lk,this.z+=Kk.z*Lk,this}sub(Mk,Nk){return void 0!==Nk?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(Mk,Nk)):(this.x-=Mk.x,this.y-=Mk.y,this.z-=Mk.z,this)}subScalar(Ok){return this.x-=Ok,this.y-=Ok,this.z-=Ok,this}subVectors(Pk,Qk){return this.x=Pk.x-Qk.x,this.y=Pk.y-Qk.y,this.z=Pk.z-Qk.z,this}multiply(Rk,Sk){return void 0!==Sk?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(Rk,Sk)):(this.x*=Rk.x,this.y*=Rk.y,this.z*=Rk.z,this)}multiplyScalar(Tk){return this.x*=Tk,this.y*=Tk,this.z*=Tk,this}multiplyVectors(Uk,Vk){return this.x=Uk.x*Vk.x,this.y=Uk.y*Vk.y,this.z=Uk.z*Vk.z,this}applyEuler(Wk){return Wk&&Wk.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Vm.setFromEuler(Wk))}applyAxisAngle(Xk,Yk){return this.applyQuaternion(Vm.setFromAxisAngle(Xk,Yk))}applyMatrix3(Zk){const $k=this.x,_k=this.y,al=this.z,bl=Zk.elements;return this.x=bl[0]*$k+bl[3]*_k+bl[6]*al,this.y=bl[1]*$k+bl[4]*_k+bl[7]*al,this.z=bl[2]*$k+bl[5]*_k+bl[8]*al,this}applyNormalMatrix(cl){return this.applyMatrix3(cl).normalize()}applyMatrix4(dl){const el=this.x,fl=this.y,gl=this.z,hl=dl.elements,il=1/(hl[3]*el+hl[7]*fl+hl[11]*gl+hl[15]);return this.x=(hl[0]*el+hl[4]*fl+hl[8]*gl+hl[12])*il,this.y=(hl[1]*el+hl[5]*fl+hl[9]*gl+hl[13])*il,this.z=(hl[2]*el+hl[6]*fl+hl[10]*gl+hl[14])*il,this}applyQuaternion(jl){const kl=this.x,ll=this.y,ml=this.z,nl=jl.x,ol=jl.y,pl=jl.z,ql=jl.w,rl=ql*kl+ol*ml-pl*ll,sl=ql*ll+pl*kl-nl*ml,tl=ql*ml+nl*ll-ol*kl,ul=-nl*kl-ol*ll-pl*ml;return this.x=rl*ql+ -(ul*nl)+ -(sl*pl)- -(tl*ol),this.y=sl*ql+ -(ul*ol)+ -(tl*nl)- -(rl*pl),this.z=tl*ql+ -(ul*pl)+ -(rl*ol)- -(sl*nl),this}project(vl){return this.applyMatrix4(vl.matrixWorldInverse).applyMatrix4(vl.projectionMatrix)}unproject(wl){return this.applyMatrix4(wl.projectionMatrixInverse).applyMatrix4(wl.matrixWorld)}transformDirection(xl){const yl=this.x,zl=this.y,Al=this.z,Bl=xl.elements;return this.x=Bl[0]*yl+Bl[4]*zl+Bl[8]*Al,this.y=Bl[1]*yl+Bl[5]*zl+Bl[9]*Al,this.z=Bl[2]*yl+Bl[6]*zl+Bl[10]*Al,this.normalize()}divide(Cl){return this.x/=Cl.x,this.y/=Cl.y,this.z/=Cl.z,this}divideScalar(Dl){return this.multiplyScalar(1/Dl)}min(El){return this.x=Math.min(this.x,El.x),this.y=Math.min(this.y,El.y),this.z=Math.min(this.z,El.z),this}max(Fl){return this.x=Math.max(this.x,Fl.x),this.y=Math.max(this.y,Fl.y),this.z=Math.max(this.z,Fl.z),this}clamp(Gl,Hl){return this.x=Math.max(Gl.x,Math.min(Hl.x,this.x)),this.y=Math.max(Gl.y,Math.min(Hl.y,this.y)),this.z=Math.max(Gl.z,Math.min(Hl.z,this.z)),this}clampScalar(Il,Jl){return this.x=Math.max(Il,Math.min(Jl,this.x)),this.y=Math.max(Il,Math.min(Jl,this.y)),this.z=Math.max(Il,Math.min(Jl,this.z)),this}clampLength(Kl,Ll){const Ml=this.length();return this.divideScalar(Ml||1).multiplyScalar(Math.max(Kl,Math.min(Ll,Ml)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(Nl){return this.x*Nl.x+this.y*Nl.y+this.z*Nl.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(Ol){return this.normalize().multiplyScalar(Ol)}lerp(Pl,Ql){return this.x+=(Pl.x-this.x)*Ql,this.y+=(Pl.y-this.y)*Ql,this.z+=(Pl.z-this.z)*Ql,this}lerpVectors(Rl,Sl,Tl){return this.x=Rl.x+(Sl.x-Rl.x)*Tl,this.y=Rl.y+(Sl.y-Rl.y)*Tl,this.z=Rl.z+(Sl.z-Rl.z)*Tl,this}cross(Ul,Vl){return void 0!==Vl?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(Ul,Vl)):this.crossVectors(this,Ul)}crossVectors(Wl,Xl){const Yl=Wl.x,Zl=Wl.y,$l=Wl.z,_l=Xl.x,am=Xl.y,bm=Xl.z;return this.x=Zl*bm-$l*am,this.y=$l*_l-Yl*bm,this.z=Yl*am-Zl*_l,this}projectOnVector(cm){const dm=cm.lengthSq();if(0===dm)return this.set(0,0,0);const em=cm.dot(this)/dm;return this.copy(cm).multiplyScalar(em)}projectOnPlane(fm){return Um.copy(this).projectOnVector(fm),this.sub(Um)}reflect(gm){return this.sub(Um.copy(gm).multiplyScalar(2*this.dot(gm)))}angleTo(hm){const im=Math.sqrt(this.lengthSq()*hm.lengthSq());if(0===im)return Math.PI/2;const jm=this.dot(hm)/im;return Math.acos($(jm,-1,1))}distanceTo(km){return Math.sqrt(this.distanceToSquared(km))}distanceToSquared(lm){const mm=this.x-lm.x,nm=this.y-lm.y,om=this.z-lm.z;return mm*mm+nm*nm+om*om}manhattanDistanceTo(pm){return Math.abs(this.x-pm.x)+Math.abs(this.y-pm.y)+Math.abs(this.z-pm.z)}setFromSpherical(qm){return this.setFromSphericalCoords(qm.radius,qm.phi,qm.theta)}setFromSphericalCoords(rm,sm,tm){const um=Math.sin(sm)*rm;return this.x=um*Math.sin(tm),this.y=Math.cos(sm)*rm,this.z=um*Math.cos(tm),this}setFromCylindrical(vm){return this.setFromCylindricalCoords(vm.radius,vm.theta,vm.y)}setFromCylindricalCoords(wm,xm,ym){return this.x=wm*Math.sin(xm),this.y=ym,this.z=wm*Math.cos(xm),this}setFromMatrixPosition(zm){const Am=zm.elements;return this.x=Am[12],this.y=Am[13],this.z=Am[14],this}setFromMatrixScale(Bm){const Cm=this.setFromMatrixColumn(Bm,0).length(),Dm=this.setFromMatrixColumn(Bm,1).length(),Em=this.setFromMatrixColumn(Bm,2).length();return this.x=Cm,this.y=Dm,this.z=Em,this}setFromMatrixColumn(Fm,Gm){return this.fromArray(Fm.elements,4*Gm)}setFromMatrix3Column(Hm,Im){return this.fromArray(Hm.elements,3*Im)}equals(Jm){return Jm.x===this.x&&Jm.y===this.y&&Jm.z===this.z}fromArray(Km,Lm=0){return this.x=Km[Lm],this.y=Km[Lm+1],this.z=Km[Lm+2],this}toArray(Mm=[],Nm=0){return Mm[Nm]=this.x,Mm[Nm+1]=this.y,Mm[Nm+2]=this.z,Mm}fromBufferAttribute(Om,Pm,Qm){return void 0!==Qm&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=Om.getX(Pm),this.y=Om.getY(Pm),this.z=Om.getZ(Pm),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const Rm=(Math.random()-0.5)*2,Sm=Math.random()*Math.PI*2,Tm=Math.sqrt(1-Rm**2);return this.x=Tm*Math.cos(Sm),this.y=Tm*Math.sin(Sm),this.z=Rm,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}qk.prototype.isVector3=!0;const Um=new qk(),Vm=new Lh();class Wm{constructor(Xm=new qk(Infinity,Infinity,Infinity),Ym=new qk(-1/0,-1/0,-1/0)){this.min=Xm,this.max=Ym}set(Zm,$m){return this.min.copy(Zm),this.max.copy($m),this}setFromArray(_m){let an=Infinity,bn=Infinity,cn=Infinity,dn=-1/0,en=-1/0,fn=-1/0;for(let gn=0,hn=_m.length;gn<hn;gn+=3){const jn=_m[gn],kn=_m[gn+1],ln=_m[gn+2];jn<an&&(an=jn),kn<bn&&(bn=kn),ln<cn&&(cn=ln),jn>dn&&(dn=jn),kn>en&&(en=kn),ln>fn&&(fn=ln)}return this.min.set(an,bn,cn),this.max.set(dn,en,fn),this}setFromBufferAttribute(mn){let nn=Infinity,on=Infinity,pn=Infinity,qn=-1/0,rn=-1/0,sn=-1/0;for(let tn=0,un=mn.count;tn<un;tn++){const vn=mn.getX(tn),wn=mn.getY(tn),xn=mn.getZ(tn);vn<nn&&(nn=vn),wn<on&&(on=wn),xn<pn&&(pn=xn),vn>qn&&(qn=vn),wn>rn&&(rn=wn),xn>sn&&(sn=xn)}return this.min.set(nn,on,pn),this.max.set(qn,rn,sn),this}setFromPoints(yn){this.makeEmpty();for(let zn=0,An=yn.length;zn<An;zn++)this.expandByPoint(yn[zn]);return this}setFromCenterAndSize(Bn,Cn){const Dn=qo.copy(Cn).multiplyScalar(0.5);return this.min.copy(Bn).sub(Dn),this.max.copy(Bn).add(Dn),this}setFromObject(En,Fn=!1){return this.makeEmpty(),this.expandByObject(En,Fn)}clone(){return new this.constructor().copy(this)}copy(Gn){return this.min.copy(Gn.min),this.max.copy(Gn.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=Infinity,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(Hn){return this.isEmpty()?Hn.set(0,0,0):Hn.addVectors(this.min,this.max).multiplyScalar(0.5)}getSize(In){return this.isEmpty()?In.set(0,0,0):In.subVectors(this.max,this.min)}expandByPoint(Jn){return this.min.min(Jn),this.max.max(Jn),this}expandByVector(Kn){return this.min.sub(Kn),this.max.add(Kn),this}expandByScalar(Ln){return this.min.addScalar(-Ln),this.max.addScalar(Ln),this}expandByObject(Mn,Nn=!1){Mn.updateWorldMatrix(!1,!1);const On=Mn.geometry;if(void 0!==On)if(Nn&& void 0!=On.attributes&& void 0!==On.attributes.position){const Pn=On.attributes.position;for(let Qn=0,Rn=Pn.count;Qn<Rn;Qn++)qo.fromBufferAttribute(Pn,Qn).applyMatrix4(Mn.matrixWorld),this.expandByPoint(qo)}else null===On.boundingBox&&On.computeBoundingBox(),ro.copy(On.boundingBox),ro.applyMatrix4(Mn.matrixWorld),this.union(ro);const Sn=Mn.children;for(let Tn=0,Un=Sn.length;Tn<Un;Tn++)this.expandByObject(Sn[Tn],Nn);return this}containsPoint(Vn){return!(Vn.x<this.min.x)&&!(Vn.x>this.max.x)&&!(Vn.y<this.min.y)&&!(Vn.y>this.max.y)&&!(Vn.z<this.min.z)&&!(Vn.z>this.max.z)}containsBox(Wn){return this.min.x<=Wn.min.x&&Wn.max.x<=this.max.x&&this.min.y<=Wn.min.y&&Wn.max.y<=this.max.y&&this.min.z<=Wn.min.z&&Wn.max.z<=this.max.z}getParameter(Xn,Yn){return Yn.set((Xn.x-this.min.x)/(this.max.x-this.min.x),(Xn.y-this.min.y)/(this.max.y-this.min.y),(Xn.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(Zn){return!(Zn.max.x<this.min.x)&&!(Zn.min.x>this.max.x)&&!(Zn.max.y<this.min.y)&&!(Zn.min.y>this.max.y)&&!(Zn.max.z<this.min.z)&&!(Zn.min.z>this.max.z)}intersectsSphere($n){return this.clampPoint($n.center,qo),qo.distanceToSquared($n.center)<=$n.radius*$n.radius}intersectsPlane(_n){let ao,bo;return _n.normal.x>0?(ao=_n.normal.x*this.min.x,bo=_n.normal.x*this.max.x):(ao=_n.normal.x*this.max.x,bo=_n.normal.x*this.min.x),_n.normal.y>0?(ao+=_n.normal.y*this.min.y,bo+=_n.normal.y*this.max.y):(ao+=_n.normal.y*this.max.y,bo+=_n.normal.y*this.min.y),_n.normal.z>0?(ao+=_n.normal.z*this.min.z,bo+=_n.normal.z*this.max.z):(ao+=_n.normal.z*this.max.z,bo+=_n.normal.z*this.min.z),ao<= -_n.constant&&bo>= -_n.constant}intersectsTriangle(co){if(this.isEmpty())return!1;this.getCenter(yo),zo.subVectors(this.max,yo),so.subVectors(co.a,yo),to.subVectors(co.b,yo),uo.subVectors(co.c,yo),vo.subVectors(to,so),wo.subVectors(uo,to),xo.subVectors(so,uo);let eo=[0,-vo.z,vo.y,0,-wo.z,wo.y,0,-xo.z,xo.y,vo.z,0,-vo.x,wo.z,0,-wo.x,xo.z,0,-xo.x,-vo.y,vo.x,0,-wo.y,wo.x,0,-xo.y,xo.x,0];return!!Co(eo,so,to,uo,zo)&& !!Co(eo=[1,0,0,0,1,0,0,0,1],so,to,uo,zo)&&(Ao.crossVectors(vo,wo),Co(eo=[Ao.x,Ao.y,Ao.z],so,to,uo,zo))}clampPoint(fo,go){return go.copy(fo).clamp(this.min,this.max)}distanceToPoint(ho){const io=qo.copy(ho).clamp(this.min,this.max);return io.sub(ho).length()}getBoundingSphere(jo){return this.getCenter(jo.center),jo.radius=0.5*this.getSize(qo).length(),jo}intersect(ko){return this.min.max(ko.min),this.max.min(ko.max),this.isEmpty()&&this.makeEmpty(),this}union(lo){return this.min.min(lo.min),this.max.max(lo.max),this}applyMatrix4(mo){return this.isEmpty()||(po[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(mo),po[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(mo),po[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(mo),po[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(mo),po[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(mo),po[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(mo),po[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(mo),po[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(mo),this.setFromPoints(po)),this}translate(no){return this.min.add(no),this.max.add(no),this}equals(oo){return oo.min.equals(this.min)&&oo.max.equals(this.max)}}Wm.prototype.isBox3=!0;const po=[new qk(),new qk(),new qk(),new qk(),new qk(),new qk(),new qk(),new qk()],qo=new qk(),ro=new Wm(),so=new qk(),to=new qk(),uo=new qk(),vo=new qk(),wo=new qk(),xo=new qk(),yo=new qk(),zo=new qk(),Ao=new qk(),Bo=new qk();function Co(a,b,c,d,e){for(let f=0,g=a.length-3;f<=g;f+=3){Bo.fromArray(a,f);const h=e.x*Math.abs(Bo.x)+e.y*Math.abs(Bo.y)+e.z*Math.abs(Bo.z),i=b.dot(Bo),j=c.dot(Bo),k=d.dot(Bo);if(Math.max(-Math.max(i,j,k),Math.min(i,j,k))>h)return!1}return!0}const Do=new Wm(),Eo=new qk(),Fo=new qk(),Go=new qk();class Ho{constructor(Io=new qk(),Jo=-1){this.center=Io,this.radius=Jo}set(Ko,Lo){return this.center.copy(Ko),this.radius=Lo,this}setFromPoints(Mo,No){const Oo=this.center;void 0!==No?Oo.copy(No):Do.setFromPoints(Mo).getCenter(Oo);let Po=0;for(let Qo=0,Ro=Mo.length;Qo<Ro;Qo++)Po=Math.max(Po,Oo.distanceToSquared(Mo[Qo]));return this.radius=Math.sqrt(Po),this}copy(So){return this.center.copy(So.center),this.radius=So.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(To){return To.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(Uo){return Uo.distanceTo(this.center)-this.radius}intersectsSphere(Vo){const Wo=this.radius+Vo.radius;return Vo.center.distanceToSquared(this.center)<=Wo*Wo}intersectsBox(Xo){return Xo.intersectsSphere(this)}intersectsPlane(Yo){return Math.abs(Yo.distanceToPoint(this.center))<=this.radius}clampPoint(Zo,$o){const _o=this.center.distanceToSquared(Zo);return $o.copy(Zo),_o>this.radius*this.radius&&($o.sub(this.center).normalize(),$o.multiplyScalar(this.radius).add(this.center)),$o}getBoundingBox(ap){return this.isEmpty()?(ap.makeEmpty(),ap):(ap.set(this.center,this.center),ap.expandByScalar(this.radius),ap)}applyMatrix4(bp){return this.center.applyMatrix4(bp),this.radius=this.radius*bp.getMaxScaleOnAxis(),this}translate(cp){return this.center.add(cp),this}expandByPoint(dp){Go.subVectors(dp,this.center);const ep=Go.lengthSq();if(ep>this.radius*this.radius){const fp=Math.sqrt(ep),gp=(fp-this.radius)*0.5;this.center.add(Go.multiplyScalar(gp/fp)),this.radius+=gp}return this}union(hp){return!0===this.center.equals(hp.center)?Fo.set(0,0,1).multiplyScalar(hp.radius):Fo.subVectors(hp.center,this.center).normalize().multiplyScalar(hp.radius),this.expandByPoint(Eo.copy(hp.center).add(Fo)),this.expandByPoint(Eo.copy(hp.center).sub(Fo)),this}equals(ip){return ip.center.equals(this.center)&&ip.radius===this.radius}clone(){return new this.constructor().copy(this)}}const jp=new qk(),kp=new qk(),lp=new qk(),mp=new qk(),np=new qk(),op=new qk(),pp=new qk();class qp{constructor(rp=new qk(),sp=new qk(0,0,-1)){this.origin=rp,this.direction=sp}set(tp,up){return this.origin.copy(tp),this.direction.copy(up),this}copy(vp){return this.origin.copy(vp.origin),this.direction.copy(vp.direction),this}at(wp,xp){return xp.copy(this.direction).multiplyScalar(wp).add(this.origin)}lookAt(yp){return this.direction.copy(yp).sub(this.origin).normalize(),this}recast(zp){return this.origin.copy(this.at(zp,jp)),this}closestPointToPoint(Ap,Bp){Bp.subVectors(Ap,this.origin);const Cp=Bp.dot(this.direction);return Cp<0?Bp.copy(this.origin):Bp.copy(this.direction).multiplyScalar(Cp).add(this.origin)}distanceToPoint(Dp){return Math.sqrt(this.distanceSqToPoint(Dp))}distanceSqToPoint(Ep){const Fp=jp.subVectors(Ep,this.origin).dot(this.direction);return Fp<0?this.origin.distanceToSquared(Ep):(jp.copy(this.direction).multiplyScalar(Fp).add(this.origin),jp.distanceToSquared(Ep))}distanceSqToSegment(Gp,Hp,Ip,Jp){kp.copy(Gp).add(Hp).multiplyScalar(0.5),lp.copy(Hp).sub(Gp).normalize(),mp.copy(this.origin).sub(kp);const Kp=0.5*Gp.distanceTo(Hp),Lp=-this.direction.dot(lp),Mp=mp.dot(this.direction),Np=-mp.dot(lp),Op=mp.lengthSq(),Pp=Math.abs(1-Lp*Lp);let Qp,Rp,Sp,Tp;if(Pp>0)if(Qp=Lp*Np-Mp,Rp=Lp*Mp-Np,Tp=Kp*Pp,Qp>=0)if(Rp>= -Tp)if(Rp<=Tp){const Up=1/Pp;Qp*=Up,Rp*=Up,Sp=Qp*(Qp+Lp*Rp+2*Mp)+Rp*(Lp*Qp+Rp+2*Np)+Op}else Sp=-(Qp=Math.max(0,-(Lp*(Rp=Kp)+Mp)))*Qp+Rp*(Rp+2*Np)+Op;else Sp=-(Qp=Math.max(0,-(Lp*(Rp=-Kp)+Mp)))*Qp+Rp*(Rp+2*Np)+Op;else Rp<= -Tp?(Rp=(Qp=Math.max(0,-(-Lp*Kp+Mp)))>0?-Kp:Math.min(Math.max(-Kp,-Np),Kp),Sp=-Qp*Qp+Rp*(Rp+2*Np)+Op):Rp<=Tp?(Qp=0,Sp=(Rp=Math.min(Math.max(-Kp,-Np),Kp))*(Rp+2*Np)+Op):(Rp=(Qp=Math.max(0,-(Lp*Kp+Mp)))>0?Kp:Math.min(Math.max(-Kp,-Np),Kp),Sp=-Qp*Qp+Rp*(Rp+2*Np)+Op);else Rp=Lp>0?-Kp:Kp,Qp=Math.max(0,-(Lp*Rp+Mp)),Sp=-Qp*Qp+Rp*(Rp+2*Np)+Op;return Ip&&Ip.copy(this.direction).multiplyScalar(Qp).add(this.origin),Jp&&Jp.copy(lp).multiplyScalar(Rp).add(kp),Sp}intersectSphere(Vp,Wp){jp.subVectors(Vp.center,this.origin);const Xp=jp.dot(this.direction),Yp=jp.dot(jp)-Xp*Xp,Zp=Vp.radius*Vp.radius;if(Yp>Zp)return null;const $p=Math.sqrt(Zp-Yp),_p=Xp-$p,aq=Xp+$p;return _p<0&&aq<0?null:_p<0?this.at(aq,Wp):this.at(_p,Wp)}intersectsSphere(bq){return this.distanceSqToPoint(bq.center)<=bq.radius*bq.radius}distanceToPlane(cq){const dq=cq.normal.dot(this.direction);if(0===dq)return 0===cq.distanceToPoint(this.origin)?0:null;const eq=-(this.origin.dot(cq.normal)+cq.constant)/dq;return eq>=0?eq:null}intersectPlane(fq,gq){const hq=this.distanceToPlane(fq);return null===hq?null:this.at(hq,gq)}intersectsPlane(iq){const jq=iq.distanceToPoint(this.origin);if(0===jq)return!0;const kq=iq.normal.dot(this.direction);return kq*jq<0}intersectBox(lq,mq){let nq,oq,pq,qq,rq,sq;const tq=1/this.direction.x,uq=1/this.direction.y,vq=1/this.direction.z,wq=this.origin;return(tq>=0?(nq=(lq.min.x-wq.x)*tq,oq=(lq.max.x-wq.x)*tq):(nq=(lq.max.x-wq.x)*tq,oq=(lq.min.x-wq.x)*tq),uq>=0?(pq=(lq.min.y-wq.y)*uq,qq=(lq.max.y-wq.y)*uq):(pq=(lq.max.y-wq.y)*uq,qq=(lq.min.y-wq.y)*uq),nq>qq||pq>oq)?null:((pq>nq||nq!=nq)&&(nq=pq),(qq<oq||oq!=oq)&&(oq=qq),vq>=0?(rq=(lq.min.z-wq.z)*vq,sq=(lq.max.z-wq.z)*vq):(rq=(lq.max.z-wq.z)*vq,sq=(lq.min.z-wq.z)*vq),nq>sq||rq>oq)?null:((rq>nq||nq!=nq)&&(nq=rq),(sq<oq||oq!=oq)&&(oq=sq),oq<0)?null:this.at(nq>=0?nq:oq,mq)}intersectsBox(xq){return null!==this.intersectBox(xq,jp)}intersectTriangle(yq,zq,Aq,Bq,Cq){np.subVectors(zq,yq),op.subVectors(Aq,yq),pp.crossVectors(np,op);let Dq=this.direction.dot(pp),Eq;if(Dq>0){if(Bq)return null;Eq=1}else{if(!(Dq<0))return null;Eq=-1,Dq=-Dq}mp.subVectors(this.origin,yq);const Fq=Eq*this.direction.dot(op.crossVectors(mp,op));if(Fq<0)return null;const Gq=Eq*this.direction.dot(np.cross(mp));if(Gq<0)return null;if(Fq+Gq>Dq)return null;const Hq=-Eq*mp.dot(pp);return Hq<0?null:this.at(Hq/Dq,Cq)}applyMatrix4(Iq){return this.origin.applyMatrix4(Iq),this.direction.transformDirection(Iq),this}equals(Jq){return Jq.origin.equals(this.origin)&&Jq.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Kq{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(Lq,Mq,Nq,Oq,Pq,Qq,Rq,Sq,Tq,Uq,Vq,Wq,Xq,Yq,Zq,$q){const _q=this.elements;return _q[0]=Lq,_q[4]=Mq,_q[8]=Nq,_q[12]=Oq,_q[1]=Pq,_q[5]=Qq,_q[9]=Rq,_q[13]=Sq,_q[2]=Tq,_q[6]=Uq,_q[10]=Vq,_q[14]=Wq,_q[3]=Xq,_q[7]=Yq,_q[11]=Zq,_q[15]=$q,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Kq().fromArray(this.elements)}copy(ar){const br=this.elements,cr=ar.elements;return br[0]=cr[0],br[1]=cr[1],br[2]=cr[2],br[3]=cr[3],br[4]=cr[4],br[5]=cr[5],br[6]=cr[6],br[7]=cr[7],br[8]=cr[8],br[9]=cr[9],br[10]=cr[10],br[11]=cr[11],br[12]=cr[12],br[13]=cr[13],br[14]=cr[14],br[15]=cr[15],this}copyPosition(dr){const er=this.elements,fr=dr.elements;return er[12]=fr[12],er[13]=fr[13],er[14]=fr[14],this}setFromMatrix3(gr){const hr=gr.elements;return this.set(hr[0],hr[3],hr[6],0,hr[1],hr[4],hr[7],0,hr[2],hr[5],hr[8],0,0,0,0,1),this}extractBasis(ir,jr,kr){return ir.setFromMatrixColumn(this,0),jr.setFromMatrixColumn(this,1),kr.setFromMatrixColumn(this,2),this}makeBasis(lr,mr,nr){return this.set(lr.x,mr.x,nr.x,0,lr.y,mr.y,nr.y,0,lr.z,mr.z,nr.z,0,0,0,0,1),this}extractRotation(or){const pr=this.elements,qr=or.elements,rr=1/Hv.setFromMatrixColumn(or,0).length(),sr=1/Hv.setFromMatrixColumn(or,1).length(),tr=1/Hv.setFromMatrixColumn(or,2).length();return pr[0]=qr[0]*rr,pr[1]=qr[1]*rr,pr[2]=qr[2]*rr,pr[3]=0,pr[4]=qr[4]*sr,pr[5]=qr[5]*sr,pr[6]=qr[6]*sr,pr[7]=0,pr[8]=qr[8]*tr,pr[9]=qr[9]*tr,pr[10]=qr[10]*tr,pr[11]=0,pr[12]=0,pr[13]=0,pr[14]=0,pr[15]=1,this}makeRotationFromEuler(ur){ur&&ur.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const vr=this.elements,wr=ur.x,xr=ur.y,yr=ur.z,zr=Math.cos(wr),Ar=Math.sin(wr),Br=Math.cos(xr),Cr=Math.sin(xr),Dr=Math.cos(yr),Er=Math.sin(yr);if("XYZ"===ur.order){const Fr=zr*Dr,Gr=zr*Er,Hr=Ar*Dr,Ir=Ar*Er;vr[0]=Br*Dr,vr[4]=-Br*Er,vr[8]=Cr,vr[1]=Gr+Hr*Cr,vr[5]=Fr-Ir*Cr,vr[9]=-Ar*Br,vr[2]=Ir-Fr*Cr,vr[6]=Hr+Gr*Cr,vr[10]=zr*Br}else if("YXZ"===ur.order){const Jr=Br*Dr,Kr=Br*Er,Lr=Cr*Dr,Mr=Cr*Er;vr[0]=Jr+Mr*Ar,vr[4]=Lr*Ar-Kr,vr[8]=zr*Cr,vr[1]=zr*Er,vr[5]=zr*Dr,vr[9]=-Ar,vr[2]=Kr*Ar-Lr,vr[6]=Mr+Jr*Ar,vr[10]=zr*Br}else if("ZXY"===ur.order){const Nr=Br*Dr,Or=Br*Er,Pr=Cr*Dr,Qr=Cr*Er;vr[0]=Nr-Qr*Ar,vr[4]=-zr*Er,vr[8]=Pr+Or*Ar,vr[1]=Or+Pr*Ar,vr[5]=zr*Dr,vr[9]=Qr-Nr*Ar,vr[2]=-zr*Cr,vr[6]=Ar,vr[10]=zr*Br}else if("ZYX"===ur.order){const Rr=zr*Dr,Sr=zr*Er,Tr=Ar*Dr,Ur=Ar*Er;vr[0]=Br*Dr,vr[4]=Tr*Cr-Sr,vr[8]=Rr*Cr+Ur,vr[1]=Br*Er,vr[5]=Ur*Cr+Rr,vr[9]=Sr*Cr-Tr,vr[2]=-Cr,vr[6]=Ar*Br,vr[10]=zr*Br}else if("YZX"===ur.order){const Vr=zr*Br,Wr=zr*Cr,Xr=Ar*Br,Yr=Ar*Cr;vr[0]=Br*Dr,vr[4]=Yr-Vr*Er,vr[8]=Xr*Er+Wr,vr[1]=Er,vr[5]=zr*Dr,vr[9]=-Ar*Dr,vr[2]=-Cr*Dr,vr[6]=Wr*Er+Xr,vr[10]=Vr-Yr*Er}else if("XZY"===ur.order){const Zr=zr*Br,$r=zr*Cr,_r=Ar*Br,as=Ar*Cr;vr[0]=Br*Dr,vr[4]=-Er,vr[8]=Cr*Dr,vr[1]=Zr*Er+as,vr[5]=zr*Dr,vr[9]=$r*Er-_r,vr[2]=_r*Er-$r,vr[6]=Ar*Dr,vr[10]=as*Er+Zr}return vr[3]=0,vr[7]=0,vr[11]=0,vr[12]=0,vr[13]=0,vr[14]=0,vr[15]=1,this}makeRotationFromQuaternion(bs){return this.compose(Jv,bs,Kv)}lookAt(cs,ds,es){const fs=this.elements;return Nv.subVectors(cs,ds),0===Nv.lengthSq()&&(Nv.z=1),Nv.normalize(),Lv.crossVectors(es,Nv),0===Lv.lengthSq()&&(1===Math.abs(es.z)?Nv.x+=0.0001:Nv.z+=0.0001,Nv.normalize(),Lv.crossVectors(es,Nv)),Lv.normalize(),Mv.crossVectors(Nv,Lv),fs[0]=Lv.x,fs[4]=Mv.x,fs[8]=Nv.x,fs[1]=Lv.y,fs[5]=Mv.y,fs[9]=Nv.y,fs[2]=Lv.z,fs[6]=Mv.z,fs[10]=Nv.z,this}multiply(gs,hs){return void 0!==hs?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(gs,hs)):this.multiplyMatrices(this,gs)}premultiply(is){return this.multiplyMatrices(is,this)}multiplyMatrices(js,ks){const ls=js.elements,ms=ks.elements,ns=this.elements,os=ls[0],ps=ls[4],qs=ls[8],rs=ls[12],ss=ls[1],ts=ls[5],us=ls[9],vs=ls[13],ws=ls[2],xs=ls[6],ys=ls[10],zs=ls[14],As=ls[3],Bs=ls[7],Cs=ls[11],Ds=ls[15],Es=ms[0],Fs=ms[4],Gs=ms[8],Hs=ms[12],Is=ms[1],Js=ms[5],Ks=ms[9],Ls=ms[13],Ms=ms[2],Ns=ms[6],Os=ms[10],Ps=ms[14],Qs=ms[3],Rs=ms[7],Ss=ms[11],Ts=ms[15];return ns[0]=os*Es+ps*Is+qs*Ms+rs*Qs,ns[4]=os*Fs+ps*Js+qs*Ns+rs*Rs,ns[8]=os*Gs+ps*Ks+qs*Os+rs*Ss,ns[12]=os*Hs+ps*Ls+qs*Ps+rs*Ts,ns[1]=ss*Es+ts*Is+us*Ms+vs*Qs,ns[5]=ss*Fs+ts*Js+us*Ns+vs*Rs,ns[9]=ss*Gs+ts*Ks+us*Os+vs*Ss,ns[13]=ss*Hs+ts*Ls+us*Ps+vs*Ts,ns[2]=ws*Es+xs*Is+ys*Ms+zs*Qs,ns[6]=ws*Fs+xs*Js+ys*Ns+zs*Rs,ns[10]=ws*Gs+xs*Ks+ys*Os+zs*Ss,ns[14]=ws*Hs+xs*Ls+ys*Ps+zs*Ts,ns[3]=As*Es+Bs*Is+Cs*Ms+Ds*Qs,ns[7]=As*Fs+Bs*Js+Cs*Ns+Ds*Rs,ns[11]=As*Gs+Bs*Ks+Cs*Os+Ds*Ss,ns[15]=As*Hs+Bs*Ls+Cs*Ps+Ds*Ts,this}multiplyScalar(Us){const Vs=this.elements;return Vs[0]*=Us,Vs[4]*=Us,Vs[8]*=Us,Vs[12]*=Us,Vs[1]*=Us,Vs[5]*=Us,Vs[9]*=Us,Vs[13]*=Us,Vs[2]*=Us,Vs[6]*=Us,Vs[10]*=Us,Vs[14]*=Us,Vs[3]*=Us,Vs[7]*=Us,Vs[11]*=Us,Vs[15]*=Us,this}determinant(){const Ws=this.elements,Xs=Ws[0],Ys=Ws[4],Zs=Ws[8],$s=Ws[12],_s=Ws[1],at=Ws[5],bt=Ws[9],ct=Ws[13],dt=Ws[2],et=Ws[6],ft=Ws[10],gt=Ws[14],ht=Ws[3],it=Ws[7],jt=Ws[11],kt=Ws[15];return ht*(+$s*bt*et-Zs*ct*et-$s*at*ft+Ys*ct*ft+Zs*at*gt-Ys*bt*gt)+it*(+Xs*bt*gt-Xs*ct*ft+$s*_s*ft-Zs*_s*gt+Zs*ct*dt-$s*bt*dt)+jt*(+Xs*ct*et-Xs*at*gt-$s*_s*et+Ys*_s*gt+$s*at*dt-Ys*ct*dt)+kt*(-Zs*at*dt-Xs*bt*et+Xs*at*ft+Zs*_s*et-Ys*_s*ft+Ys*bt*dt)}transpose(){const lt=this.elements;let mt;return mt=lt[1],lt[1]=lt[4],lt[4]=mt,mt=lt[2],lt[2]=lt[8],lt[8]=mt,mt=lt[6],lt[6]=lt[9],lt[9]=mt,mt=lt[3],lt[3]=lt[12],lt[12]=mt,mt=lt[7],lt[7]=lt[13],lt[13]=mt,mt=lt[11],lt[11]=lt[14],lt[14]=mt,this}setPosition(nt,ot,pt){const qt=this.elements;return nt.isVector3?(qt[12]=nt.x,qt[13]=nt.y,qt[14]=nt.z):(qt[12]=nt,qt[13]=ot,qt[14]=pt),this}invert(){const rt=this.elements,st=rt[0],tt=rt[1],ut=rt[2],vt=rt[3],wt=rt[4],xt=rt[5],yt=rt[6],zt=rt[7],At=rt[8],Bt=rt[9],Ct=rt[10],Dt=rt[11],Et=rt[12],Ft=rt[13],Gt=rt[14],Ht=rt[15],It=Bt*Gt*zt-Ft*Ct*zt+Ft*yt*Dt-xt*Gt*Dt-Bt*yt*Ht+xt*Ct*Ht,Jt=Et*Ct*zt-At*Gt*zt-Et*yt*Dt+wt*Gt*Dt+At*yt*Ht-wt*Ct*Ht,Kt=At*Ft*zt-Et*Bt*zt+Et*xt*Dt-wt*Ft*Dt-At*xt*Ht+wt*Bt*Ht,Lt=Et*Bt*yt-At*Ft*yt-Et*xt*Ct+wt*Ft*Ct+At*xt*Gt-wt*Bt*Gt,Mt=st*It+tt*Jt+ut*Kt+vt*Lt;if(0===Mt)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const Nt=1/Mt;return rt[0]=It*Nt,rt[1]=(Ft*Ct*vt-Bt*Gt*vt-Ft*ut*Dt+tt*Gt*Dt+Bt*ut*Ht-tt*Ct*Ht)*Nt,rt[2]=(xt*Gt*vt-Ft*yt*vt+Ft*ut*zt-tt*Gt*zt-xt*ut*Ht+tt*yt*Ht)*Nt,rt[3]=(Bt*yt*vt-xt*Ct*vt-Bt*ut*zt+tt*Ct*zt+xt*ut*Dt-tt*yt*Dt)*Nt,rt[4]=Jt*Nt,rt[5]=(At*Gt*vt-Et*Ct*vt+Et*ut*Dt-st*Gt*Dt-At*ut*Ht+st*Ct*Ht)*Nt,rt[6]=(Et*yt*vt-wt*Gt*vt-Et*ut*zt+st*Gt*zt+wt*ut*Ht-st*yt*Ht)*Nt,rt[7]=(wt*Ct*vt-At*yt*vt+At*ut*zt-st*Ct*zt-wt*ut*Dt+st*yt*Dt)*Nt,rt[8]=Kt*Nt,rt[9]=(Et*Bt*vt-At*Ft*vt-Et*tt*Dt+st*Ft*Dt+At*tt*Ht-st*Bt*Ht)*Nt,rt[10]=(wt*Ft*vt-Et*xt*vt+Et*tt*zt-st*Ft*zt-wt*tt*Ht+st*xt*Ht)*Nt,rt[11]=(At*xt*vt-wt*Bt*vt-At*tt*zt+st*Bt*zt+wt*tt*Dt-st*xt*Dt)*Nt,rt[12]=Lt*Nt,rt[13]=(At*Ft*ut-Et*Bt*ut+Et*tt*Ct-st*Ft*Ct-At*tt*Gt+st*Bt*Gt)*Nt,rt[14]=(Et*xt*ut-wt*Ft*ut-Et*tt*yt+st*Ft*yt+wt*tt*Gt-st*xt*Gt)*Nt,rt[15]=(wt*Bt*ut-At*xt*ut+At*tt*yt-st*Bt*yt-wt*tt*Ct+st*xt*Ct)*Nt,this}scale(Ot){const Pt=this.elements,Qt=Ot.x,Rt=Ot.y,St=Ot.z;return Pt[0]*=Qt,Pt[4]*=Rt,Pt[8]*=St,Pt[1]*=Qt,Pt[5]*=Rt,Pt[9]*=St,Pt[2]*=Qt,Pt[6]*=Rt,Pt[10]*=St,Pt[3]*=Qt,Pt[7]*=Rt,Pt[11]*=St,this}getMaxScaleOnAxis(){const Tt=this.elements,Ut=Tt[0]*Tt[0]+Tt[1]*Tt[1]+Tt[2]*Tt[2],Vt=Tt[4]*Tt[4]+Tt[5]*Tt[5]+Tt[6]*Tt[6],Wt=Tt[8]*Tt[8]+Tt[9]*Tt[9]+Tt[10]*Tt[10];return Math.sqrt(Math.max(Ut,Vt,Wt))}makeTranslation(Xt,Yt,Zt){return this.set(1,0,0,Xt,0,1,0,Yt,0,0,1,Zt,0,0,0,1),this}makeRotationX($t){const _t=Math.cos($t),au=Math.sin($t);return this.set(1,0,0,0,0,_t,-au,0,0,au,_t,0,0,0,0,1),this}makeRotationY(bu){const cu=Math.cos(bu),du=Math.sin(bu);return this.set(cu,0,du,0,0,1,0,0,-du,0,cu,0,0,0,0,1),this}makeRotationZ(eu){const fu=Math.cos(eu),gu=Math.sin(eu);return this.set(fu,-gu,0,0,gu,fu,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(hu,iu){const ju=Math.cos(iu),ku=Math.sin(iu),lu=1-ju,mu=hu.x,nu=hu.y,ou=hu.z,pu=lu*mu,qu=lu*nu;return this.set(pu*mu+ju,pu*nu-ku*ou,pu*ou+ku*nu,0,pu*nu+ku*ou,qu*nu+ju,qu*ou-ku*mu,0,pu*ou-ku*nu,qu*ou+ku*mu,lu*ou*ou+ju,0,0,0,0,1),this}makeScale(ru,su,tu){return this.set(ru,0,0,0,0,su,0,0,0,0,tu,0,0,0,0,1),this}makeShear(uu,vu,wu,xu,yu,zu){return this.set(1,wu,yu,0,uu,1,zu,0,vu,xu,1,0,0,0,0,1),this}compose(Au,Bu,Cu){const Du=this.elements,Eu=Bu._x,Fu=Bu._y,Gu=Bu._z,Hu=Bu._w,Iu=Eu+Eu,Ju=Fu+Fu,Ku=Gu+Gu,Lu=Eu*Iu,Mu=Eu*Ju,Nu=Eu*Ku,Ou=Fu*Ju,Pu=Fu*Ku,Qu=Gu*Ku,Ru=Hu*Iu,Su=Hu*Ju,Tu=Hu*Ku,Uu=Cu.x,Vu=Cu.y,Wu=Cu.z;return Du[0]=(1-(Ou+Qu))*Uu,Du[1]=(Mu+Tu)*Uu,Du[2]=(Nu-Su)*Uu,Du[3]=0,Du[4]=(Mu-Tu)*Vu,Du[5]=(1-(Lu+Qu))*Vu,Du[6]=(Pu+Ru)*Vu,Du[7]=0,Du[8]=(Nu+Su)*Wu,Du[9]=(Pu-Ru)*Wu,Du[10]=(1-(Lu+Ou))*Wu,Du[11]=0,Du[12]=Au.x,Du[13]=Au.y,Du[14]=Au.z,Du[15]=1,this}decompose(Xu,Yu,Zu){const $u=this.elements;let _u=Hv.set($u[0],$u[1],$u[2]).length();const av=Hv.set($u[4],$u[5],$u[6]).length(),bv=Hv.set($u[8],$u[9],$u[10]).length(),cv=this.determinant();cv<0&&(_u=-_u),Xu.x=$u[12],Xu.y=$u[13],Xu.z=$u[14],Iv.copy(this);const dv=1/_u,ev=1/av,fv=1/bv;return Iv.elements[0]*=dv,Iv.elements[1]*=dv,Iv.elements[2]*=dv,Iv.elements[4]*=ev,Iv.elements[5]*=ev,Iv.elements[6]*=ev,Iv.elements[8]*=fv,Iv.elements[9]*=fv,Iv.elements[10]*=fv,Yu.setFromRotationMatrix(Iv),Zu.x=_u,Zu.y=av,Zu.z=bv,this}makePerspective(gv,hv,iv,jv,kv,lv){void 0===lv&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const mv=this.elements;return mv[0]=2*kv/(hv-gv),mv[4]=0,mv[8]=(hv+gv)/(hv-gv),mv[12]=0,mv[1]=0,mv[5]=2*kv/(iv-jv),mv[9]=(iv+jv)/(iv-jv),mv[13]=0,mv[2]=0,mv[6]=0,mv[10]=-(lv+kv)/(lv-kv),mv[14]=-2*lv*kv/(lv-kv),mv[3]=0,mv[7]=0,mv[11]=-1,mv[15]=0,this}makeOrthographic(nv,ov,pv,qv,rv,sv){const tv=this.elements,uv=1/(ov-nv),vv=1/(pv-qv),wv=1/(sv-rv);return tv[0]=2*uv,tv[4]=0,tv[8]=0,tv[12]=-((ov+nv)*uv),tv[1]=0,tv[5]=2*vv,tv[9]=0,tv[13]=-((pv+qv)*vv),tv[2]=0,tv[6]=0,tv[10]=-2*wv,tv[14]=-((sv+rv)*wv),tv[3]=0,tv[7]=0,tv[11]=0,tv[15]=1,this}equals(xv){const yv=this.elements,zv=xv.elements;for(let Av=0;Av<16;Av++)if(yv[Av]!==zv[Av])return!1;return!0}fromArray(Bv,Cv=0){for(let Dv=0;Dv<16;Dv++)this.elements[Dv]=Bv[Dv+Cv];return this}toArray(Ev=[],Fv=0){const Gv=this.elements;return Ev[Fv]=Gv[0],Ev[Fv+1]=Gv[1],Ev[Fv+2]=Gv[2],Ev[Fv+3]=Gv[3],Ev[Fv+4]=Gv[4],Ev[Fv+5]=Gv[5],Ev[Fv+6]=Gv[6],Ev[Fv+7]=Gv[7],Ev[Fv+8]=Gv[8],Ev[Fv+9]=Gv[9],Ev[Fv+10]=Gv[10],Ev[Fv+11]=Gv[11],Ev[Fv+12]=Gv[12],Ev[Fv+13]=Gv[13],Ev[Fv+14]=Gv[14],Ev[Fv+15]=Gv[15],Ev}}Kq.prototype.isMatrix4=!0;const Hv=new qk(),Iv=new Kq(),Jv=new qk(0,0,0),Kv=new qk(1,1,1),Lv=new qk(),Mv=new qk(),Nv=new qk(),Ov=new Kq(),Pv=new Lh();class Qv{constructor(Rv=0,Sv=0,Tv=0,Uv=Qv.DefaultOrder){this._x=Rv,this._y=Sv,this._z=Tv,this._order=Uv}get x(){return this._x}set x(Vv){this._x=Vv,this._onChangeCallback()}get y(){return this._y}set y(Wv){this._y=Wv,this._onChangeCallback()}get z(){return this._z}set z(Xv){this._z=Xv,this._onChangeCallback()}get order(){return this._order}set order(Yv){this._order=Yv,this._onChangeCallback()}set(Zv,$v,_v,aw=this._order){return this._x=Zv,this._y=$v,this._z=_v,this._order=aw,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(bw){return this._x=bw._x,this._y=bw._y,this._z=bw._z,this._order=bw._order,this._onChangeCallback(),this}setFromRotationMatrix(cw,dw=this._order,ew=!0){const fw=cw.elements,gw=fw[0],hw=fw[4],iw=fw[8],jw=fw[1],kw=fw[5],lw=fw[9],mw=fw[2],nw=fw[6],ow=fw[10];switch(dw){case"XYZ":this._y=Math.asin($(iw,-1,1)),0.9999999>Math.abs(iw)?(this._x=Math.atan2(-lw,ow),this._z=Math.atan2(-hw,gw)):(this._x=Math.atan2(nw,kw),this._z=0);break;case"YXZ":this._x=Math.asin(-$(lw,-1,1)),0.9999999>Math.abs(lw)?(this._y=Math.atan2(iw,ow),this._z=Math.atan2(jw,kw)):(this._y=Math.atan2(-mw,gw),this._z=0);break;case"ZXY":this._x=Math.asin($(nw,-1,1)),0.9999999>Math.abs(nw)?(this._y=Math.atan2(-mw,ow),this._z=Math.atan2(-hw,kw)):(this._y=0,this._z=Math.atan2(jw,gw));break;case"ZYX":this._y=Math.asin(-$(mw,-1,1)),0.9999999>Math.abs(mw)?(this._x=Math.atan2(nw,ow),this._z=Math.atan2(jw,gw)):(this._x=0,this._z=Math.atan2(-hw,kw));break;case"YZX":this._z=Math.asin($(jw,-1,1)),0.9999999>Math.abs(jw)?(this._x=Math.atan2(-lw,kw),this._y=Math.atan2(-mw,gw)):(this._x=0,this._y=Math.atan2(iw,ow));break;case"XZY":this._z=Math.asin(-$(hw,-1,1)),0.9999999>Math.abs(hw)?(this._x=Math.atan2(nw,kw),this._y=Math.atan2(iw,gw)):(this._x=Math.atan2(-lw,ow),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+dw)}return this._order=dw,!0===ew&&this._onChangeCallback(),this}setFromQuaternion(pw,qw,rw){return Ov.makeRotationFromQuaternion(pw),this.setFromRotationMatrix(Ov,qw,rw)}setFromVector3(sw,tw=this._order){return this.set(sw.x,sw.y,sw.z,tw)}reorder(uw){return Pv.setFromEuler(this),this.setFromQuaternion(Pv,uw)}equals(vw){return vw._x===this._x&&vw._y===this._y&&vw._z===this._z&&vw._order===this._order}fromArray(ww){return this._x=ww[0],this._y=ww[1],this._z=ww[2],void 0!==ww[3]&&(this._order=ww[3]),this._onChangeCallback(),this}toArray(xw=[],yw=0){return xw[yw]=this._x,xw[yw+1]=this._y,xw[yw+2]=this._z,xw[yw+3]=this._order,xw}toVector3(zw){return zw?zw.set(this._x,this._y,this._z):new qk(this._x,this._y,this._z)}_onChange(Aw){return this._onChangeCallback=Aw,this}_onChangeCallback(){}}Qv.prototype.isEuler=!0,Qv.DefaultOrder="XYZ",Qv.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Bw{constructor(){this.mask=1}set(Cw){this.mask=(1<<Cw|0)>>>0}enable(Dw){this.mask|=1<<Dw|0}enableAll(){this.mask=-1}toggle(Ew){this.mask^=1<<Ew|0}disable(Fw){this.mask&=~(1<<Fw|0)}disableAll(){this.mask=0}test(Gw){return(this.mask&Gw.mask)!=0}isEnabled(Hw){return(this.mask&(1<<Hw|0))!=0}}let Iw=0;const Jw=new qk(),Kw=new Lh(),Lw=new Kq(),Mw=new qk(),Nw=new qk(),Ow=new qk(),Pw=new Lh(),Qw=new qk(1,0,0),Rw=new qk(0,1,0),Sw=new qk(0,0,1),Tw={type:"added"},Uw={type:"removed"};class Vw extends C{constructor(){super(),Object.defineProperty(this,"id",{value:Iw++}),this.uuid=Z(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Vw.DefaultUp.clone();const Ww=new qk(),Xw=new Qv(),Yw=new Lh(),Zw=new qk(1,1,1);Xw._onChange(function(){Yw.setFromEuler(Xw,!1)}),Yw._onChange(function(){Xw.setFromQuaternion(Yw,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:Ww},rotation:{configurable:!0,enumerable:!0,value:Xw},quaternion:{configurable:!0,enumerable:!0,value:Yw},scale:{configurable:!0,enumerable:!0,value:Zw},modelViewMatrix:{value:new Kq()},normalMatrix:{value:new vb()}}),this.matrix=new Kq(),this.matrixWorld=new Kq(),this.matrixAutoUpdate=Vw.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Bw(),this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4($w){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply($w),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(_w){return this.quaternion.premultiply(_w),this}setRotationFromAxisAngle(ax,bx){this.quaternion.setFromAxisAngle(ax,bx)}setRotationFromEuler(cx){this.quaternion.setFromEuler(cx,!0)}setRotationFromMatrix(dx){this.quaternion.setFromRotationMatrix(dx)}setRotationFromQuaternion(ex){this.quaternion.copy(ex)}rotateOnAxis(fx,gx){return Kw.setFromAxisAngle(fx,gx),this.quaternion.multiply(Kw),this}rotateOnWorldAxis(hx,ix){return Kw.setFromAxisAngle(hx,ix),this.quaternion.premultiply(Kw),this}rotateX(jx){return this.rotateOnAxis(Qw,jx)}rotateY(kx){return this.rotateOnAxis(Rw,kx)}rotateZ(lx){return this.rotateOnAxis(Sw,lx)}translateOnAxis(mx,nx){return Jw.copy(mx).applyQuaternion(this.quaternion),this.position.add(Jw.multiplyScalar(nx)),this}translateX(ox){return this.translateOnAxis(Qw,ox)}translateY(px){return this.translateOnAxis(Rw,px)}translateZ(qx){return this.translateOnAxis(Sw,qx)}localToWorld(rx){return rx.applyMatrix4(this.matrixWorld)}worldToLocal(sx){return sx.applyMatrix4(Lw.copy(this.matrixWorld).invert())}lookAt(tx,ux,vx){tx.isVector3?Mw.copy(tx):Mw.set(tx,ux,vx);const wx=this.parent;this.updateWorldMatrix(!0,!1),Nw.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Lw.lookAt(Nw,Mw,this.up):Lw.lookAt(Mw,Nw,this.up),this.quaternion.setFromRotationMatrix(Lw),wx&&(Lw.extractRotation(wx.matrixWorld),Kw.setFromRotationMatrix(Lw),this.quaternion.premultiply(Kw.invert()))}add(xx){if(arguments.length>1){for(let yx=0;yx<arguments.length;yx++)this.add(arguments[yx]);return this}return xx===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",xx),this):(xx&&xx.isObject3D?(null!==xx.parent&&xx.parent.remove(xx),xx.parent=this,this.children.push(xx),xx.dispatchEvent(Tw)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",xx),this)}remove(zx){if(arguments.length>1){for(let Ax=0;Ax<arguments.length;Ax++)this.remove(arguments[Ax]);return this}const Bx=this.children.indexOf(zx);return -1!==Bx&&(zx.parent=null,this.children.splice(Bx,1),zx.dispatchEvent(Uw)),this}removeFromParent(){const Cx=this.parent;return null!==Cx&&Cx.remove(this),this}clear(){for(let Dx=0;Dx<this.children.length;Dx++){const Ex=this.children[Dx];Ex.parent=null,Ex.dispatchEvent(Uw)}return this.children.length=0,this}attach(Fx){return this.updateWorldMatrix(!0,!1),Lw.copy(this.matrixWorld).invert(),null!==Fx.parent&&(Fx.parent.updateWorldMatrix(!0,!1),Lw.multiply(Fx.parent.matrixWorld)),Fx.applyMatrix4(Lw),this.add(Fx),Fx.updateWorldMatrix(!1,!0),this}getObjectById(Gx){return this.getObjectByProperty("id",Gx)}getObjectByName(Hx){return this.getObjectByProperty("name",Hx)}getObjectByProperty(Ix,Jx){if(this[Ix]===Jx)return this;for(let Kx=0,Lx=this.children.length;Kx<Lx;Kx++){const Mx=this.children[Kx],Nx=Mx.getObjectByProperty(Ix,Jx);if(void 0!==Nx)return Nx}}getWorldPosition(Ox){return this.updateWorldMatrix(!0,!1),Ox.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(Px){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Nw,Px,Ow),Px}getWorldScale(Qx){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Nw,Pw,Qx),Qx}getWorldDirection(Rx){this.updateWorldMatrix(!0,!1);const Sx=this.matrixWorld.elements;return Rx.set(Sx[8],Sx[9],Sx[10]).normalize()}raycast(){}traverse(Tx){Tx(this);const Ux=this.children;for(let Vx=0,Wx=Ux.length;Vx<Wx;Vx++)Ux[Vx].traverse(Tx)}traverseVisible(Xx){if(!1===this.visible)return;Xx(this);const Yx=this.children;for(let Zx=0,$x=Yx.length;Zx<$x;Zx++)Yx[Zx].traverseVisible(Xx)}traverseAncestors(_x){const ay=this.parent;null!==ay&&(_x(ay),ay.traverseAncestors(_x))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(by){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||by)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,by=!0);const cy=this.children;for(let dy=0,ey=cy.length;dy<ey;dy++)cy[dy].updateMatrixWorld(by)}updateWorldMatrix(fy,gy){const hy=this.parent;if(!0===fy&&null!==hy&&hy.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===gy){const iy=this.children;for(let jy=0,ky=iy.length;jy<ky;jy++)iy[jy].updateWorldMatrix(!1,!0)}}toJSON(ly){const my=void 0===ly||"string"==typeof ly,ny={};my&&(ly={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},ny.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const oy={};function py(a,b){return void 0===a[b.uuid]&&(a[b.uuid]=b.toJSON(ly)),b.uuid}if(oy.uuid=this.uuid,oy.type=this.type,""!==this.name&&(oy.name=this.name),!0===this.castShadow&&(oy.castShadow=!0),!0===this.receiveShadow&&(oy.receiveShadow=!0),!1===this.visible&&(oy.visible=!1),!1===this.frustumCulled&&(oy.frustumCulled=!1),0!==this.renderOrder&&(oy.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(oy.userData=this.userData),oy.layers=this.layers.mask,oy.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(oy.matrixAutoUpdate=!1),this.isInstancedMesh&&(oy.type="InstancedMesh",oy.count=this.count,oy.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(oy.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?oy.background=this.background.toJSON():this.background.isTexture&&(oy.background=this.background.toJSON(ly).uuid)),this.environment&&this.environment.isTexture&&(oy.environment=this.environment.toJSON(ly).uuid);else if(this.isMesh||this.isLine||this.isPoints){oy.geometry=py(ly.geometries,this.geometry);const qy=this.geometry.parameters;if(void 0!==qy&& void 0!==qy.shapes){const ry=qy.shapes;if(Array.isArray(ry))for(let sy=0,ty=ry.length;sy<ty;sy++){const uy=ry[sy];py(ly.shapes,uy)}else py(ly.shapes,ry)}}if(this.isSkinnedMesh&&(oy.bindMode=this.bindMode,oy.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(py(ly.skeletons,this.skeleton),oy.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const vy=[];for(let wy=0,xy=this.material.length;wy<xy;wy++)vy.push(py(ly.materials,this.material[wy]));oy.material=vy}else oy.material=py(ly.materials,this.material);if(this.children.length>0){oy.children=[];for(let yy=0;yy<this.children.length;yy++)oy.children.push(this.children[yy].toJSON(ly).object)}if(this.animations.length>0){oy.animations=[];for(let zy=0;zy<this.animations.length;zy++){const Ay=this.animations[zy];oy.animations.push(py(ly.animations,Ay))}}if(my){const By=Iy(ly.geometries),Cy=Iy(ly.materials),Dy=Iy(ly.textures),Ey=Iy(ly.images),Fy=Iy(ly.shapes),Gy=Iy(ly.skeletons),Hy=Iy(ly.animations);By.length>0&&(ny.geometries=By),Cy.length>0&&(ny.materials=Cy),Dy.length>0&&(ny.textures=Dy),Ey.length>0&&(ny.images=Ey),Fy.length>0&&(ny.shapes=Fy),Gy.length>0&&(ny.skeletons=Gy),Hy.length>0&&(ny.animations=Hy)}return ny.object=oy,ny;function Iy(a){const b=[];for(const c in a){const d=a[c];delete d.metadata,b.push(d)}return b}}clone(Jy){return new this.constructor().copy(this,Jy)}copy(Ky,Ly=!0){if(this.name=Ky.name,this.up.copy(Ky.up),this.position.copy(Ky.position),this.rotation.order=Ky.rotation.order,this.quaternion.copy(Ky.quaternion),this.scale.copy(Ky.scale),this.matrix.copy(Ky.matrix),this.matrixWorld.copy(Ky.matrixWorld),this.matrixAutoUpdate=Ky.matrixAutoUpdate,this.matrixWorldNeedsUpdate=Ky.matrixWorldNeedsUpdate,this.layers.mask=Ky.layers.mask,this.visible=Ky.visible,this.castShadow=Ky.castShadow,this.receiveShadow=Ky.receiveShadow,this.frustumCulled=Ky.frustumCulled,this.renderOrder=Ky.renderOrder,this.userData=JSON.parse(JSON.stringify(Ky.userData)),!0===Ly)for(let My=0;My<Ky.children.length;My++){const Ny=Ky.children[My];this.add(Ny.clone())}return this}}Vw.DefaultUp=new qk(0,1,0),Vw.DefaultMatrixAutoUpdate=!0,Vw.prototype.isObject3D=!0;const Oy=new qk(),Py=new qk(),Qy=new qk(),Ry=new qk(),Sy=new qk(),Ty=new qk(),Uy=new qk(),Vy=new qk(),Wy=new qk(),Xy=new qk();class Yy{constructor(Zy=new qk(),$y=new qk(),_y=new qk()){this.a=Zy,this.b=$y,this.c=_y}static getNormal(az,bz,cz,dz){dz.subVectors(cz,bz),Oy.subVectors(az,bz),dz.cross(Oy);const ez=dz.lengthSq();return ez>0?dz.multiplyScalar(1/Math.sqrt(ez)):dz.set(0,0,0)}static getBarycoord(fz,gz,hz,iz,jz){Oy.subVectors(iz,gz),Py.subVectors(hz,gz),Qy.subVectors(fz,gz);const kz=Oy.dot(Oy),lz=Oy.dot(Py),mz=Oy.dot(Qy),nz=Py.dot(Py),oz=Py.dot(Qy),pz=kz*nz-lz*lz;if(0===pz)return jz.set(-2,-1,-1);const qz=1/pz,rz=(nz*mz-lz*oz)*qz,sz=(kz*oz-lz*mz)*qz;return jz.set(1-rz-sz,sz,rz)}static containsPoint(tz,uz,vz,wz){return this.getBarycoord(tz,uz,vz,wz,Ry),Ry.x>=0&&Ry.y>=0&&Ry.x+Ry.y<=1}static getUV(xz,yz,zz,Az,Bz,Cz,Dz,Ez){return this.getBarycoord(xz,yz,zz,Az,Ry),Ez.set(0,0),Ez.addScaledVector(Bz,Ry.x),Ez.addScaledVector(Cz,Ry.y),Ez.addScaledVector(Dz,Ry.z),Ez}static isFrontFacing(Fz,Gz,Hz,Iz){return Oy.subVectors(Hz,Gz),Py.subVectors(Fz,Gz),0>Oy.cross(Py).dot(Iz)}set(Jz,Kz,Lz){return this.a.copy(Jz),this.b.copy(Kz),this.c.copy(Lz),this}setFromPointsAndIndices(Mz,Nz,Oz,Pz){return this.a.copy(Mz[Nz]),this.b.copy(Mz[Oz]),this.c.copy(Mz[Pz]),this}setFromAttributeAndIndices(Qz,Rz,Sz,Tz){return this.a.fromBufferAttribute(Qz,Rz),this.b.fromBufferAttribute(Qz,Sz),this.c.fromBufferAttribute(Qz,Tz),this}clone(){return new this.constructor().copy(this)}copy(Uz){return this.a.copy(Uz.a),this.b.copy(Uz.b),this.c.copy(Uz.c),this}getArea(){return Oy.subVectors(this.c,this.b),Py.subVectors(this.a,this.b),0.5*Oy.cross(Py).length()}getMidpoint(Vz){return Vz.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(Wz){return Yy.getNormal(this.a,this.b,this.c,Wz)}getPlane(Xz){return Xz.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(Yz,Zz){return Yy.getBarycoord(Yz,this.a,this.b,this.c,Zz)}getUV($z,_z,aA,bA,cA){return Yy.getUV($z,this.a,this.b,this.c,_z,aA,bA,cA)}containsPoint(dA){return Yy.containsPoint(dA,this.a,this.b,this.c)}isFrontFacing(eA){return Yy.isFrontFacing(this.a,this.b,this.c,eA)}intersectsBox(fA){return fA.intersectsTriangle(this)}closestPointToPoint(gA,hA){const iA=this.a,jA=this.b,kA=this.c;let lA,mA;Sy.subVectors(jA,iA),Ty.subVectors(kA,iA),Vy.subVectors(gA,iA);const nA=Sy.dot(Vy),oA=Ty.dot(Vy);if(nA<=0&&oA<=0)return hA.copy(iA);Wy.subVectors(gA,jA);const pA=Sy.dot(Wy),qA=Ty.dot(Wy);if(pA>=0&&qA<=pA)return hA.copy(jA);const rA=nA*qA-pA*oA;if(rA<=0&&nA>=0&&pA<=0)return lA=nA/(nA-pA),hA.copy(iA).addScaledVector(Sy,lA);Xy.subVectors(gA,kA);const sA=Sy.dot(Xy),tA=Ty.dot(Xy);if(tA>=0&&sA<=tA)return hA.copy(kA);const uA=sA*oA-nA*tA;if(uA<=0&&oA>=0&&tA<=0)return mA=oA/(oA-tA),hA.copy(iA).addScaledVector(Ty,mA);const vA=pA*tA-sA*qA;if(vA<=0&&qA-pA>=0&&sA-tA>=0)return Uy.subVectors(kA,jA),mA=(qA-pA)/(qA-pA+(sA-tA)),hA.copy(jA).addScaledVector(Uy,mA);const wA=1/(vA+uA+rA);return lA=uA*wA,mA=rA*wA,hA.copy(iA).addScaledVector(Sy,lA).addScaledVector(Ty,mA)}equals(xA){return xA.a.equals(this.a)&&xA.b.equals(this.b)&&xA.c.equals(this.c)}}let yA=0;class zA extends C{constructor(){super(),Object.defineProperty(this,"id",{value:yA++}),this.uuid=Z(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=g,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=k,this.blendDst=l,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(AA){this._alphaTest>0!=AA>0&&this.version++,this._alphaTest=AA}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(BA){if(void 0!==BA)for(const CA in BA){const DA=BA[CA];if(void 0===DA){console.warn("THREE.Material: '"+CA+"' parameter is undefined.");continue}if("shading"===CA){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===DA;continue}const EA=this[CA];if(void 0===EA){console.warn("THREE."+this.type+": '"+CA+"' is not a property of this material.");continue}EA&&EA.isColor?EA.set(DA):EA&&EA.isVector3&&DA&&DA.isVector3?EA.copy(DA):this[CA]=DA}}toJSON(FA){const GA=void 0===FA||"string"==typeof FA;GA&&(FA={textures:{},images:{}});const HA={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function IA(a){const b=[];for(const c in a){const d=a[c];delete d.metadata,b.push(d)}return b}if(HA.uuid=this.uuid,HA.type=this.type,""!==this.name&&(HA.name=this.name),this.color&&this.color.isColor&&(HA.color=this.color.getHex()),void 0!==this.roughness&&(HA.roughness=this.roughness),void 0!==this.metalness&&(HA.metalness=this.metalness),void 0!==this.sheen&&(HA.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(HA.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(HA.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(HA.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(HA.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(HA.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(HA.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(HA.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(HA.shininess=this.shininess),void 0!==this.clearcoat&&(HA.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(HA.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(HA.clearcoatMap=this.clearcoatMap.toJSON(FA).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(HA.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(FA).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(HA.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(FA).uuid,HA.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(HA.map=this.map.toJSON(FA).uuid),this.matcap&&this.matcap.isTexture&&(HA.matcap=this.matcap.toJSON(FA).uuid),this.alphaMap&&this.alphaMap.isTexture&&(HA.alphaMap=this.alphaMap.toJSON(FA).uuid),this.lightMap&&this.lightMap.isTexture&&(HA.lightMap=this.lightMap.toJSON(FA).uuid,HA.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(HA.aoMap=this.aoMap.toJSON(FA).uuid,HA.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(HA.bumpMap=this.bumpMap.toJSON(FA).uuid,HA.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(HA.normalMap=this.normalMap.toJSON(FA).uuid,HA.normalMapType=this.normalMapType,HA.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(HA.displacementMap=this.displacementMap.toJSON(FA).uuid,HA.displacementScale=this.displacementScale,HA.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(HA.roughnessMap=this.roughnessMap.toJSON(FA).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(HA.metalnessMap=this.metalnessMap.toJSON(FA).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(HA.emissiveMap=this.emissiveMap.toJSON(FA).uuid),this.specularMap&&this.specularMap.isTexture&&(HA.specularMap=this.specularMap.toJSON(FA).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(HA.specularIntensityMap=this.specularIntensityMap.toJSON(FA).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(HA.specularColorMap=this.specularColorMap.toJSON(FA).uuid),this.envMap&&this.envMap.isTexture&&(HA.envMap=this.envMap.toJSON(FA).uuid,void 0!==this.combine&&(HA.combine=this.combine)),void 0!==this.envMapIntensity&&(HA.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(HA.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(HA.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(HA.gradientMap=this.gradientMap.toJSON(FA).uuid),void 0!==this.transmission&&(HA.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(HA.transmissionMap=this.transmissionMap.toJSON(FA).uuid),void 0!==this.thickness&&(HA.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(HA.thicknessMap=this.thicknessMap.toJSON(FA).uuid),void 0!==this.attenuationDistance&&(HA.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(HA.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(HA.size=this.size),null!==this.shadowSide&&(HA.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(HA.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(HA.blending=this.blending),this.side!==g&&(HA.side=this.side),this.vertexColors&&(HA.vertexColors=!0),this.opacity<1&&(HA.opacity=this.opacity),!0===this.transparent&&(HA.transparent=this.transparent),HA.depthFunc=this.depthFunc,HA.depthTest=this.depthTest,HA.depthWrite=this.depthWrite,HA.colorWrite=this.colorWrite,HA.stencilWrite=this.stencilWrite,HA.stencilWriteMask=this.stencilWriteMask,HA.stencilFunc=this.stencilFunc,HA.stencilRef=this.stencilRef,HA.stencilFuncMask=this.stencilFuncMask,HA.stencilFail=this.stencilFail,HA.stencilZFail=this.stencilZFail,HA.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(HA.rotation=this.rotation),!0===this.polygonOffset&&(HA.polygonOffset=!0),0!==this.polygonOffsetFactor&&(HA.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(HA.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(HA.linewidth=this.linewidth),void 0!==this.dashSize&&(HA.dashSize=this.dashSize),void 0!==this.gapSize&&(HA.gapSize=this.gapSize),void 0!==this.scale&&(HA.scale=this.scale),!0===this.dithering&&(HA.dithering=!0),this.alphaTest>0&&(HA.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(HA.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(HA.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(HA.wireframe=this.wireframe),this.wireframeLinewidth>1&&(HA.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(HA.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(HA.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(HA.flatShading=this.flatShading),!1===this.visible&&(HA.visible=!1),!1===this.toneMapped&&(HA.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(HA.userData=this.userData),GA){const JA=IA(FA.textures),KA=IA(FA.images);JA.length>0&&(HA.textures=JA),KA.length>0&&(HA.images=KA)}return HA}clone(){return new this.constructor().copy(this)}copy(LA){this.name=LA.name,this.fog=LA.fog,this.blending=LA.blending,this.side=LA.side,this.vertexColors=LA.vertexColors,this.opacity=LA.opacity,this.transparent=LA.transparent,this.blendSrc=LA.blendSrc,this.blendDst=LA.blendDst,this.blendEquation=LA.blendEquation,this.blendSrcAlpha=LA.blendSrcAlpha,this.blendDstAlpha=LA.blendDstAlpha,this.blendEquationAlpha=LA.blendEquationAlpha,this.depthFunc=LA.depthFunc,this.depthTest=LA.depthTest,this.depthWrite=LA.depthWrite,this.stencilWriteMask=LA.stencilWriteMask,this.stencilFunc=LA.stencilFunc,this.stencilRef=LA.stencilRef,this.stencilFuncMask=LA.stencilFuncMask,this.stencilFail=LA.stencilFail,this.stencilZFail=LA.stencilZFail,this.stencilZPass=LA.stencilZPass,this.stencilWrite=LA.stencilWrite;const MA=LA.clippingPlanes;let NA=null;if(null!==MA){const OA=MA.length;NA=new Array(OA);for(let PA=0;PA!==OA;++PA)NA[PA]=MA[PA].clone()}return this.clippingPlanes=NA,this.clipIntersection=LA.clipIntersection,this.clipShadows=LA.clipShadows,this.shadowSide=LA.shadowSide,this.colorWrite=LA.colorWrite,this.precision=LA.precision,this.polygonOffset=LA.polygonOffset,this.polygonOffsetFactor=LA.polygonOffsetFactor,this.polygonOffsetUnits=LA.polygonOffsetUnits,this.dithering=LA.dithering,this.alphaTest=LA.alphaTest,this.alphaToCoverage=LA.alphaToCoverage,this.premultipliedAlpha=LA.premultipliedAlpha,this.visible=LA.visible,this.toneMapped=LA.toneMapped,this.userData=JSON.parse(JSON.stringify(LA.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(QA){!0===QA&&this.version++}}zA.prototype.isMaterial=!0;class RA extends zA{constructor(SA){super(),this.type="MeshBasicMaterial",this.color=new Gd(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=n,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(SA)}copy(TA){return super.copy(TA),this.color.copy(TA.color),this.map=TA.map,this.lightMap=TA.lightMap,this.lightMapIntensity=TA.lightMapIntensity,this.aoMap=TA.aoMap,this.aoMapIntensity=TA.aoMapIntensity,this.specularMap=TA.specularMap,this.alphaMap=TA.alphaMap,this.envMap=TA.envMap,this.combine=TA.combine,this.reflectivity=TA.reflectivity,this.refractionRatio=TA.refractionRatio,this.wireframe=TA.wireframe,this.wireframeLinewidth=TA.wireframeLinewidth,this.wireframeLinecap=TA.wireframeLinecap,this.wireframeLinejoin=TA.wireframeLinejoin,this}}RA.prototype.isMeshBasicMaterial=!0;const UA=new qk(),VA=new ea();class WA{constructor(XA,YA,ZA){if(Array.isArray(XA))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=XA,this.itemSize=YA,this.count=void 0!==XA?XA.length/YA:0,this.normalized=!0===ZA,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate($A){!0===$A&&this.version++}setUsage(_A){return this.usage=_A,this}copy(aB){return this.name=aB.name,this.array=new aB.array.constructor(aB.array),this.itemSize=aB.itemSize,this.count=aB.count,this.normalized=aB.normalized,this.usage=aB.usage,this}copyAt(bB,cB,dB){bB*=this.itemSize,dB*=cB.itemSize;for(let eB=0,fB=this.itemSize;eB<fB;eB++)this.array[bB+eB]=cB.array[dB+eB];return this}copyArray(gB){return this.array.set(gB),this}copyColorsArray(hB){const iB=this.array;let jB=0;for(let kB=0,lB=hB.length;kB<lB;kB++){let mB=hB[kB];void 0===mB&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",kB),mB=new Gd()),iB[jB++]=mB.r,iB[jB++]=mB.g,iB[jB++]=mB.b}return this}copyVector2sArray(nB){const oB=this.array;let pB=0;for(let qB=0,rB=nB.length;qB<rB;qB++){let sB=nB[qB];void 0===sB&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",qB),sB=new ea()),oB[pB++]=sB.x,oB[pB++]=sB.y}return this}copyVector3sArray(tB){const uB=this.array;let vB=0;for(let wB=0,xB=tB.length;wB<xB;wB++){let yB=tB[wB];void 0===yB&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",wB),yB=new qk()),uB[vB++]=yB.x,uB[vB++]=yB.y,uB[vB++]=yB.z}return this}copyVector4sArray(zB){const AB=this.array;let BB=0;for(let CB=0,DB=zB.length;CB<DB;CB++){let EB=zB[CB];void 0===EB&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",CB),EB=new Df()),AB[BB++]=EB.x,AB[BB++]=EB.y,AB[BB++]=EB.z,AB[BB++]=EB.w}return this}applyMatrix3(FB){if(2===this.itemSize)for(let GB=0,HB=this.count;GB<HB;GB++)VA.fromBufferAttribute(this,GB),VA.applyMatrix3(FB),this.setXY(GB,VA.x,VA.y);else if(3===this.itemSize)for(let IB=0,JB=this.count;IB<JB;IB++)UA.fromBufferAttribute(this,IB),UA.applyMatrix3(FB),this.setXYZ(IB,UA.x,UA.y,UA.z);return this}applyMatrix4(KB){for(let LB=0,MB=this.count;LB<MB;LB++)UA.x=this.getX(LB),UA.y=this.getY(LB),UA.z=this.getZ(LB),UA.applyMatrix4(KB),this.setXYZ(LB,UA.x,UA.y,UA.z);return this}applyNormalMatrix(NB){for(let OB=0,PB=this.count;OB<PB;OB++)UA.x=this.getX(OB),UA.y=this.getY(OB),UA.z=this.getZ(OB),UA.applyNormalMatrix(NB),this.setXYZ(OB,UA.x,UA.y,UA.z);return this}transformDirection(QB){for(let RB=0,SB=this.count;RB<SB;RB++)UA.x=this.getX(RB),UA.y=this.getY(RB),UA.z=this.getZ(RB),UA.transformDirection(QB),this.setXYZ(RB,UA.x,UA.y,UA.z);return this}set(TB,UB=0){return this.array.set(TB,UB),this}getX(VB){return this.array[VB*this.itemSize]}setX(WB,XB){return this.array[WB*this.itemSize]=XB,this}getY(YB){return this.array[YB*this.itemSize+1]}setY(ZB,$B){return this.array[ZB*this.itemSize+1]=$B,this}getZ(_B){return this.array[_B*this.itemSize+2]}setZ(aC,bC){return this.array[aC*this.itemSize+2]=bC,this}getW(cC){return this.array[cC*this.itemSize+3]}setW(dC,eC){return this.array[dC*this.itemSize+3]=eC,this}setXY(fC,gC,hC){return fC*=this.itemSize,this.array[fC+0]=gC,this.array[fC+1]=hC,this}setXYZ(iC,jC,kC,lC){return iC*=this.itemSize,this.array[iC+0]=jC,this.array[iC+1]=kC,this.array[iC+2]=lC,this}setXYZW(mC,nC,oC,pC,qC){return mC*=this.itemSize,this.array[mC+0]=nC,this.array[mC+1]=oC,this.array[mC+2]=pC,this.array[mC+3]=qC,this}onUpload(rC){return this.onUploadCallback=rC,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const sC={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(sC.name=this.name),35044!==this.usage&&(sC.usage=this.usage),(0!==this.updateRange.offset|| -1!==this.updateRange.count)&&(sC.updateRange=this.updateRange),sC}}WA.prototype.isBufferAttribute=!0;class tC extends WA{constructor(uC,vC,wC){super(new Uint16Array(uC),vC,wC)}}class xC extends WA{constructor(yC,zC,AC){super(new Uint32Array(yC),zC,AC)}}(class extends WA{constructor(BC,CC,DC){super(new Uint16Array(BC),CC,DC)}}).prototype.isFloat16BufferAttribute=!0;class EC extends WA{constructor(FC,GC,HC){super(new Float32Array(FC),GC,HC)}}let IC=0;const JC=new Kq(),KC=new Vw(),LC=new qk(),MC=new Wm(),NC=new Wm(),OC=new qk();class PC extends C{constructor(){super(),Object.defineProperty(this,"id",{value:IC++}),this.uuid=Z(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(QC){return Array.isArray(QC)?this.index=new(yd(QC)?xC:tC)(QC,1):this.index=QC,this}getAttribute(RC){return this.attributes[RC]}setAttribute(SC,TC){return this.attributes[SC]=TC,this}deleteAttribute(UC){return delete this.attributes[UC],this}hasAttribute(VC){return void 0!==this.attributes[VC]}addGroup(WC,XC,YC=0){this.groups.push({start:WC,count:XC,materialIndex:YC})}clearGroups(){this.groups=[]}setDrawRange(ZC,$C){this.drawRange.start=ZC,this.drawRange.count=$C}applyMatrix4(_C){const aD=this.attributes.position;void 0!==aD&&(aD.applyMatrix4(_C),aD.needsUpdate=!0);const bD=this.attributes.normal;if(void 0!==bD){const cD=new vb().getNormalMatrix(_C);bD.applyNormalMatrix(cD),bD.needsUpdate=!0}const dD=this.attributes.tangent;return void 0!==dD&&(dD.transformDirection(_C),dD.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(eD){return JC.makeRotationFromQuaternion(eD),this.applyMatrix4(JC),this}rotateX(fD){return JC.makeRotationX(fD),this.applyMatrix4(JC),this}rotateY(gD){return JC.makeRotationY(gD),this.applyMatrix4(JC),this}rotateZ(hD){return JC.makeRotationZ(hD),this.applyMatrix4(JC),this}translate(iD,jD,kD){return JC.makeTranslation(iD,jD,kD),this.applyMatrix4(JC),this}scale(lD,mD,nD){return JC.makeScale(lD,mD,nD),this.applyMatrix4(JC),this}lookAt(oD){return KC.lookAt(oD),KC.updateMatrix(),this.applyMatrix4(KC.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(LC).negate(),this.translate(LC.x,LC.y,LC.z),this}setFromPoints(pD){const qD=[];for(let rD=0,sD=pD.length;rD<sD;rD++){const tD=pD[rD];qD.push(tD.x,tD.y,tD.z||0)}return this.setAttribute("position",new EC(qD,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Wm());const uD=this.attributes.position,vD=this.morphAttributes.position;if(uD&&uD.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".",this),this.boundingBox.set(new qk(-1/0,-1/0,-1/0),new qk(Infinity,Infinity,Infinity));return}if(void 0!==uD){if(this.boundingBox.setFromBufferAttribute(uD),vD)for(let wD=0,xD=vD.length;wD<xD;wD++){const yD=vD[wD];MC.setFromBufferAttribute(yD),this.morphTargetsRelative?(OC.addVectors(this.boundingBox.min,MC.min),this.boundingBox.expandByPoint(OC),OC.addVectors(this.boundingBox.max,MC.max),this.boundingBox.expandByPoint(OC)):(this.boundingBox.expandByPoint(MC.min),this.boundingBox.expandByPoint(MC.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error("THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.",this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Ho());const zD=this.attributes.position,AD=this.morphAttributes.position;if(zD&&zD.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".",this),this.boundingSphere.set(new qk(),1/0);return}if(zD){const BD=this.boundingSphere.center;if(MC.setFromBufferAttribute(zD),AD)for(let CD=0,DD=AD.length;CD<DD;CD++){const ED=AD[CD];NC.setFromBufferAttribute(ED),this.morphTargetsRelative?(OC.addVectors(MC.min,NC.min),MC.expandByPoint(OC),OC.addVectors(MC.max,NC.max),MC.expandByPoint(OC)):(MC.expandByPoint(NC.min),MC.expandByPoint(NC.max))}MC.getCenter(BD);let FD=0;for(let GD=0,HD=zD.count;GD<HD;GD++)OC.fromBufferAttribute(zD,GD),FD=Math.max(FD,BD.distanceToSquared(OC));if(AD)for(let ID=0,JD=AD.length;ID<JD;ID++){const KD=AD[ID],LD=this.morphTargetsRelative;for(let MD=0,ND=KD.count;MD<ND;MD++)OC.fromBufferAttribute(KD,MD),LD&&(LC.fromBufferAttribute(zD,MD),OC.add(LC)),FD=Math.max(FD,BD.distanceToSquared(OC))}this.boundingSphere.radius=Math.sqrt(FD),isNaN(this.boundingSphere.radius)&&console.error("THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.",this)}}computeTangents(){const OD=this.index,PD=this.attributes;if(null===OD|| void 0===PD.position|| void 0===PD.normal|| void 0===PD.uv){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const QD=OD.array,RD=PD.position.array,SD=PD.normal.array,TD=PD.uv.array,UD=RD.length/3;void 0===PD.tangent&&this.setAttribute("tangent",new WA(new Float32Array(4*UD),4));const VD=PD.tangent.array,WD=[],XD=[];for(let YD=0;YD<UD;YD++)WD[YD]=new qk(),XD[YD]=new qk();const ZD=new qk(),$D=new qk(),_D=new qk(),aE=new ea(),bE=new ea(),cE=new ea(),dE=new qk(),eE=new qk();function fE(a,b,c){ZD.fromArray(RD,3*a),$D.fromArray(RD,3*b),_D.fromArray(RD,3*c),aE.fromArray(TD,2*a),bE.fromArray(TD,2*b),cE.fromArray(TD,2*c),$D.sub(ZD),_D.sub(ZD),bE.sub(aE),cE.sub(aE);const d=1/(bE.x*cE.y-cE.x*bE.y);isFinite(d)&&(dE.copy($D).multiplyScalar(cE.y).addScaledVector(_D,-bE.y).multiplyScalar(d),eE.copy(_D).multiplyScalar(bE.x).addScaledVector($D,-cE.x).multiplyScalar(d),WD[a].add(dE),WD[b].add(dE),WD[c].add(dE),XD[a].add(eE),XD[b].add(eE),XD[c].add(eE))}let gE=this.groups;0===gE.length&&(gE=[{start:0,count:QD.length}]);for(let hE=0,iE=gE.length;hE<iE;++hE){const jE=gE[hE],kE=jE.start,lE=jE.count;for(let mE=kE,nE=kE+lE;mE<nE;mE+=3)fE(QD[mE+0],QD[mE+1],QD[mE+2])}const oE=new qk(),pE=new qk(),qE=new qk(),rE=new qk();function sE(a){qE.fromArray(SD,3*a),rE.copy(qE);const b=WD[a];oE.copy(b),oE.sub(qE.multiplyScalar(qE.dot(b))).normalize(),pE.crossVectors(rE,b);const c=pE.dot(XD[a]);VD[4*a]=oE.x,VD[4*a+1]=oE.y,VD[4*a+2]=oE.z,VD[4*a+3]=c<0?-1:1}for(let tE=0,uE=gE.length;tE<uE;++tE){const vE=gE[tE],wE=vE.start,xE=vE.count;for(let yE=wE,zE=wE+xE;yE<zE;yE+=3)sE(QD[yE+0]),sE(QD[yE+1]),sE(QD[yE+2])}}computeVertexNormals(){const AE=this.index,BE=this.getAttribute("position");if(void 0!==BE){let CE=this.getAttribute("normal");if(void 0===CE)CE=new WA(new Float32Array(3*BE.count),3),this.setAttribute("normal",CE);else for(let DE=0,EE=CE.count;DE<EE;DE++)CE.setXYZ(DE,0,0,0);const FE=new qk(),GE=new qk(),HE=new qk(),IE=new qk(),JE=new qk(),KE=new qk(),LE=new qk(),ME=new qk();if(AE)for(let NE=0,OE=AE.count;NE<OE;NE+=3){const PE=AE.getX(NE+0),QE=AE.getX(NE+1),RE=AE.getX(NE+2);FE.fromBufferAttribute(BE,PE),GE.fromBufferAttribute(BE,QE),HE.fromBufferAttribute(BE,RE),LE.subVectors(HE,GE),ME.subVectors(FE,GE),LE.cross(ME),IE.fromBufferAttribute(CE,PE),JE.fromBufferAttribute(CE,QE),KE.fromBufferAttribute(CE,RE),IE.add(LE),JE.add(LE),KE.add(LE),CE.setXYZ(PE,IE.x,IE.y,IE.z),CE.setXYZ(QE,JE.x,JE.y,JE.z),CE.setXYZ(RE,KE.x,KE.y,KE.z)}else for(let SE=0,TE=BE.count;SE<TE;SE+=3)FE.fromBufferAttribute(BE,SE+0),GE.fromBufferAttribute(BE,SE+1),HE.fromBufferAttribute(BE,SE+2),LE.subVectors(HE,GE),ME.subVectors(FE,GE),LE.cross(ME),CE.setXYZ(SE+0,LE.x,LE.y,LE.z),CE.setXYZ(SE+1,LE.x,LE.y,LE.z),CE.setXYZ(SE+2,LE.x,LE.y,LE.z);this.normalizeNormals(),CE.needsUpdate=!0}}merge(UE,VE){if(!(UE&&UE.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",UE);return}void 0===VE&&(VE=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const WE=this.attributes;for(const XE in WE){if(void 0===UE.attributes[XE])continue;const YE=WE[XE],ZE=YE.array,$E=UE.attributes[XE],_E=$E.array,aF=$E.itemSize*VE,bF=Math.min(_E.length,ZE.length-aF);for(let cF=0,dF=aF;cF<bF;cF++,dF++)ZE[dF]=_E[cF]}return this}normalizeNormals(){const eF=this.attributes.normal;for(let fF=0,gF=eF.count;fF<gF;fF++)OC.fromBufferAttribute(eF,fF),OC.normalize(),eF.setXYZ(fF,OC.x,OC.y,OC.z)}toNonIndexed(){function hF(a,b){const c=a.array,d=a.itemSize,e=a.normalized,f=new c.constructor(b.length*d);let g=0,h=0;for(let i=0,j=b.length;i<j;i++){g=a.isInterleavedBufferAttribute?b[i]*a.data.stride+a.offset:b[i]*d;for(let k=0;k<d;k++)f[h++]=c[g++]}return new WA(f,d,e)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const iF=new PC(),jF=this.index.array,kF=this.attributes;for(const lF in kF){const mF=kF[lF],nF=hF(mF,jF);iF.setAttribute(lF,nF)}const oF=this.morphAttributes;for(const pF in oF){const qF=[],rF=oF[pF];for(let sF=0,tF=rF.length;sF<tF;sF++){const uF=rF[sF],vF=hF(uF,jF);qF.push(vF)}iF.morphAttributes[pF]=qF}iF.morphTargetsRelative=this.morphTargetsRelative;const wF=this.groups;for(let xF=0,yF=wF.length;xF<yF;xF++){const zF=wF[xF];iF.addGroup(zF.start,zF.count,zF.materialIndex)}return iF}toJSON(){const AF={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(AF.uuid=this.uuid,AF.type=this.type,""!==this.name&&(AF.name=this.name),Object.keys(this.userData).length>0&&(AF.userData=this.userData),void 0!==this.parameters){const BF=this.parameters;for(const CF in BF)void 0!==BF[CF]&&(AF[CF]=BF[CF]);return AF}AF.data={attributes:{}};const DF=this.index;null!==DF&&(AF.data.index={type:DF.array.constructor.name,array:Array.prototype.slice.call(DF.array)});const EF=this.attributes;for(const FF in EF){const GF=EF[FF];AF.data.attributes[FF]=GF.toJSON(AF.data)}const HF={};let IF=!1;for(const JF in this.morphAttributes){const KF=this.morphAttributes[JF],LF=[];for(let MF=0,NF=KF.length;MF<NF;MF++){const OF=KF[MF];LF.push(OF.toJSON(AF.data))}LF.length>0&&(HF[JF]=LF,IF=!0)}IF&&(AF.data.morphAttributes=HF,AF.data.morphTargetsRelative=this.morphTargetsRelative);const PF=this.groups;PF.length>0&&(AF.data.groups=JSON.parse(JSON.stringify(PF)));const QF=this.boundingSphere;return null!==QF&&(AF.data.boundingSphere={center:QF.center.toArray(),radius:QF.radius}),AF}clone(){return new this.constructor().copy(this)}copy(RF){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const SF={};this.name=RF.name;const TF=RF.index;null!==TF&&this.setIndex(TF.clone(SF));const UF=RF.attributes;for(const VF in UF){const WF=UF[VF];this.setAttribute(VF,WF.clone(SF))}const XF=RF.morphAttributes;for(const YF in XF){const ZF=[],$F=XF[YF];for(let _F=0,aG=$F.length;_F<aG;_F++)ZF.push($F[_F].clone(SF));this.morphAttributes[YF]=ZF}this.morphTargetsRelative=RF.morphTargetsRelative;const bG=RF.groups;for(let cG=0,dG=bG.length;cG<dG;cG++){const eG=bG[cG];this.addGroup(eG.start,eG.count,eG.materialIndex)}const fG=RF.boundingBox;null!==fG&&(this.boundingBox=fG.clone());const gG=RF.boundingSphere;return null!==gG&&(this.boundingSphere=gG.clone()),this.drawRange.start=RF.drawRange.start,this.drawRange.count=RF.drawRange.count,this.userData=RF.userData,void 0!==RF.parameters&&(this.parameters=Object.assign({},RF.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}PC.prototype.isBufferGeometry=!0;const hG=new Kq(),iG=new qp(),jG=new Ho(),kG=new qk(),lG=new qk(),mG=new qk(),nG=new qk(),oG=new qk(),pG=new qk(),qG=new qk(),rG=new qk(),sG=new qk(),tG=new ea(),uG=new ea(),vG=new ea(),wG=new qk(),xG=new qk();class yG extends Vw{constructor(zG=new PC(),AG=new RA()){super(),this.type="Mesh",this.geometry=zG,this.material=AG,this.updateMorphTargets()}copy(BG){return super.copy(BG),void 0!==BG.morphTargetInfluences&&(this.morphTargetInfluences=BG.morphTargetInfluences.slice()),void 0!==BG.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},BG.morphTargetDictionary)),this.material=BG.material,this.geometry=BG.geometry,this}updateMorphTargets(){const CG=this.geometry;if(CG.isBufferGeometry){const DG=CG.morphAttributes,EG=Object.keys(DG);if(EG.length>0){const FG=DG[EG[0]];if(void 0!==FG){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let GG=0,HG=FG.length;GG<HG;GG++){const IG=FG[GG].name||String(GG);this.morphTargetInfluences.push(0),this.morphTargetDictionary[IG]=GG}}}}else{const JG=CG.morphTargets;void 0!==JG&&JG.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(KG,LG){const MG=this.geometry,NG=this.material,OG=this.matrixWorld;if(void 0===NG)return;if(null===MG.boundingSphere&&MG.computeBoundingSphere(),jG.copy(MG.boundingSphere),jG.applyMatrix4(OG),!1===KG.ray.intersectsSphere(jG))return;if(hG.copy(OG).invert(),iG.copy(KG.ray).applyMatrix4(hG),null!==MG.boundingBox&& !1===iG.intersectsBox(MG.boundingBox))return;let PG;if(MG.isBufferGeometry){const QG=MG.index,RG=MG.attributes.position,SG=MG.morphAttributes.position,TG=MG.morphTargetsRelative,UG=MG.attributes.uv,VG=MG.attributes.uv2,WG=MG.groups,XG=MG.drawRange;if(null!==QG)if(Array.isArray(NG))for(let YG=0,ZG=WG.length;YG<ZG;YG++){const $G=WG[YG],_G=NG[$G.materialIndex],aH=Math.max($G.start,XG.start),bH=Math.min(QG.count,Math.min($G.start+$G.count,XG.start+XG.count));for(let cH=aH,dH=bH;cH<dH;cH+=3){const eH=QG.getX(cH),fH=QG.getX(cH+1),gH=QG.getX(cH+2);(PG=GH(this,_G,KG,iG,RG,SG,TG,UG,VG,eH,fH,gH))&&(PG.faceIndex=Math.floor(cH/3),PG.face.materialIndex=$G.materialIndex,LG.push(PG))}}else{const hH=Math.max(0,XG.start),iH=Math.min(QG.count,XG.start+XG.count);for(let jH=hH,kH=iH;jH<kH;jH+=3){const lH=QG.getX(jH),mH=QG.getX(jH+1),nH=QG.getX(jH+2);(PG=GH(this,NG,KG,iG,RG,SG,TG,UG,VG,lH,mH,nH))&&(PG.faceIndex=Math.floor(jH/3),LG.push(PG))}}else if(void 0!==RG)if(Array.isArray(NG))for(let oH=0,pH=WG.length;oH<pH;oH++){const qH=WG[oH],rH=NG[qH.materialIndex],sH=Math.max(qH.start,XG.start),tH=Math.min(RG.count,Math.min(qH.start+qH.count,XG.start+XG.count));for(let uH=sH,vH=tH;uH<vH;uH+=3){const wH=uH,xH=uH+1,yH=uH+2;(PG=GH(this,rH,KG,iG,RG,SG,TG,UG,VG,wH,xH,yH))&&(PG.faceIndex=Math.floor(uH/3),PG.face.materialIndex=qH.materialIndex,LG.push(PG))}}else{const zH=Math.max(0,XG.start),AH=Math.min(RG.count,XG.start+XG.count);for(let BH=zH,CH=AH;BH<CH;BH+=3){const DH=BH,EH=BH+1,FH=BH+2;(PG=GH(this,NG,KG,iG,RG,SG,TG,UG,VG,DH,EH,FH))&&(PG.faceIndex=Math.floor(BH/3),LG.push(PG))}}}else MG.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function GH(a,b,c,d,e,f,g,j,k,l,m,n){kG.fromBufferAttribute(e,l),lG.fromBufferAttribute(e,m),mG.fromBufferAttribute(e,n);const o=a.morphTargetInfluences;if(f&&o){qG.set(0,0,0),rG.set(0,0,0),sG.set(0,0,0);for(let p=0,q=f.length;p<q;p++){const r=o[p],s=f[p];0!==r&&(nG.fromBufferAttribute(s,l),oG.fromBufferAttribute(s,m),pG.fromBufferAttribute(s,n),g?(qG.addScaledVector(nG,r),rG.addScaledVector(oG,r),sG.addScaledVector(pG,r)):(qG.addScaledVector(nG.sub(kG),r),rG.addScaledVector(oG.sub(lG),r),sG.addScaledVector(pG.sub(mG),r)))}kG.add(qG),lG.add(rG),mG.add(sG)}a.isSkinnedMesh&&(a.boneTransform(l,kG),a.boneTransform(m,lG),a.boneTransform(n,mG));const t=function(a,b,c,d,e,f,g,j){if(null===(b.side===h?d.intersectTriangle(g,f,e,!0,j):d.intersectTriangle(e,f,g,b.side!==i,j)))return null;xG.copy(j),xG.applyMatrix4(a.matrixWorld);const k=c.ray.origin.distanceTo(xG);return k<c.near||k>c.far?null:{distance:k,point:xG.clone(),object:a}}(a,b,c,d,kG,lG,mG,wG);if(t){j&&(tG.fromBufferAttribute(j,l),uG.fromBufferAttribute(j,m),vG.fromBufferAttribute(j,n),t.uv=Yy.getUV(wG,kG,lG,mG,tG,uG,vG,new ea())),k&&(tG.fromBufferAttribute(k,l),uG.fromBufferAttribute(k,m),vG.fromBufferAttribute(k,n),t.uv2=Yy.getUV(wG,kG,lG,mG,tG,uG,vG,new ea()));const u={a:l,b:m,c:n,normal:new qk(),materialIndex:0};Yy.getNormal(kG,lG,mG,u.normal),t.face=u}return t}yG.prototype.isMesh=!0;class HH extends PC{constructor(IH=1,JH=1,KH=1,LH=1,MH=1,NH=1){super(),this.type="BoxGeometry",this.parameters={width:IH,height:JH,depth:KH,widthSegments:LH,heightSegments:MH,depthSegments:NH};const OH=this;LH=Math.floor(LH),MH=Math.floor(MH),NH=Math.floor(NH);const PH=[],QH=[],RH=[],SH=[];let TH=0,UH=0;function VH(a,b,c,d,e,f,g,h,i,j,k){const l=f/i,m=g/j,n=f/2,o=g/2,p=h/2,q=i+1,r=j+1;let s=0,t=0;const u=new qk();for(let v=0;v<r;v++){const w=v*m-o;for(let x=0;x<q;x++){const y=x*l-n;u[a]=y*d,u[b]=w*e,u[c]=p,QH.push(u.x,u.y,u.z),u[a]=0,u[b]=0,u[c]=h>0?1:-1,RH.push(u.x,u.y,u.z),SH.push(x/i),SH.push(1-v/j),s+=1}}for(let z=0;z<j;z++)for(let A=0;A<i;A++){const B=TH+A+q*z,C=TH+A+q*(z+1),D=TH+(A+1)+q*(z+1),E=TH+(A+1)+q*z;PH.push(B,C,E),PH.push(C,D,E),t+=6}OH.addGroup(UH,t,k),UH+=t,TH+=s}VH("z","y","x",-1,-1,KH,JH,IH,NH,MH,0),VH("z","y","x",1,-1,KH,JH,-IH,NH,MH,1),VH("x","z","y",1,1,IH,KH,JH,LH,NH,2),VH("x","z","y",1,-1,IH,KH,-JH,LH,NH,3),VH("x","y","z",1,-1,IH,JH,KH,LH,MH,4),VH("x","y","z",-1,-1,IH,JH,-KH,LH,MH,5),this.setIndex(PH),this.setAttribute("position",new EC(QH,3)),this.setAttribute("normal",new EC(RH,3)),this.setAttribute("uv",new EC(SH,2))}static fromJSON(WH){return new HH(WH.width,WH.height,WH.depth,WH.widthSegments,WH.heightSegments,WH.depthSegments)}}function XH(a){const b={};for(const c in a)for(const d in b[c]={},a[c]){const e=a[c][d];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture||e.isQuaternion)?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}return b}function YH(a){const b={};for(let c=0;c<a.length;c++){const d=XH(a[c]);for(const e in d)b[e]=d[e]}return b}const ZH={clone:XH,merge:YH};class $H extends zA{constructor(_H){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==_H&&(void 0!==_H.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(_H))}copy(aI){return super.copy(aI),this.fragmentShader=aI.fragmentShader,this.vertexShader=aI.vertexShader,this.uniforms=XH(aI.uniforms),this.defines=Object.assign({},aI.defines),this.wireframe=aI.wireframe,this.wireframeLinewidth=aI.wireframeLinewidth,this.lights=aI.lights,this.clipping=aI.clipping,this.extensions=Object.assign({},aI.extensions),this.glslVersion=aI.glslVersion,this}toJSON(bI){const cI=super.toJSON(bI);for(const dI in cI.glslVersion=this.glslVersion,cI.uniforms={},this.uniforms){const eI=this.uniforms[dI],fI=eI.value;fI&&fI.isTexture?cI.uniforms[dI]={type:"t",value:fI.toJSON(bI).uuid}:fI&&fI.isColor?cI.uniforms[dI]={type:"c",value:fI.getHex()}:fI&&fI.isVector2?cI.uniforms[dI]={type:"v2",value:fI.toArray()}:fI&&fI.isVector3?cI.uniforms[dI]={type:"v3",value:fI.toArray()}:fI&&fI.isVector4?cI.uniforms[dI]={type:"v4",value:fI.toArray()}:fI&&fI.isMatrix3?cI.uniforms[dI]={type:"m3",value:fI.toArray()}:fI&&fI.isMatrix4?cI.uniforms[dI]={type:"m4",value:fI.toArray()}:cI.uniforms[dI]={value:fI}}Object.keys(this.defines).length>0&&(cI.defines=this.defines),cI.vertexShader=this.vertexShader,cI.fragmentShader=this.fragmentShader;const gI={};for(const hI in this.extensions)!0===this.extensions[hI]&&(gI[hI]=!0);return Object.keys(gI).length>0&&(cI.extensions=gI),cI}}$H.prototype.isShaderMaterial=!0;class iI extends Vw{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Kq(),this.projectionMatrix=new Kq(),this.projectionMatrixInverse=new Kq()}copy(jI,kI){return super.copy(jI,kI),this.matrixWorldInverse.copy(jI.matrixWorldInverse),this.projectionMatrix.copy(jI.projectionMatrix),this.projectionMatrixInverse.copy(jI.projectionMatrixInverse),this}getWorldDirection(lI){this.updateWorldMatrix(!0,!1);const mI=this.matrixWorld.elements;return lI.set(-mI[8],-mI[9],-mI[10]).normalize()}updateMatrixWorld(nI){super.updateMatrixWorld(nI),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(oI,pI){super.updateWorldMatrix(oI,pI),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}iI.prototype.isCamera=!0;class qI extends iI{constructor(rI=50,sI=1,tI=0.1,uI=2000){super(),this.type="PerspectiveCamera",this.fov=rI,this.zoom=1,this.near=tI,this.far=uI,this.focus=10,this.aspect=sI,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(vI,wI){return super.copy(vI,wI),this.fov=vI.fov,this.zoom=vI.zoom,this.near=vI.near,this.far=vI.far,this.focus=vI.focus,this.aspect=vI.aspect,this.view=null===vI.view?null:Object.assign({},vI.view),this.filmGauge=vI.filmGauge,this.filmOffset=vI.filmOffset,this}setFocalLength(xI){const yI=0.5*this.getFilmHeight()/xI;this.fov=2*Y*Math.atan(yI),this.updateProjectionMatrix()}getFocalLength(){const zI=Math.tan(0.5*X*this.fov);return 0.5*this.getFilmHeight()/zI}getEffectiveFOV(){return 2*Y*Math.atan(Math.tan(0.5*X*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(AI,BI,CI,DI,EI,FI){this.aspect=AI/BI,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=AI,this.view.fullHeight=BI,this.view.offsetX=CI,this.view.offsetY=DI,this.view.width=EI,this.view.height=FI,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const GI=this.near;let HI=GI*Math.tan(0.5*X*this.fov)/this.zoom,II=2*HI,JI=this.aspect*II,KI=-0.5*JI;const LI=this.view;if(null!==this.view&&this.view.enabled){const MI=LI.fullWidth,NI=LI.fullHeight;KI+=LI.offsetX*JI/MI,HI-=LI.offsetY*II/NI,JI*=LI.width/MI,II*=LI.height/NI}const OI=this.filmOffset;0!==OI&&(KI+=GI*OI/this.getFilmWidth()),this.projectionMatrix.makePerspective(KI,KI+JI,HI,HI-II,GI,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(PI){const QI=super.toJSON(PI);return QI.object.fov=this.fov,QI.object.zoom=this.zoom,QI.object.near=this.near,QI.object.far=this.far,QI.object.focus=this.focus,QI.object.aspect=this.aspect,null!==this.view&&(QI.object.view=Object.assign({},this.view)),QI.object.filmGauge=this.filmGauge,QI.object.filmOffset=this.filmOffset,QI}}qI.prototype.isPerspectiveCamera=!0;class RI extends Vw{constructor(SI,TI,UI){if(super(),this.type="CubeCamera",!0!==UI.isWebGLCubeRenderTarget){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=UI;const VI=new qI(90,1,SI,TI);VI.layers=this.layers,VI.up.set(0,-1,0),VI.lookAt(new qk(1,0,0)),this.add(VI);const WI=new qI(90,1,SI,TI);WI.layers=this.layers,WI.up.set(0,-1,0),WI.lookAt(new qk(-1,0,0)),this.add(WI);const XI=new qI(90,1,SI,TI);XI.layers=this.layers,XI.up.set(0,0,1),XI.lookAt(new qk(0,1,0)),this.add(XI);const YI=new qI(90,1,SI,TI);YI.layers=this.layers,YI.up.set(0,0,-1),YI.lookAt(new qk(0,-1,0)),this.add(YI);const ZI=new qI(90,1,SI,TI);ZI.layers=this.layers,ZI.up.set(0,-1,0),ZI.lookAt(new qk(0,0,1)),this.add(ZI);const $I=new qI(90,1,SI,TI);$I.layers=this.layers,$I.up.set(0,-1,0),$I.lookAt(new qk(0,0,-1)),this.add($I)}update(_I,aJ){null===this.parent&&this.updateMatrixWorld();const bJ=this.renderTarget,[cJ,dJ,eJ,fJ,gJ,hJ]=this.children,iJ=_I.xr.enabled,jJ=_I.getRenderTarget();_I.xr.enabled=!1;const kJ=bJ.texture.generateMipmaps;bJ.texture.generateMipmaps=!1,_I.setRenderTarget(bJ,0),_I.render(aJ,cJ),_I.setRenderTarget(bJ,1),_I.render(aJ,dJ),_I.setRenderTarget(bJ,2),_I.render(aJ,eJ),_I.setRenderTarget(bJ,3),_I.render(aJ,fJ),_I.setRenderTarget(bJ,4),_I.render(aJ,gJ),bJ.texture.generateMipmaps=kJ,_I.setRenderTarget(bJ,5),_I.render(aJ,hJ),_I.setRenderTarget(jJ),_I.xr.enabled=iJ,bJ.texture.needsPMREMUpdate=!0}}class lJ extends gf{constructor(mJ,nJ,oJ,pJ,qJ,rJ,sJ,tJ,uJ,vJ){super(mJ=void 0!==mJ?mJ:[],nJ=void 0!==nJ?nJ:301,oJ,pJ,qJ,rJ,sJ,tJ,uJ,vJ),this.flipY=!1}get images(){return this.image}set images(wJ){this.image=wJ}}lJ.prototype.isCubeTexture=!0;class xJ extends kh{constructor(yJ,zJ,AJ){Number.isInteger(zJ)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),zJ=AJ),super(yJ,yJ,zJ),zJ=zJ||{},this.texture=new lJ(void 0,zJ.mapping,zJ.wrapS,zJ.wrapT,zJ.magFilter,zJ.minFilter,zJ.format,zJ.type,zJ.anisotropy,zJ.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==zJ.generateMipmaps&&zJ.generateMipmaps,this.texture.minFilter=void 0!==zJ.minFilter?zJ.minFilter:1006}fromEquirectangularTexture(BJ,CJ){this.texture.type=CJ.type,this.texture.format=s,this.texture.encoding=CJ.encoding,this.texture.generateMipmaps=CJ.generateMipmaps,this.texture.minFilter=CJ.minFilter,this.texture.magFilter=CJ.magFilter;const DJ={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},EJ=new HH(5,5,5),FJ=new $H({name:"CubemapFromEquirect",uniforms:XH(DJ.uniforms),vertexShader:DJ.vertexShader,fragmentShader:DJ.fragmentShader,side:h,blending:0});FJ.uniforms.tEquirect.value=CJ;const GJ=new yG(EJ,FJ),HJ=CJ.minFilter;CJ.minFilter===r&&(CJ.minFilter=1006);const IJ=new RI(1,10,this);return IJ.update(BJ,GJ),CJ.minFilter=HJ,GJ.geometry.dispose(),GJ.material.dispose(),this}clear(JJ,KJ,LJ,MJ){const NJ=JJ.getRenderTarget();for(let OJ=0;OJ<6;OJ++)JJ.setRenderTarget(this,OJ),JJ.clear(KJ,LJ,MJ);JJ.setRenderTarget(NJ)}}xJ.prototype.isWebGLCubeRenderTarget=!0;const PJ=new qk(),QJ=new qk(),RJ=new vb();class SJ{constructor(TJ=new qk(1,0,0),UJ=0){this.normal=TJ,this.constant=UJ}set(VJ,WJ){return this.normal.copy(VJ),this.constant=WJ,this}setComponents(XJ,YJ,ZJ,$J){return this.normal.set(XJ,YJ,ZJ),this.constant=$J,this}setFromNormalAndCoplanarPoint(_J,aK){return this.normal.copy(_J),this.constant=-aK.dot(this.normal),this}setFromCoplanarPoints(bK,cK,dK){const eK=PJ.subVectors(dK,cK).cross(QJ.subVectors(bK,cK)).normalize();return this.setFromNormalAndCoplanarPoint(eK,bK),this}copy(fK){return this.normal.copy(fK.normal),this.constant=fK.constant,this}normalize(){const gK=1/this.normal.length();return this.normal.multiplyScalar(gK),this.constant*=gK,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(hK){return this.normal.dot(hK)+this.constant}distanceToSphere(iK){return this.distanceToPoint(iK.center)-iK.radius}projectPoint(jK,kK){return kK.copy(this.normal).multiplyScalar(-this.distanceToPoint(jK)).add(jK)}intersectLine(lK,mK){const nK=lK.delta(PJ),oK=this.normal.dot(nK);if(0===oK)return 0===this.distanceToPoint(lK.start)?mK.copy(lK.start):null;const pK=-(lK.start.dot(this.normal)+this.constant)/oK;return pK<0||pK>1?null:mK.copy(nK).multiplyScalar(pK).add(lK.start)}intersectsLine(qK){const rK=this.distanceToPoint(qK.start),sK=this.distanceToPoint(qK.end);return rK<0&&sK>0||sK<0&&rK>0}intersectsBox(tK){return tK.intersectsPlane(this)}intersectsSphere(uK){return uK.intersectsPlane(this)}coplanarPoint(vK){return vK.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(wK,xK){const yK=xK||RJ.getNormalMatrix(wK),zK=this.coplanarPoint(PJ).applyMatrix4(wK),AK=this.normal.applyMatrix3(yK).normalize();return this.constant=-zK.dot(AK),this}translate(BK){return this.constant-=BK.dot(this.normal),this}equals(CK){return CK.normal.equals(this.normal)&&CK.constant===this.constant}clone(){return new this.constructor().copy(this)}}SJ.prototype.isPlane=!0;const DK=new Ho(),EK=new qk();class FK{constructor(GK=new SJ(),HK=new SJ(),IK=new SJ(),JK=new SJ(),KK=new SJ(),LK=new SJ()){this.planes=[GK,HK,IK,JK,KK,LK]}set(MK,NK,OK,PK,QK,RK){const SK=this.planes;return SK[0].copy(MK),SK[1].copy(NK),SK[2].copy(OK),SK[3].copy(PK),SK[4].copy(QK),SK[5].copy(RK),this}copy(TK){const UK=this.planes;for(let VK=0;VK<6;VK++)UK[VK].copy(TK.planes[VK]);return this}setFromProjectionMatrix(WK){const XK=this.planes,YK=WK.elements,ZK=YK[0],$K=YK[1],_K=YK[2],aL=YK[3],bL=YK[4],cL=YK[5],dL=YK[6],eL=YK[7],fL=YK[8],gL=YK[9],hL=YK[10],iL=YK[11],jL=YK[12],kL=YK[13],lL=YK[14],mL=YK[15];return XK[0].setComponents(aL-ZK,eL-bL,iL-fL,mL-jL).normalize(),XK[1].setComponents(aL+ZK,eL+bL,iL+fL,mL+jL).normalize(),XK[2].setComponents(aL+$K,eL+cL,iL+gL,mL+kL).normalize(),XK[3].setComponents(aL-$K,eL-cL,iL-gL,mL-kL).normalize(),XK[4].setComponents(aL-_K,eL-dL,iL-hL,mL-lL).normalize(),XK[5].setComponents(aL+_K,eL+dL,iL+hL,mL+lL).normalize(),this}intersectsObject(nL){const oL=nL.geometry;return null===oL.boundingSphere&&oL.computeBoundingSphere(),DK.copy(oL.boundingSphere).applyMatrix4(nL.matrixWorld),this.intersectsSphere(DK)}intersectsSprite(pL){return DK.center.set(0,0,0),DK.radius=0.7071067811865476,DK.applyMatrix4(pL.matrixWorld),this.intersectsSphere(DK)}intersectsSphere(qL){const rL=this.planes,sL=qL.center,tL=-qL.radius;for(let uL=0;uL<6;uL++){const vL=rL[uL].distanceToPoint(sL);if(vL<tL)return!1}return!0}intersectsBox(wL){const xL=this.planes;for(let yL=0;yL<6;yL++){const zL=xL[yL];if(EK.x=zL.normal.x>0?wL.max.x:wL.min.x,EK.y=zL.normal.y>0?wL.max.y:wL.min.y,EK.z=zL.normal.z>0?wL.max.z:wL.min.z,0>zL.distanceToPoint(EK))return!1}return!0}containsPoint(AL){const BL=this.planes;for(let CL=0;CL<6;CL++)if(0>BL[CL].distanceToPoint(AL))return!1;return!0}clone(){return new this.constructor().copy(this)}}function DL(){let a=null,b=!1,c=null,d=null;function e(b,f){c(b,f),d=a.requestAnimationFrame(e)}return{start:function(){!0!==b&&null!==c&&(d=a.requestAnimationFrame(e),b=!0)},stop:function(){a.cancelAnimationFrame(d),b=!1},setAnimationLoop:function(a){c=a},setContext:function(b){a=b}}}function EL(a,b){const c=b.isWebGL2,d=new WeakMap();return{get:function(a){return a.isInterleavedBufferAttribute&&(a=a.data),d.get(a)},remove:function(b){b.isInterleavedBufferAttribute&&(b=b.data);const c=d.get(b);c&&(a.deleteBuffer(c.buffer),d.delete(b))},update:function(b,e){if(b.isGLBufferAttribute){const f=d.get(b);(!f||f.version<b.version)&&d.set(b,{buffer:b.buffer,type:b.type,bytesPerElement:b.elementSize,version:b.version});return}b.isInterleavedBufferAttribute&&(b=b.data);const g=d.get(b);void 0===g?d.set(b,function(b,d){const e=b.array,f=b.usage,g=a.createBuffer();a.bindBuffer(d,g),a.bufferData(d,e,f),b.onUploadCallback();let h=5126;return e instanceof Float32Array?h=5126:e instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):e instanceof Uint16Array?b.isFloat16BufferAttribute?c?h=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):h=5123:e instanceof Int16Array?h=5122:e instanceof Uint32Array?h=5125:e instanceof Int32Array?h=5124:e instanceof Int8Array?h=5120:e instanceof Uint8Array?h=5121:e instanceof Uint8ClampedArray&&(h=5121),{buffer:g,type:h,bytesPerElement:e.BYTES_PER_ELEMENT,version:b.version}}(b,e)):g.version<b.version&&(!function(b,d,e){const f=d.array,g=d.updateRange;a.bindBuffer(e,b),-1===g.count?a.bufferSubData(e,0,f):(c?a.bufferSubData(e,g.offset*f.BYTES_PER_ELEMENT,f,g.offset,g.count):a.bufferSubData(e,g.offset*f.BYTES_PER_ELEMENT,f.subarray(g.offset,g.offset+g.count)),g.count=-1)}(g.buffer,b,e),g.version=b.version)}}}class FL extends PC{constructor(GL=1,HL=1,IL=1,JL=1){super(),this.type="PlaneGeometry",this.parameters={width:GL,height:HL,widthSegments:IL,heightSegments:JL};const KL=GL/2,LL=HL/2,ML=Math.floor(IL),NL=Math.floor(JL),OL=ML+1,PL=NL+1,QL=GL/ML,RL=HL/NL,SL=[],TL=[],UL=[],VL=[];for(let WL=0;WL<PL;WL++){const XL=WL*RL-LL;for(let YL=0;YL<OL;YL++){const ZL=YL*QL-KL;TL.push(ZL,-XL,0),UL.push(0,0,1),VL.push(YL/ML),VL.push(1-WL/NL)}}for(let $L=0;$L<NL;$L++)for(let _L=0;_L<ML;_L++){const aM=_L+OL*$L,bM=_L+OL*($L+1),cM=_L+1+OL*($L+1),dM=_L+1+OL*$L;SL.push(aM,bM,dM),SL.push(bM,cM,dM)}this.setIndex(SL),this.setAttribute("position",new EC(TL,3)),this.setAttribute("normal",new EC(UL,3)),this.setAttribute("uv",new EC(VL,2))}static fromJSON(eM){return new FL(eM.width,eM.height,eM.widthSegments,eM.heightSegments)}}const fM={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},gM={common:{diffuse:{value:new Gd(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new vb()},uv2Transform:{value:new vb()},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:0.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new ea(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new Gd(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Gd(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new vb()}},sprite:{diffuse:{value:new Gd(16777215)},opacity:{value:1},center:{value:new ea(0.5,0.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new vb()}}},hM={basic:{uniforms:YH([gM.common,gM.specularmap,gM.envmap,gM.aomap,gM.lightmap,gM.fog]),vertexShader:fM.meshbasic_vert,fragmentShader:fM.meshbasic_frag},lambert:{uniforms:YH([gM.common,gM.specularmap,gM.envmap,gM.aomap,gM.lightmap,gM.emissivemap,gM.fog,gM.lights,{emissive:{value:new Gd(0)}}]),vertexShader:fM.meshlambert_vert,fragmentShader:fM.meshlambert_frag},phong:{uniforms:YH([gM.common,gM.specularmap,gM.envmap,gM.aomap,gM.lightmap,gM.emissivemap,gM.bumpmap,gM.normalmap,gM.displacementmap,gM.fog,gM.lights,{emissive:{value:new Gd(0)},specular:{value:new Gd(1118481)},shininess:{value:30}}]),vertexShader:fM.meshphong_vert,fragmentShader:fM.meshphong_frag},standard:{uniforms:YH([gM.common,gM.envmap,gM.aomap,gM.lightmap,gM.emissivemap,gM.bumpmap,gM.normalmap,gM.displacementmap,gM.roughnessmap,gM.metalnessmap,gM.fog,gM.lights,{emissive:{value:new Gd(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:fM.meshphysical_vert,fragmentShader:fM.meshphysical_frag},toon:{uniforms:YH([gM.common,gM.aomap,gM.lightmap,gM.emissivemap,gM.bumpmap,gM.normalmap,gM.displacementmap,gM.gradientmap,gM.fog,gM.lights,{emissive:{value:new Gd(0)}}]),vertexShader:fM.meshtoon_vert,fragmentShader:fM.meshtoon_frag},matcap:{uniforms:YH([gM.common,gM.bumpmap,gM.normalmap,gM.displacementmap,gM.fog,{matcap:{value:null}}]),vertexShader:fM.meshmatcap_vert,fragmentShader:fM.meshmatcap_frag},points:{uniforms:YH([gM.points,gM.fog]),vertexShader:fM.points_vert,fragmentShader:fM.points_frag},dashed:{uniforms:YH([gM.common,gM.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:fM.linedashed_vert,fragmentShader:fM.linedashed_frag},depth:{uniforms:YH([gM.common,gM.displacementmap]),vertexShader:fM.depth_vert,fragmentShader:fM.depth_frag},normal:{uniforms:YH([gM.common,gM.bumpmap,gM.normalmap,gM.displacementmap,{opacity:{value:1}}]),vertexShader:fM.meshnormal_vert,fragmentShader:fM.meshnormal_frag},sprite:{uniforms:YH([gM.sprite,gM.fog]),vertexShader:fM.sprite_vert,fragmentShader:fM.sprite_frag},background:{uniforms:{uvTransform:{value:new vb()},t2D:{value:null}},vertexShader:fM.background_vert,fragmentShader:fM.background_frag},cube:{uniforms:YH([gM.envmap,{opacity:{value:1}}]),vertexShader:fM.cube_vert,fragmentShader:fM.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:fM.equirect_vert,fragmentShader:fM.equirect_frag},distanceRGBA:{uniforms:YH([gM.common,gM.displacementmap,{referencePosition:{value:new qk()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:fM.distanceRGBA_vert,fragmentShader:fM.distanceRGBA_frag},shadow:{uniforms:YH([gM.lights,gM.fog,{color:{value:new Gd(0)},opacity:{value:1}},]),vertexShader:fM.shadow_vert,fragmentShader:fM.shadow_frag}};function iM(a,b,c,d,e,f){const i=new Gd(0);let j=!0===e?0:1,k,l,m=null,n=0,o=null;function p(a,b){c.buffers.color.setClear(a.r,a.g,a.b,b,f)}return{getClearColor:function(){return i},setClearColor:function(a,b=1){i.set(a),p(i,j=b)},getClearAlpha:function(){return j},setClearAlpha:function(a){p(i,j=a)},render:function(c,e){let f=!1,q=!0===e.isScene?e.background:null;q&&q.isTexture&&(q=b.get(q));const r=a.xr,s=r.getSession&&r.getSession();s&&"additive"===s.environmentBlendMode&&(q=null),null===q?p(i,j):q&&q.isColor&&(p(q,1),f=!0),(a.autoClear||f)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),q&&(q.isCubeTexture||306===q.mapping)?(void 0===l&&((l=new yG(new HH(1,1,1),new $H({name:"BackgroundCubeMaterial",uniforms:XH(hM.cube.uniforms),vertexShader:hM.cube.vertexShader,fragmentShader:hM.cube.fragmentShader,side:h,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(a,b,c){this.matrixWorld.copyPosition(c.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),d.update(l)),l.material.uniforms.envMap.value=q,l.material.uniforms.flipEnvMap.value=q.isCubeTexture&& !1===q.isRenderTargetTexture?-1:1,(m!==q||n!==q.version||o!==a.toneMapping)&&(l.material.needsUpdate=!0,m=q,n=q.version,o=a.toneMapping),c.unshift(l,l.geometry,l.material,0,0,null)):q&&q.isTexture&&(void 0===k&&((k=new yG(new FL(2,2),new $H({name:"BackgroundMaterial",uniforms:XH(hM.background.uniforms),vertexShader:hM.background.vertexShader,fragmentShader:hM.background.fragmentShader,side:g,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(k.material,"map",{get:function(){return this.uniforms.t2D.value}}),d.update(k)),k.material.uniforms.t2D.value=q,!0===q.matrixAutoUpdate&&q.updateMatrix(),k.material.uniforms.uvTransform.value.copy(q.matrix),(m!==q||n!==q.version||o!==a.toneMapping)&&(k.material.needsUpdate=!0,m=q,n=q.version,o=a.toneMapping),c.unshift(k,k.geometry,k.material,0,0,null))}}}function jM(a,b,c,d){const e=a.getParameter(34921),f=d.isWebGL2?null:b.get("OES_vertex_array_object"),g=d.isWebGL2||null!==f,h={},i=m(null);let j=i;function k(b){return d.isWebGL2?a.bindVertexArray(b):f.bindVertexArrayOES(b)}function l(b){return d.isWebGL2?a.deleteVertexArray(b):f.deleteVertexArrayOES(b)}function m(a){const b=[],c=[],d=[];for(let f=0;f<e;f++)b[f]=0,c[f]=0,d[f]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:b,enabledAttributes:c,attributeDivisors:d,object:a,attributes:{},index:null}}function n(){const a=j.newAttributes;for(let b=0,c=a.length;b<c;b++)a[b]=0}function o(a){p(a,0)}function p(c,e){const f=j.newAttributes,g=j.enabledAttributes,h=j.attributeDivisors;if(f[c]=1,0===g[c]&&(a.enableVertexAttribArray(c),g[c]=1),h[c]!==e){const i=d.isWebGL2?a:b.get("ANGLE_instanced_arrays");i[d.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](c,e),h[c]=e}}function q(){const b=j.newAttributes,c=j.enabledAttributes;for(let d=0,e=c.length;d<e;d++)c[d]!==b[d]&&(a.disableVertexAttribArray(d),c[d]=0)}function r(b,c,e,f,g,h){!0===d.isWebGL2&&(5124===e||5125===e)?a.vertexAttribIPointer(b,c,e,g,h):a.vertexAttribPointer(b,c,e,f,g,h)}function s(){t(),j!==i&&k((j=i).object)}function t(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:function(e,i,l,s,t){let u=!1;if(g){const v=function(b,c,e){const g=!0===e.wireframe;let i=h[b.id];void 0===i&&(i={},h[b.id]=i);let j=i[c.id];void 0===j&&(j={},i[c.id]=j);let k=j[g];return void 0===k&&(k=m(d.isWebGL2?a.createVertexArray():f.createVertexArrayOES()),j[g]=k),k}(s,l,i);j!==v&&k((j=v).object),(u=(function(a,b){const c=j.attributes,d=a.attributes;let e=0;for(const f in d){const g=c[f],h=d[f];if(void 0===g)return!0;if(g.attribute!==h)return!0;if(g.data!==h.data)return!0;e++}return j.attributesNum!==e||j.index!==b})(s,t))&&(function(a,b){const c={},d=a.attributes;let e=0;for(const f in d){const g=d[f],h={};h.attribute=g,g.data&&(h.data=g.data),c[f]=h,e++}j.attributes=c,j.attributesNum=e,j.index=b})(s,t)}else{const w=!0===i.wireframe;(j.geometry!==s.id||j.program!==l.id||j.wireframe!==w)&&(j.geometry=s.id,j.program=l.id,j.wireframe=w,u=!0)}!0===e.isInstancedMesh&&(u=!0),null!==t&&c.update(t,34963),u&&((function(e,f,g,h){if(!1===d.isWebGL2&&(e.isInstancedMesh||h.isInstancedBufferGeometry)&&null===b.get("ANGLE_instanced_arrays"))return;n();const i=h.attributes,j=g.getAttributes(),k=f.defaultAttributeValues;for(const l in j){const m=j[l];if(m.location>=0){let s=i[l];if(void 0===s&&("instanceMatrix"===l&&e.instanceMatrix&&(s=e.instanceMatrix),"instanceColor"===l&&e.instanceColor&&(s=e.instanceColor)),void 0!==s){const t=s.normalized,u=s.itemSize,v=c.get(s);if(void 0===v)continue;const w=v.buffer,x=v.type,y=v.bytesPerElement;if(s.isInterleavedBufferAttribute){const z=s.data,A=z.stride,B=s.offset;if(z&&z.isInstancedInterleavedBuffer){for(let C=0;C<m.locationSize;C++)p(m.location+C,z.meshPerAttribute);!0!==e.isInstancedMesh&& void 0===h._maxInstanceCount&&(h._maxInstanceCount=z.meshPerAttribute*z.count)}else for(let D=0;D<m.locationSize;D++)o(m.location+D);a.bindBuffer(34962,w);for(let E=0;E<m.locationSize;E++)r(m.location+E,u/m.locationSize,x,t,A*y,(B+u/m.locationSize*E)*y)}else{if(s.isInstancedBufferAttribute){for(let F=0;F<m.locationSize;F++)p(m.location+F,s.meshPerAttribute);!0!==e.isInstancedMesh&& void 0===h._maxInstanceCount&&(h._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let G=0;G<m.locationSize;G++)o(m.location+G);a.bindBuffer(34962,w);for(let H=0;H<m.locationSize;H++)r(m.location+H,u/m.locationSize,x,t,u*y,u/m.locationSize*H*y)}}else if(void 0!==k){const I=k[l];if(void 0!==I)switch(I.length){case 2:a.vertexAttrib2fv(m.location,I);break;case 3:a.vertexAttrib3fv(m.location,I);break;case 4:a.vertexAttrib4fv(m.location,I);break;default:a.vertexAttrib1fv(m.location,I)}}}}q()})(e,i,l,s),null!==t&&a.bindBuffer(34963,c.get(t).buffer))},reset:s,resetDefaultState:t,dispose:function(){for(const a in s(),h){const b=h[a];for(const c in b){const d=b[c];for(const e in d)l(d[e].object),delete d[e];delete b[c]}delete h[a]}},releaseStatesOfGeometry:function(a){if(void 0===h[a.id])return;const b=h[a.id];for(const c in b){const d=b[c];for(const e in d)l(d[e].object),delete d[e];delete b[c]}delete h[a.id]},releaseStatesOfProgram:function(a){for(const b in h){const c=h[b];if(void 0===c[a.id])continue;const d=c[a.id];for(const e in d)l(d[e].object),delete d[e];delete c[a.id]}},initAttributes:n,enableAttribute:o,disableUnusedAttributes:q}}function kM(a,b,c,d){const e=d.isWebGL2;let f;this.setMode=function(a){f=a},this.render=function(b,d){a.drawArrays(f,b,d),c.update(d,f,1)},this.renderInstances=function(d,g,h){if(0===h)return;let i,j;if(e)i=a,j="drawArraysInstanced";else if(j="drawArraysInstancedANGLE",null===(i=b.get("ANGLE_instanced_arrays"))){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}i[j](f,d,g,h),c.update(g,f,h)}}function lM(a,b,c){let d;function e(b){if("highp"===b){if(a.getShaderPrecisionFormat(35633,36338).precision>0&&a.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";b="mediump"}return"mediump"===b&&a.getShaderPrecisionFormat(35633,36337).precision>0&&a.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const f="undefined"!=typeof WebGL2RenderingContext&&a instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&a instanceof WebGL2ComputeRenderingContext;let g=void 0!==c.precision?c.precision:"highp";const h=e(g);h!==g&&(console.warn("THREE.WebGLRenderer:",g,"not supported, using",h,"instead."),g=h);const i=f||b.has("WEBGL_draw_buffers"),j=!0===c.logarithmicDepthBuffer,k=a.getParameter(34930),l=a.getParameter(35660),m=a.getParameter(3379),n=a.getParameter(34076),o=a.getParameter(34921),p=a.getParameter(36347),q=a.getParameter(36348),r=a.getParameter(36349),s=l>0,t=f||b.has("OES_texture_float"),u=f?a.getParameter(36183):0;return{isWebGL2:f,drawBuffers:i,getMaxAnisotropy:function(){if(void 0!==d)return d;if(!0===b.has("EXT_texture_filter_anisotropic")){const c=b.get("EXT_texture_filter_anisotropic");d=a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else d=0;return d},getMaxPrecision:e,precision:g,logarithmicDepthBuffer:j,maxTextures:k,maxVertexTextures:l,maxTextureSize:m,maxCubemapSize:n,maxAttributes:o,maxVertexUniforms:p,maxVaryings:q,maxFragmentUniforms:r,vertexTextures:s,floatFragmentTextures:t,floatVertexTextures:s&&t,maxSamples:u}}function mM(a){const b=this;let c=null,d=0,e=!1,f=!1;const g=new SJ(),h=new vb(),i={value:null,needsUpdate:!1};function j(){i.value!==c&&(i.value=c,i.needsUpdate=d>0),b.numPlanes=d,b.numIntersection=0}function k(a,c,d,e){const f=null!==a?a.length:0;let j=null;if(0!==f){if(j=i.value,!0!==e||null===j){const k=d+4*f,l=c.matrixWorldInverse;h.getNormalMatrix(l),(null===j||j.length<k)&&(j=new Float32Array(k));for(let m=0,n=d;m!==f;++m,n+=4)g.copy(a[m]).applyMatrix4(l,h),g.normal.toArray(j,n),j[n+3]=g.constant}i.value=j,i.needsUpdate=!0}return b.numPlanes=f,b.numIntersection=0,j}this.uniform=i,this.numPlanes=0,this.numIntersection=0,this.init=function(a,b,f){const g=0!==a.length||b||0!==d||e;return e=b,c=k(a,f,0),d=a.length,g},this.beginShadows=function(){f=!0,k(null)},this.endShadows=function(){f=!1,j()},this.setState=function(b,g,h){const l=b.clippingPlanes,m=b.clipIntersection,n=b.clipShadows,o=a.get(b);if(e&&null!==l&&0!==l.length&&(!f||n)){const p=f?0:d,q=4*p;let r=o.clippingState||null;i.value=r,r=k(l,g,q,h);for(let s=0;s!==q;++s)r[s]=c[s];o.clippingState=r,this.numIntersection=m?this.numPlanes:0,this.numPlanes+=p}else f?k(null):j()}}function nM(a){let b=new WeakMap();function c(a,b){return 303===b?a.mapping=301:304===b&&(a.mapping=302),a}function d(a){const c=a.target;c.removeEventListener("dispose",d);const e=b.get(c);void 0!==e&&(b.delete(c),e.dispose())}return{get:function(e){if(e&&e.isTexture&& !1===e.isRenderTargetTexture){const f=e.mapping;if(303===f||304===f){if(b.has(e)){const g=b.get(e).texture;return c(g,e.mapping)}{const h=e.image;if(!h||!(h.height>0))return null;{const i=new xJ(h.height/2);return i.fromEquirectangularTexture(a,e),b.set(e,i),e.addEventListener("dispose",d),c(i.texture,e.mapping)}}}}return e},dispose:function(){b=new WeakMap()}}}hM.physical={uniforms:YH([hM.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new ea(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Gd(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new ea()},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Gd(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Gd(1,1,1)},specularColorMap:{value:null}}]),vertexShader:fM.meshphysical_vert,fragmentShader:fM.meshphysical_frag};class oM extends iI{constructor(pM=-1,qM=1,rM=1,sM=-1,tM=0.1,uM=2000){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=pM,this.right=qM,this.top=rM,this.bottom=sM,this.near=tM,this.far=uM,this.updateProjectionMatrix()}copy(vM,wM){return super.copy(vM,wM),this.left=vM.left,this.right=vM.right,this.top=vM.top,this.bottom=vM.bottom,this.near=vM.near,this.far=vM.far,this.zoom=vM.zoom,this.view=null===vM.view?null:Object.assign({},vM.view),this}setViewOffset(xM,yM,zM,AM,BM,CM){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=xM,this.view.fullHeight=yM,this.view.offsetX=zM,this.view.offsetY=AM,this.view.width=BM,this.view.height=CM,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const DM=(this.right-this.left)/(2*this.zoom),EM=(this.top-this.bottom)/(2*this.zoom),FM=(this.right+this.left)/2,GM=(this.top+this.bottom)/2;let HM=FM-DM,IM=FM+DM,JM=GM+EM,KM=GM-EM;if(null!==this.view&&this.view.enabled){const LM=(this.right-this.left)/this.view.fullWidth/this.zoom,MM=(this.top-this.bottom)/this.view.fullHeight/this.zoom;IM=(HM+=LM*this.view.offsetX)+LM*this.view.width,KM=(JM-=MM*this.view.offsetY)-MM*this.view.height}this.projectionMatrix.makeOrthographic(HM,IM,JM,KM,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(NM){const OM=super.toJSON(NM);return OM.object.zoom=this.zoom,OM.object.left=this.left,OM.object.right=this.right,OM.object.top=this.top,OM.object.bottom=this.bottom,OM.object.near=this.near,OM.object.far=this.far,null!==this.view&&(OM.object.view=Object.assign({},this.view)),OM}}oM.prototype.isOrthographicCamera=!0;class PM extends $H{constructor(QM){super(QM),this.type="RawShaderMaterial"}}PM.prototype.isRawShaderMaterial=!0;const RM=[0.125,0.215,0.35,0.446,0.526,0.582],SM=5+RM.length,TM=new oM(),{_lodPlanes:UM,_sizeLods:VM,_sigmas:WM}=function(){const a=[],b=[],c=[];let d=8;for(let e=0;e<SM;e++){const f=Math.pow(2,d);b.push(f);let g=1/f;e>4?g=RM[e-8+4-1]:0===e&&(g=0),c.push(g);const h=1/(f-1),i=-h/2,j=1+h/2,k=[i,i,j,i,j,j,i,i,j,j,i,j],l=6,m=6,n=3,o=2,p=1,q=new Float32Array(n*m*l),r=new Float32Array(o*m*l),s=new Float32Array(p*m*l);for(let t=0;t<l;t++){const u=t%3*2/3-1,v=t>2?0:-1,w=[u,v,0,u+2/3,v,0,u+2/3,v+1,0,u,v,0,u+2/3,v+1,0,u,v+1,0];q.set(w,n*m*t),r.set(k,o*m*t);const x=[t,t,t,t,t,t];s.set(x,p*m*t)}const y=new PC();y.setAttribute("position",new WA(q,n)),y.setAttribute("uv",new WA(r,o)),y.setAttribute("faceIndex",new WA(s,p)),a.push(y),d>4&&d--}return{_lodPlanes:a,_sizeLods:b,_sigmas:c}}(),XM=new Gd();let YM=null;const ZM=(1+Math.sqrt(5))/2,$M=1/ZM,_M=[new qk(1,1,1),new qk(-1,1,1),new qk(1,1,-1),new qk(-1,1,-1),new qk(0,ZM,$M),new qk(0,ZM,-$M),new qk($M,0,ZM),new qk(-$M,0,ZM),new qk(ZM,$M,0),new qk(-ZM,$M,0)];class aN{constructor(bN){this._renderer=bN,this._pingPongRenderTarget=null,this._blurMaterial=(function(a){const b=new Float32Array(a),c=new qk(0,1,0),d=new PM({name:"SphericalGaussianBlur",defines:{n:a},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:b},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:c}},vertexShader:CO(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return d})(20),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(cN,dN=0,eN=0.1,fN=100){YM=this._renderer.getRenderTarget();const gN=this._allocateTargets();return this._sceneToCubeUV(cN,eN,fN,gN),dN>0&&this._blur(gN,0,0,dN),this._applyPMREM(gN),this._cleanup(gN),gN}fromEquirectangular(hN,iN=null){return this._fromTexture(hN,iN)}fromCubemap(jN,kN=null){return this._fromTexture(jN,kN)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=BO(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=AO(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let lN=0;lN<UM.length;lN++)UM[lN].dispose()}_cleanup(mN){this._renderer.setRenderTarget(YM),mN.scissorTest=!1,zO(mN,0,0,mN.width,mN.height)}_fromTexture(nN,oN){YM=this._renderer.getRenderTarget();const pN=oN||this._allocateTargets(nN);return this._textureToCubeUV(nN,pN),this._applyPMREM(pN),this._cleanup(pN),pN}_allocateTargets(qN){const rN={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:s,encoding:3000,depthBuffer:!1},sN=yO(rN);return sN.depthBuffer=!qN,null===this._pingPongRenderTarget&&(this._pingPongRenderTarget=yO(rN)),sN}_compileMaterial(tN){const uN=new yG(UM[0],tN);this._renderer.compile(uN,TM)}_sceneToCubeUV(vN,wN,xN,yN){const zN=new qI(90,1,wN,xN),AN=[1,-1,1,1,1,1],BN=[1,1,1,-1,-1,-1],CN=this._renderer,DN=CN.autoClear,EN=CN.toneMapping;CN.getClearColor(XM),CN.toneMapping=0,CN.autoClear=!1;const FN=new RA({name:"PMREM.Background",side:h,depthWrite:!1,depthTest:!1}),GN=new yG(new HH(),FN);let HN=!1;const IN=vN.background;IN?IN.isColor&&(FN.color.copy(IN),vN.background=null,HN=!0):(FN.color.copy(XM),HN=!0);for(let JN=0;JN<6;JN++){const KN=JN%3;0===KN?(zN.up.set(0,AN[JN],0),zN.lookAt(BN[JN],0,0)):1===KN?(zN.up.set(0,0,AN[JN]),zN.lookAt(0,BN[JN],0)):(zN.up.set(0,AN[JN],0),zN.lookAt(0,0,BN[JN])),zO(yN,256*KN,JN>2?256:0,256,256),CN.setRenderTarget(yN),HN&&CN.render(GN,zN),CN.render(vN,zN)}GN.geometry.dispose(),GN.material.dispose(),CN.toneMapping=EN,CN.autoClear=DN,vN.background=IN}_textureToCubeUV(LN,MN){const NN=this._renderer,ON=301===LN.mapping||302===LN.mapping;ON?(null===this._cubemapShader&&(this._cubemapShader=BO()),this._cubemapShader.uniforms.flipEnvMap.value=!1===LN.isRenderTargetTexture?-1:1):null===this._equirectShader&&(this._equirectShader=AO());const PN=ON?this._cubemapShader:this._equirectShader,QN=new yG(UM[0],PN),RN=PN.uniforms;RN.envMap.value=LN,ON||RN.texelSize.value.set(1/LN.image.width,1/LN.image.height),zO(MN,0,0,768,512),NN.setRenderTarget(MN),NN.render(QN,TM)}_applyPMREM(SN){const TN=this._renderer,UN=TN.autoClear;TN.autoClear=!1;for(let VN=1;VN<SM;VN++){const WN=Math.sqrt(WM[VN]*WM[VN]-WM[VN-1]*WM[VN-1]),XN=_M[(VN-1)%_M.length];this._blur(SN,VN-1,VN,WN,XN)}TN.autoClear=UN}_blur(YN,ZN,$N,_N,aO){const bO=this._pingPongRenderTarget;this._halfBlur(YN,bO,ZN,$N,_N,"latitudinal",aO),this._halfBlur(bO,YN,$N,$N,_N,"longitudinal",aO)}_halfBlur(cO,dO,eO,fO,gO,hO,iO){const jO=this._renderer,kO=this._blurMaterial;"latitudinal"!==hO&&"longitudinal"!==hO&&console.error("blur direction must be either latitudinal or longitudinal!");const lO=new yG(UM[fO],kO),mO=kO.uniforms,nO=VM[eO]-1,oO=isFinite(gO)?Math.PI/(2*nO):2*Math.PI/39,pO=gO/oO,qO=isFinite(gO)?1+Math.floor(3*pO):20;qO>20&&console.warn(`sigmaRadians, ${gO}, is too large and will clip, as it requested ${qO} samples when the maximum is set to 20`);const rO=[];let sO=0;for(let tO=0;tO<20;++tO){const uO=tO/pO,vO=Math.exp(-uO*uO/2);rO.push(vO),0===tO?sO+=vO:tO<qO&&(sO+=2*vO)}for(let wO=0;wO<rO.length;wO++)rO[wO]=rO[wO]/sO;mO.envMap.value=cO.texture,mO.samples.value=qO,mO.weights.value=rO,mO.latitudinal.value="latitudinal"===hO,iO&&(mO.poleAxis.value=iO),mO.dTheta.value=oO,mO.mipInt.value=8-eO;const xO=VM[fO];zO(dO,3*Math.max(0,256-2*xO),(0===fO?0:512)+2*xO*(fO>4?fO-8+4:0),3*xO,2*xO),jO.setRenderTarget(dO),jO.render(lO,TM)}}function yO(a){const b=new kh(768,768,a);return b.texture.mapping=306,b.texture.name="PMREM.cubeUv",b.scissorTest=!0,b}function zO(a,b,c,d,e){a.viewport.set(b,c,d,e),a.scissor.set(b,c,d,e)}function AO(){const a=new ea(1,1),b=new PM({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:a}},vertexShader:CO(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = texture2D ( envMap, uv ).rgb;
				uv.x += texelSize.x;
				vec3 tr = texture2D ( envMap, uv ).rgb;
				uv.y += texelSize.y;
				vec3 br = texture2D ( envMap, uv ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = texture2D ( envMap, uv ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return b}function BO(){const a=new PM({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:CO(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return a}function CO(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function DO(a){let b=new WeakMap(),c=null;function d(a){const c=a.target;c.removeEventListener("dispose",d);const e=b.get(c);void 0!==e&&(b.delete(c),e.dispose())}return{get:function(e){if(e&&e.isTexture){const f=e.mapping,g=303===f||304===f,h=301===f||302===f;if(g||h){if(e.isRenderTargetTexture&& !0===e.needsPMREMUpdate){e.needsPMREMUpdate=!1;let i=b.get(e);return null===c&&(c=new aN(a)),i=g?c.fromEquirectangular(e,i):c.fromCubemap(e,i),b.set(e,i),i.texture}if(b.has(e))return b.get(e).texture;{const j=e.image;if(!(g&&j&&j.height>0||h&&j&&function(a){let b=0;for(let c=0;c<6;c++)void 0!==a[c]&&b++;return 6===b}(j)))return null;{null===c&&(c=new aN(a));const k=g?c.fromEquirectangular(e):c.fromCubemap(e);return b.set(e,k),e.addEventListener("dispose",d),k.texture}}}}return e},dispose:function(){b=new WeakMap(),null!==c&&(c.dispose(),c=null)}}}function EO(a){const b={};function c(c){if(void 0!==b[c])return b[c];let d;switch(c){case"WEBGL_depth_texture":d=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:d=a.getExtension(c)}return b[c]=d,d}return{has:function(a){return null!==c(a)},init:function(a){a.isWebGL2?c("EXT_color_buffer_float"):(c("WEBGL_depth_texture"),c("OES_texture_float"),c("OES_texture_half_float"),c("OES_texture_half_float_linear"),c("OES_standard_derivatives"),c("OES_element_index_uint"),c("OES_vertex_array_object"),c("ANGLE_instanced_arrays")),c("OES_texture_float_linear"),c("EXT_color_buffer_half_float"),c("WEBGL_multisampled_render_to_texture")},get:function(a){const b=c(a);return null===b&&console.warn("THREE.WebGLRenderer: "+a+" extension not supported."),b}}}function FO(a,b,c,d){const e={},f=new WeakMap();function g(a){const h=a.target;for(const i in null!==h.index&&b.remove(h.index),h.attributes)b.remove(h.attributes[i]);h.removeEventListener("dispose",g),delete e[h.id];const j=f.get(h);j&&(b.remove(j),f.delete(h)),d.releaseStatesOfGeometry(h),!0===h.isInstancedBufferGeometry&&delete h._maxInstanceCount,c.memory.geometries--}function h(a){const c=[],d=a.index,e=a.attributes.position;let g=0;if(null!==d){const h=d.array;g=d.version;for(let i=0,j=h.length;i<j;i+=3){const k=h[i+0],l=h[i+1],m=h[i+2];c.push(k,l,l,m,m,k)}}else{const n=e.array;g=e.version;for(let o=0,p=n.length/3-1;o<p;o+=3){const q=o+0,r=o+1,s=o+2;c.push(q,r,r,s,s,q)}}const t=new(yd(c)?xC:tC)(c,1);t.version=g;const u=f.get(a);u&&b.remove(u),f.set(a,t)}return{get:function(a,b){return!0===e[b.id]||(b.addEventListener("dispose",g),e[b.id]=!0,c.memory.geometries++),b},update:function(a){const c=a.attributes;for(const d in c)b.update(c[d],34962);const e=a.morphAttributes;for(const f in e){const g=e[f];for(let h=0,i=g.length;h<i;h++)b.update(g[h],34962)}},getWireframeAttribute:function(a){const b=f.get(a);if(b){const c=a.index;null!==c&&b.version<c.version&&h(a)}else h(a);return f.get(a)}}}function GO(a,b,c,d){const e=d.isWebGL2;let f,g,h;this.setMode=function(a){f=a},this.setIndex=function(a){g=a.type,h=a.bytesPerElement},this.render=function(b,d){a.drawElements(f,d,g,b*h),c.update(d,f,1)},this.renderInstances=function(d,i,j){if(0===j)return;let k,l;if(e)k=a,l="drawElementsInstanced";else if(l="drawElementsInstancedANGLE",null===(k=b.get("ANGLE_instanced_arrays"))){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}k[l](f,i,g,d*h,j),c.update(i,f,j)}}function HO(a){const b={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:b,programs:null,autoReset:!0,reset:function(){b.frame++,b.calls=0,b.triangles=0,b.points=0,b.lines=0},update:function(a,c,d){switch(b.calls++,c){case 4:b.triangles+=d*(a/3);break;case 1:b.lines+=d*(a/2);break;case 3:b.lines+=d*(a-1);break;case 2:b.lines+=d*a;break;case 0:b.points+=d*a;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",c);break}}}}class IO extends gf{constructor(JO=null,KO=1,LO=1,MO=1){super(null),this.image={data:JO,width:KO,height:LO,depth:MO},this.magFilter=q,this.minFilter=q,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}function NO(a,b){return a[0]-b[0]}function OO(a,b){return Math.abs(b[1])-Math.abs(a[1])}function PO(a,b){let c=1;const d=b.isInterleavedBufferAttribute?b.data.array:b.array;d instanceof Int8Array?c=127:d instanceof Int16Array?c=32767:d instanceof Int32Array?c=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",d),a.divideScalar(c)}function QO(a,b,c){const d={},e=new Float32Array(8),f=new WeakMap(),g=new qk(),h=[];for(let i=0;i<8;i++)h[i]=[i,0];return{update:function(i,j,k,l){const m=i.morphTargetInfluences;if(!0===b.isWebGL2){const n=j.morphAttributes.position.length;let o=f.get(j);if(void 0===o||o.count!==n){void 0!==o&&o.texture.dispose();const p=void 0!==j.morphAttributes.normal,q=j.morphAttributes.position,r=j.morphAttributes.normal||[],t=j.attributes.position.count,u=!0===p?2:1;let v=t*u,w=1;v>b.maxTextureSize&&(w=Math.ceil(v/b.maxTextureSize),v=b.maxTextureSize);const x=new Float32Array(v*w*4*n),y=new IO(x,v,w,n);y.format=s,y.type=1015,y.needsUpdate=!0;const z=4*u;for(let A=0;A<n;A++){const B=q[A],C=r[A],D=v*w*4*A;for(let E=0;E<B.count;E++){g.fromBufferAttribute(B,E),!0===B.normalized&&PO(g,B);const F=E*z;x[D+F+0]=g.x,x[D+F+1]=g.y,x[D+F+2]=g.z,x[D+F+3]=0,!0===p&&(g.fromBufferAttribute(C,E),!0===C.normalized&&PO(g,C),x[D+F+4]=g.x,x[D+F+5]=g.y,x[D+F+6]=g.z,x[D+F+7]=0)}}function G(){y.dispose(),f.delete(j),j.removeEventListener("dispose",G)}o={count:n,texture:y,size:new ea(v,w)},f.set(j,o),j.addEventListener("dispose",G)}let H=0;for(let I=0;I<m.length;I++)H+=m[I];const J=j.morphTargetsRelative?1:1-H;l.getUniforms().setValue(a,"morphTargetBaseInfluence",J),l.getUniforms().setValue(a,"morphTargetInfluences",m),l.getUniforms().setValue(a,"morphTargetsTexture",o.texture,c),l.getUniforms().setValue(a,"morphTargetsTextureSize",o.size)}else{const K=void 0===m?0:m.length;let L=d[j.id];if(void 0===L||L.length!==K){L=[];for(let M=0;M<K;M++)L[M]=[M,0];d[j.id]=L}for(let N=0;N<K;N++){const O=L[N];O[0]=N,O[1]=m[N]}L.sort(OO);for(let P=0;P<8;P++)P<K&&L[P][1]?(h[P][0]=L[P][0],h[P][1]=L[P][1]):(h[P][0]=Number.MAX_SAFE_INTEGER,h[P][1]=0);h.sort(NO);const Q=j.morphAttributes.position,R=j.morphAttributes.normal;let S=0;for(let T=0;T<8;T++){const U=h[T],V=U[0],W=U[1];V!==Number.MAX_SAFE_INTEGER&&W?(Q&&j.getAttribute("morphTarget"+T)!==Q[V]&&j.setAttribute("morphTarget"+T,Q[V]),R&&j.getAttribute("morphNormal"+T)!==R[V]&&j.setAttribute("morphNormal"+T,R[V]),e[T]=W,S+=W):(Q&& !0===j.hasAttribute("morphTarget"+T)&&j.deleteAttribute("morphTarget"+T),R&& !0===j.hasAttribute("morphNormal"+T)&&j.deleteAttribute("morphNormal"+T),e[T]=0)}const X=j.morphTargetsRelative?1:1-S;l.getUniforms().setValue(a,"morphTargetBaseInfluence",X),l.getUniforms().setValue(a,"morphTargetInfluences",e)}}}}function RO(a,b,c,d){let e=new WeakMap();function f(a){const b=a.target;b.removeEventListener("dispose",f),c.remove(b.instanceMatrix),null!==b.instanceColor&&c.remove(b.instanceColor)}return{update:function(a){const g=d.render.frame,h=a.geometry,i=b.get(a,h);return e.get(i)!==g&&(b.update(i),e.set(i,g)),a.isInstancedMesh&&(!1===a.hasEventListener("dispose",f)&&a.addEventListener("dispose",f),c.update(a.instanceMatrix,34962),null!==a.instanceColor&&c.update(a.instanceColor,34962)),i},dispose:function(){e=new WeakMap()}}}IO.prototype.isDataTexture2DArray=!0;class SO extends gf{constructor(TO=null,UO=1,VO=1,WO=1){super(null),this.image={data:TO,width:UO,height:VO,depth:WO},this.magFilter=q,this.minFilter=q,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}SO.prototype.isDataTexture3D=!0;const XO=new gf(),YO=new IO(),ZO=new SO(),$O=new lJ(),_O=[],aP=[],bP=new Float32Array(16),cP=new Float32Array(9),dP=new Float32Array(4);function eP(a,b,c){const d=a[0];if(d<=0||d>0)return a;const e=b*c;let f=_O[e];if(void 0===f&&(f=new Float32Array(e),_O[e]=f),0!==b){d.toArray(f,0);for(let g=1,h=0;g!==b;++g)h+=c,a[g].toArray(f,h)}return f}function fP(a,b){if(a.length!==b.length)return!1;for(let c=0,d=a.length;c<d;c++)if(a[c]!==b[c])return!1;return!0}function gP(a,b){for(let c=0,d=b.length;c<d;c++)a[c]=b[c]}function hP(a,b){let c=aP[b];void 0===c&&(c=new Int32Array(b),aP[b]=c);for(let d=0;d!==b;++d)c[d]=a.allocateTextureUnit();return c}function iP(a,b){const c=this.cache;c[0]!==b&&(a.uniform1f(this.addr,b),c[0]=b)}function jP(a,b){const c=this.cache;if(void 0!==b.x)(c[0]!==b.x||c[1]!==b.y)&&(a.uniform2f(this.addr,b.x,b.y),c[0]=b.x,c[1]=b.y);else{if(fP(c,b))return;a.uniform2fv(this.addr,b),gP(c,b)}}function kP(a,b){const c=this.cache;if(void 0!==b.x)(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z)&&(a.uniform3f(this.addr,b.x,b.y,b.z),c[0]=b.x,c[1]=b.y,c[2]=b.z);else if(void 0!==b.r)(c[0]!==b.r||c[1]!==b.g||c[2]!==b.b)&&(a.uniform3f(this.addr,b.r,b.g,b.b),c[0]=b.r,c[1]=b.g,c[2]=b.b);else{if(fP(c,b))return;a.uniform3fv(this.addr,b),gP(c,b)}}function lP(a,b){const c=this.cache;if(void 0!==b.x)(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z||c[3]!==b.w)&&(a.uniform4f(this.addr,b.x,b.y,b.z,b.w),c[0]=b.x,c[1]=b.y,c[2]=b.z,c[3]=b.w);else{if(fP(c,b))return;a.uniform4fv(this.addr,b),gP(c,b)}}function mP(a,b){const c=this.cache,d=b.elements;if(void 0===d){if(fP(c,b))return;a.uniformMatrix2fv(this.addr,!1,b),gP(c,b)}else{if(fP(c,d))return;dP.set(d),a.uniformMatrix2fv(this.addr,!1,dP),gP(c,d)}}function nP(a,b){const c=this.cache,d=b.elements;if(void 0===d){if(fP(c,b))return;a.uniformMatrix3fv(this.addr,!1,b),gP(c,b)}else{if(fP(c,d))return;cP.set(d),a.uniformMatrix3fv(this.addr,!1,cP),gP(c,d)}}function oP(a,b){const c=this.cache,d=b.elements;if(void 0===d){if(fP(c,b))return;a.uniformMatrix4fv(this.addr,!1,b),gP(c,b)}else{if(fP(c,d))return;bP.set(d),a.uniformMatrix4fv(this.addr,!1,bP),gP(c,d)}}function pP(a,b){const c=this.cache;c[0]!==b&&(a.uniform1i(this.addr,b),c[0]=b)}function qP(a,b){const c=this.cache;fP(c,b)||(a.uniform2iv(this.addr,b),gP(c,b))}function rP(a,b){const c=this.cache;fP(c,b)||(a.uniform3iv(this.addr,b),gP(c,b))}function sP(a,b){const c=this.cache;fP(c,b)||(a.uniform4iv(this.addr,b),gP(c,b))}function tP(a,b){const c=this.cache;c[0]!==b&&(a.uniform1ui(this.addr,b),c[0]=b)}function uP(a,b){const c=this.cache;fP(c,b)||(a.uniform2uiv(this.addr,b),gP(c,b))}function vP(a,b){const c=this.cache;fP(c,b)||(a.uniform3uiv(this.addr,b),gP(c,b))}function wP(a,b){const c=this.cache;fP(c,b)||(a.uniform4uiv(this.addr,b),gP(c,b))}function xP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.safeSetTexture2D(b||XO,e)}function yP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.setTexture3D(b||ZO,e)}function zP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.safeSetTextureCube(b||$O,e)}function AP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.setTexture2DArray(b||YO,e)}function BP(a,b){a.uniform1fv(this.addr,b)}function CP(a,b){const c=eP(b,this.size,2);a.uniform2fv(this.addr,c)}function DP(a,b){const c=eP(b,this.size,3);a.uniform3fv(this.addr,c)}function EP(a,b){const c=eP(b,this.size,4);a.uniform4fv(this.addr,c)}function FP(a,b){const c=eP(b,this.size,4);a.uniformMatrix2fv(this.addr,!1,c)}function GP(a,b){const c=eP(b,this.size,9);a.uniformMatrix3fv(this.addr,!1,c)}function HP(a,b){const c=eP(b,this.size,16);a.uniformMatrix4fv(this.addr,!1,c)}function IP(a,b){a.uniform1iv(this.addr,b)}function JP(a,b){a.uniform2iv(this.addr,b)}function KP(a,b){a.uniform3iv(this.addr,b)}function LP(a,b){a.uniform4iv(this.addr,b)}function MP(a,b){a.uniform1uiv(this.addr,b)}function NP(a,b){a.uniform2uiv(this.addr,b)}function OP(a,b){a.uniform3uiv(this.addr,b)}function PP(a,b){a.uniform4uiv(this.addr,b)}function QP(a,b,c){const d=b.length,e=hP(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.safeSetTexture2D(b[f]||XO,e[f])}function RP(a,b,c){const d=b.length,e=hP(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.setTexture3D(b[f]||ZO,e[f])}function SP(a,b,c){const d=b.length,e=hP(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.safeSetTextureCube(b[f]||$O,e[f])}function TP(a,b,c){const d=b.length,e=hP(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.setTexture2DArray(b[f]||YO,e[f])}function UP(a,b,c){this.id=a,this.addr=c,this.cache=[],this.setValue=(function(a){switch(a){case 5126:return iP;case 35664:return jP;case 35665:return kP;case 35666:return lP;case 35674:return mP;case 35675:return nP;case 35676:return oP;case 5124:case 35670:return pP;case 35667:case 35671:return qP;case 35668:case 35672:return rP;case 35669:case 35673:return sP;case 5125:return tP;case 36294:return uP;case 36295:return vP;case 36296:return wP;case 35678:case 36198:case 36298:case 36306:case 35682:return xP;case 35679:case 36299:case 36307:return yP;case 35680:case 36300:case 36308:case 36293:return zP;case 36289:case 36303:case 36311:case 36292:return AP}})(b.type)}function VP(a,b,c){this.id=a,this.addr=c,this.cache=[],this.size=b.size,this.setValue=(function(a){switch(a){case 5126:return BP;case 35664:return CP;case 35665:return DP;case 35666:return EP;case 35674:return FP;case 35675:return GP;case 35676:return HP;case 5124:case 35670:return IP;case 35667:case 35671:return JP;case 35668:case 35672:return KP;case 35669:case 35673:return LP;case 5125:return MP;case 36294:return NP;case 36295:return OP;case 36296:return PP;case 35678:case 36198:case 36298:case 36306:case 35682:return QP;case 35679:case 36299:case 36307:return RP;case 35680:case 36300:case 36308:case 36293:return SP;case 36289:case 36303:case 36311:case 36292:return TP}})(b.type)}function WP(a){this.id=a,this.seq=[],this.map={}}VP.prototype.updateCache=function(a){const b=this.cache;a instanceof Float32Array&&b.length!==a.length&&(this.cache=new Float32Array(a.length)),gP(b,a)},WP.prototype.setValue=function(a,b,c){const d=this.seq;for(let e=0,f=d.length;e!==f;++e){const g=d[e];g.setValue(a,b[g.id],c)}};const XP=/(\w+)(\])?(\[|\.)?/g;function YP(a,b){a.seq.push(b),a.map[b.id]=b}function ZP(a,b,c){const d=a.name,e=d.length;for(XP.lastIndex=0;;){const f=XP.exec(d),g=XP.lastIndex;let h=f[1];const i="]"===f[2],j=f[3];if(i&&(h|=0),void 0===j||"["===j&&g+2===e){YP(c,void 0===j?new UP(h,a,b):new VP(h,a,b));break}{const k=c.map;let l=k[h];void 0===l&&YP(c,l=new WP(h)),c=l}}}function $P(a,b){this.seq=[],this.map={};const c=a.getProgramParameter(b,35718);for(let d=0;d<c;++d){const e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name);ZP(e,f,this)}}function _P(a,b,c){const d=a.createShader(b);return a.shaderSource(d,c),a.compileShader(d),d}$P.prototype.setValue=function(a,b,c,d){const e=this.map[b];void 0!==e&&e.setValue(a,c,d)},$P.prototype.setOptional=function(a,b,c){const d=b[c];void 0!==d&&this.setValue(a,c,d)},$P.upload=function(a,b,c,d){for(let e=0,f=b.length;e!==f;++e){const g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}},$P.seqWithValue=function(a,b){const c=[];for(let d=0,e=a.length;d!==e;++d){const f=a[d];f.id in b&&c.push(f)}return c};let aQ=0;function bQ(a,b,c){const d=a.getShaderParameter(b,35713),e=a.getShaderInfoLog(b).trim();return d&&""===e?"":c.toUpperCase()+"\n\n"+e+"\n\n"+(function(a){const b=a.split("\n");for(let c=0;c<b.length;c++)b[c]=c+1+": "+b[c];return b.join("\n")})(a.getShaderSource(b))}function cQ(a){return""!==a}function dQ(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,b.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,b.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,b.numPointLightShadows)}function eQ(a,b){return a.replace(/NUM_CLIPPING_PLANES/g,b.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,b.numClippingPlanes-b.numClipIntersection)}const fQ=/^[ \t]*#include +<([\w\d./]+)>/gm;function gQ(a){return a.replace(fQ,hQ)}function hQ(a,b){const c=fM[b];if(void 0===c)throw new Error("Can not resolve #include <"+b+">");return gQ(c)}const iQ=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,jQ=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function kQ(a){return a.replace(jQ,mQ).replace(iQ,lQ)}function lQ(a,b,c,d){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),mQ(a,b,c,d)}function mQ(a,b,c,d){let e="";for(let f=parseInt(b);f<parseInt(c);f++)e+=d.replace(/\[\s*i\s*\]/g,"[ "+f+" ]").replace(/UNROLLED_LOOP_INDEX/g,f);return e}function nQ(a){let b="precision "+a.precision+" float;\nprecision "+a.precision+" int;";return"highp"===a.precision?b+="\n#define HIGH_PRECISION":"mediump"===a.precision?b+="\n#define MEDIUM_PRECISION":"lowp"===a.precision&&(b+="\n#define LOW_PRECISION"),b}function oQ(a,b,c,d){var e;const g=a.getContext(),h=c.defines;let i=c.vertexShader,j=c.fragmentShader,k;const l=(k="SHADOWMAP_TYPE_BASIC",1===(e=c).shadowMapType?k="SHADOWMAP_TYPE_PCF":e.shadowMapType===f?k="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(k="SHADOWMAP_TYPE_VSM"),k),m=function(a){let b="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case 301:case 302:b="ENVMAP_TYPE_CUBE";break;case 306:case 307:b="ENVMAP_TYPE_CUBE_UV";break}return b}(c),p=function(a){let b="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case 302:case 307:b="ENVMAP_MODE_REFRACTION";break}return b}(c),q=function(a){let b="ENVMAP_BLENDING_NONE";if(a.envMap)switch(a.combine){case n:b="ENVMAP_BLENDING_MULTIPLY";break;case 1:b="ENVMAP_BLENDING_MIX";break;case o:b="ENVMAP_BLENDING_ADD";break}return b}(c),r=c.isWebGL2?"":function(a){const b=[a.extensionDerivatives||a.envMapCubeUV||a.bumpMap||a.tangentSpaceNormalMap||a.clearcoatNormalMap||a.flatShading||"physical"===a.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(a.extensionFragDepth||a.logarithmicDepthBuffer)&&a.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",a.extensionDrawBuffers&&a.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(a.extensionShaderTextureLOD||a.envMap||a.transmission)&&a.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return b.filter(cQ).join("\n")}(c),s=function(a){const b=[];for(const c in a){const d=a[c];!1!==d&&b.push("#define "+c+" "+d)}return b.join("\n")}(h),t=g.createProgram();let u,v,w=c.glslVersion?"#version "+c.glslVersion+"\n":"";c.isRawShaderMaterial?((u=[s].filter(cQ).join("\n")).length>0&&(u+="\n"),(v=[r,s].filter(cQ).join("\n")).length>0&&(v+="\n")):(u=[nQ(c),"#define SHADER_NAME "+c.shaderName,s,c.instancing?"#define USE_INSTANCING":"",c.instancingColor?"#define USE_INSTANCING_COLOR":"",c.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+c.maxBones,c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp2?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.envMap?"#define "+p:"",c.lightMap?"#define USE_LIGHTMAP":"",c.aoMap?"#define USE_AOMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.normalMap&&c.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",c.normalMap&&c.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",c.clearcoatMap?"#define USE_CLEARCOATMAP":"",c.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",c.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",c.displacementMap&&c.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",c.specularColorMap?"#define USE_SPECULARCOLORMAP":"",c.roughnessMap?"#define USE_ROUGHNESSMAP":"",c.metalnessMap?"#define USE_METALNESSMAP":"",c.alphaMap?"#define USE_ALPHAMAP":"",c.transmission?"#define USE_TRANSMISSION":"",c.transmissionMap?"#define USE_TRANSMISSIONMAP":"",c.thicknessMap?"#define USE_THICKNESSMAP":"",c.sheenColorMap?"#define USE_SHEENCOLORMAP":"",c.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",c.vertexTangents?"#define USE_TANGENT":"",c.vertexColors?"#define USE_COLOR":"",c.vertexAlphas?"#define USE_COLOR_ALPHA":"",c.vertexUvs?"#define USE_UV":"",c.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",c.flatShading?"#define FLAT_SHADED":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals&& !1===c.flatShading?"#define USE_MORPHNORMALS":"",c.morphTargets&&c.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",c.morphTargets&&c.isWebGL2?"#define MORPHTARGETS_COUNT "+c.morphTargetsCount:"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+l:"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"",c.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",c.logarithmicDepthBuffer&&c.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(cQ).join("\n"),v=[r,nQ(c),"#define SHADER_NAME "+c.shaderName,s,c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp2?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.matcap?"#define USE_MATCAP":"",c.envMap?"#define USE_ENVMAP":"",c.envMap?"#define "+m:"",c.envMap?"#define "+p:"",c.envMap?"#define "+q:"",c.lightMap?"#define USE_LIGHTMAP":"",c.aoMap?"#define USE_AOMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.normalMap&&c.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",c.normalMap&&c.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",c.clearcoat?"#define USE_CLEARCOAT":"",c.clearcoatMap?"#define USE_CLEARCOATMAP":"",c.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",c.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",c.specularColorMap?"#define USE_SPECULARCOLORMAP":"",c.roughnessMap?"#define USE_ROUGHNESSMAP":"",c.metalnessMap?"#define USE_METALNESSMAP":"",c.alphaMap?"#define USE_ALPHAMAP":"",c.alphaTest?"#define USE_ALPHATEST":"",c.sheen?"#define USE_SHEEN":"",c.sheenColorMap?"#define USE_SHEENCOLORMAP":"",c.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",c.transmission?"#define USE_TRANSMISSION":"",c.transmissionMap?"#define USE_TRANSMISSIONMAP":"",c.thicknessMap?"#define USE_THICKNESSMAP":"",c.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",c.vertexTangents?"#define USE_TANGENT":"",c.vertexColors||c.instancingColor?"#define USE_COLOR":"",c.vertexAlphas?"#define USE_COLOR_ALPHA":"",c.vertexUvs?"#define USE_UV":"",c.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",c.gradientMap?"#define USE_GRADIENTMAP":"",c.flatShading?"#define FLAT_SHADED":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+l:"",c.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",c.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",c.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",c.logarithmicDepthBuffer&&c.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(c.extensionShaderTextureLOD||c.envMap)&&c.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==c.toneMapping?"#define TONE_MAPPING":"",0!==c.toneMapping?fM.tonemapping_pars_fragment:"",0!==c.toneMapping?function(a,b){let c;switch(b){case 1:c="Linear";break;case 2:c="Reinhard";break;case 3:c="OptimizedCineon";break;case 4:c="ACESFilmic";break;case 5:c="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",b),c="Linear"}return"vec3 "+a+"( vec3 color ) { return "+c+"ToneMapping( color ); }"}("toneMapping",c.toneMapping):"",c.dithering?"#define DITHERING":"",c.transparent?"":"#define OPAQUE",fM.encodings_pars_fragment,function(a,b){const c=function(a){switch(a){case 3000:return["Linear","( value )"];case 3001:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",a),["Linear","( value )"]}}(b);return"vec4 "+a+"( vec4 value ) { return LinearTo"+c[0]+c[1]+"; }"}("linearToOutputTexel",c.outputEncoding),c.depthPacking?"#define DEPTH_PACKING "+c.depthPacking:"","\n"].filter(cQ).join("\n")),i=eQ(i=dQ(i=gQ(i),c),c),j=gQ(j),j=dQ(j,c),j=eQ(j,c),i=kQ(i),j=kQ(j),c.isWebGL2&& !0!==c.isRawShaderMaterial&&(w="#version 300 es\n",u="precision mediump sampler2DArray;\n#define attribute in\n#define varying out\n#define texture2D texture\n"+u,v=["#define varying in",c.glslVersion===B?"":"layout(location = 0) out highp vec4 pc_fragColor;",c.glslVersion===B?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+v);const x=_P(g,35633,w+u+i),y=_P(g,35632,w+v+j);if(g.attachShader(t,x),g.attachShader(t,y),void 0!==c.index0AttributeName?g.bindAttribLocation(t,0,c.index0AttributeName):!0===c.morphTargets&&g.bindAttribLocation(t,0,"position"),g.linkProgram(t),a.debug.checkShaderErrors){const z=g.getProgramInfoLog(t).trim(),A=g.getShaderInfoLog(x).trim(),C=g.getShaderInfoLog(y).trim();let D=!0,E=!0;if(!1===g.getProgramParameter(t,35714)){D=!1;const F=bQ(g,x,"vertex"),G=bQ(g,y,"fragment");console.error("THREE.WebGLProgram: Shader Error "+g.getError()+" - VALIDATE_STATUS "+g.getProgramParameter(t,35715)+"\n\nProgram Info Log: "+z+"\n"+F+"\n"+G)}else""!==z?console.warn("THREE.WebGLProgram: Program Info Log:",z):(""===A||""===C)&&(E=!1);E&&(this.diagnostics={runnable:D,programLog:z,vertexShader:{log:A,prefix:u},fragmentShader:{log:C,prefix:v}})}g.deleteShader(x),g.deleteShader(y);let H;this.getUniforms=function(){return void 0===H&&(H=new $P(g,t)),H};let I;return this.getAttributes=function(){return void 0===I&&(I=(function(a,b){const c={},d=a.getProgramParameter(b,35721);for(let e=0;e<d;e++){const f=a.getActiveAttrib(b,e),g=f.name;let h=1;35674===f.type&&(h=2),35675===f.type&&(h=3),35676===f.type&&(h=4),c[g]={type:f.type,location:a.getAttribLocation(b,g),locationSize:h}}return c})(g,t)),I},this.destroy=function(){d.releaseStatesOfProgram(this),g.deleteProgram(t),this.program=void 0},this.name=c.shaderName,this.id=aQ++,this.cacheKey=b,this.usedTimes=1,this.program=t,this.vertexShader=x,this.fragmentShader=y,this}let pQ=0;class qQ{constructor(){this.shaderCache=new Map(),this.materialCache=new Map()}update(rQ){const sQ=rQ.vertexShader,tQ=rQ.fragmentShader,uQ=this._getShaderStage(sQ),vQ=this._getShaderStage(tQ),wQ=this._getShaderCacheForMaterial(rQ);return!1===wQ.has(uQ)&&(wQ.add(uQ),uQ.usedTimes++),!1===wQ.has(vQ)&&(wQ.add(vQ),vQ.usedTimes++),this}remove(xQ){const yQ=this.materialCache.get(xQ);for(const zQ of yQ)zQ.usedTimes--,0===zQ.usedTimes&&this.shaderCache.delete(zQ);return this.materialCache.delete(xQ),this}getVertexShaderID(AQ){return this._getShaderStage(AQ.vertexShader).id}getFragmentShaderID(BQ){return this._getShaderStage(BQ.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(CQ){const DQ=this.materialCache;return!1===DQ.has(CQ)&&DQ.set(CQ,new Set()),DQ.get(CQ)}_getShaderStage(EQ){const FQ=this.shaderCache;if(!1===FQ.has(EQ)){const GQ=new HQ();FQ.set(EQ,GQ)}return FQ.get(EQ)}}class HQ{constructor(){this.id=pQ++,this.usedTimes=0}}function IQ(a,b,c,d,e,f,g){const j=new Bw(),k=new qQ(),l=[],m=e.isWebGL2,n=e.logarithmicDepthBuffer,o=e.floatVertexTextures,p=e.maxVertexUniforms,q=e.vertexTextures;let r=e.precision;const s={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(f,j,l,t,u){const v=t.fog,w=f.isMeshStandardMaterial?t.environment:null,x=(f.isMeshStandardMaterial?c:b).get(f.envMap||w),y=s[f.type],z=u.isSkinnedMesh?function(a){const b=a.skeleton,c=b.bones;if(o)return 1024;{const d=p,e=Math.floor((d-20)/4),f=Math.min(e,c.length);return f<c.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+c.length+" bones. This GPU supports "+f+"."),0):f}}(u):0;null!==f.precision&&(r=e.getMaxPrecision(f.precision))!==f.precision&&console.warn("THREE.WebGLProgram.getParameters:",f.precision,"not supported, using",r,"instead.");let B,C,D,E;if(y){const F=hM[y];B=F.vertexShader,C=F.fragmentShader}else B=f.vertexShader,C=f.fragmentShader,k.update(f),D=k.getVertexShaderID(f),E=k.getFragmentShaderID(f);const G=a.getRenderTarget(),H=f.alphaTest>0,I=f.clearcoat>0,J={isWebGL2:m,shaderID:y,shaderName:f.type,vertexShader:B,fragmentShader:C,defines:f.defines,customVertexShaderID:D,customFragmentShaderID:E,isRawShaderMaterial:!0===f.isRawShaderMaterial,glslVersion:f.glslVersion,precision:r,instancing:!0===u.isInstancedMesh,instancingColor:!0===u.isInstancedMesh&&null!==u.instanceColor,supportsVertexTextures:q,outputEncoding:null===G?a.outputEncoding:!0===G.isXRRenderTarget?G.texture.encoding:3000,map:!!f.map,matcap:!!f.matcap,envMap:!!x,envMapMode:x&&x.mapping,envMapCubeUV:!!x&&(306===x.mapping||307===x.mapping),lightMap:!!f.lightMap,aoMap:!!f.aoMap,emissiveMap:!!f.emissiveMap,bumpMap:!!f.bumpMap,normalMap:!!f.normalMap,objectSpaceNormalMap:1===f.normalMapType,tangentSpaceNormalMap:f.normalMapType===A,decodeVideoTexture:!!f.map&& !0===f.map.isVideoTexture&&3001===f.map.encoding,clearcoat:I,clearcoatMap:I&&!!f.clearcoatMap,clearcoatRoughnessMap:I&&!!f.clearcoatRoughnessMap,clearcoatNormalMap:I&&!!f.clearcoatNormalMap,displacementMap:!!f.displacementMap,roughnessMap:!!f.roughnessMap,metalnessMap:!!f.metalnessMap,specularMap:!!f.specularMap,specularIntensityMap:!!f.specularIntensityMap,specularColorMap:!!f.specularColorMap,transparent:f.transparent,alphaMap:!!f.alphaMap,alphaTest:H,gradientMap:!!f.gradientMap,sheen:f.sheen>0,sheenColorMap:!!f.sheenColorMap,sheenRoughnessMap:!!f.sheenRoughnessMap,transmission:f.transmission>0,transmissionMap:!!f.transmissionMap,thicknessMap:!!f.thicknessMap,combine:f.combine,vertexTangents:!!f.normalMap&&!!u.geometry&&!!u.geometry.attributes.tangent,vertexColors:f.vertexColors,vertexAlphas:!0===f.vertexColors&&!!u.geometry&&!!u.geometry.attributes.color&&4===u.geometry.attributes.color.itemSize,vertexUvs:!!f.map||!!f.bumpMap||!!f.normalMap||!!f.specularMap||!!f.alphaMap||!!f.emissiveMap||!!f.roughnessMap||!!f.metalnessMap||!!f.clearcoatMap||!!f.clearcoatRoughnessMap||!!f.clearcoatNormalMap||!!f.displacementMap||!!f.transmissionMap||!!f.thicknessMap||!!f.specularIntensityMap||!!f.specularColorMap||!!f.sheenColorMap||!!f.sheenRoughnessMap,uvsVertexOnly:!(f.map||f.bumpMap||f.normalMap||f.specularMap||f.alphaMap||f.emissiveMap||f.roughnessMap||f.metalnessMap||f.clearcoatNormalMap||f.transmission>0||f.transmissionMap||f.thicknessMap||f.specularIntensityMap||f.specularColorMap||f.sheen>0||f.sheenColorMap||f.sheenRoughnessMap)&&!!f.displacementMap,fog:!!v,useFog:f.fog,fogExp2:v&&v.isFogExp2,flatShading:!!f.flatShading,sizeAttenuation:f.sizeAttenuation,logarithmicDepthBuffer:n,skinning:!0===u.isSkinnedMesh&&z>0,maxBones:z,useVertexTexture:o,morphTargets:!!u.geometry&&!!u.geometry.morphAttributes.position,morphNormals:!!u.geometry&&!!u.geometry.morphAttributes.normal,morphTargetsCount:u.geometry&&u.geometry.morphAttributes.position?u.geometry.morphAttributes.position.length:0,numDirLights:j.directional.length,numPointLights:j.point.length,numSpotLights:j.spot.length,numRectAreaLights:j.rectArea.length,numHemiLights:j.hemi.length,numDirLightShadows:j.directionalShadowMap.length,numPointLightShadows:j.pointShadowMap.length,numSpotLightShadows:j.spotShadowMap.length,numClippingPlanes:g.numPlanes,numClipIntersection:g.numIntersection,dithering:f.dithering,shadowMapEnabled:a.shadowMap.enabled&&l.length>0,shadowMapType:a.shadowMap.type,toneMapping:f.toneMapped?a.toneMapping:0,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:f.premultipliedAlpha,doubleSided:f.side===i,flipSided:f.side===h,depthPacking:void 0!==f.depthPacking&&f.depthPacking,index0AttributeName:f.index0AttributeName,extensionDerivatives:f.extensions&&f.extensions.derivatives,extensionFragDepth:f.extensions&&f.extensions.fragDepth,extensionDrawBuffers:f.extensions&&f.extensions.drawBuffers,extensionShaderTextureLOD:f.extensions&&f.extensions.shaderTextureLOD,rendererExtensionFragDepth:m||d.has("EXT_frag_depth"),rendererExtensionDrawBuffers:m||d.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:m||d.has("EXT_shader_texture_lod"),customProgramCacheKey:f.customProgramCacheKey()};return J},getProgramCacheKey:function(b){var c,d,e,f;const g=[];if(b.shaderID?g.push(b.shaderID):(g.push(b.customVertexShaderID),g.push(b.customFragmentShaderID)),void 0!==b.defines)for(const h in b.defines)g.push(h),g.push(b.defines[h]);return!1===b.isRawShaderMaterial&&(c=g,d=b,c.push(d.precision),c.push(d.outputEncoding),c.push(d.envMapMode),c.push(d.combine),c.push(d.vertexUvs),c.push(d.fogExp2),c.push(d.sizeAttenuation),c.push(d.maxBones),c.push(d.morphTargetsCount),c.push(d.numDirLights),c.push(d.numPointLights),c.push(d.numSpotLights),c.push(d.numHemiLights),c.push(d.numRectAreaLights),c.push(d.numDirLightShadows),c.push(d.numPointLightShadows),c.push(d.numSpotLightShadows),c.push(d.shadowMapType),c.push(d.toneMapping),c.push(d.numClippingPlanes),c.push(d.numClipIntersection),e=g,f=b,j.disableAll(),f.isWebGL2&&j.enable(0),f.supportsVertexTextures&&j.enable(1),f.instancing&&j.enable(2),f.instancingColor&&j.enable(3),f.map&&j.enable(4),f.matcap&&j.enable(5),f.envMap&&j.enable(6),f.envMapCubeUV&&j.enable(7),f.lightMap&&j.enable(8),f.aoMap&&j.enable(9),f.emissiveMap&&j.enable(10),f.bumpMap&&j.enable(11),f.normalMap&&j.enable(12),f.objectSpaceNormalMap&&j.enable(13),f.tangentSpaceNormalMap&&j.enable(14),f.clearcoat&&j.enable(15),f.clearcoatMap&&j.enable(16),f.clearcoatRoughnessMap&&j.enable(17),f.clearcoatNormalMap&&j.enable(18),f.displacementMap&&j.enable(19),f.specularMap&&j.enable(20),f.roughnessMap&&j.enable(21),f.metalnessMap&&j.enable(22),f.gradientMap&&j.enable(23),f.alphaMap&&j.enable(24),f.alphaTest&&j.enable(25),f.vertexColors&&j.enable(26),f.vertexAlphas&&j.enable(27),f.vertexUvs&&j.enable(28),f.vertexTangents&&j.enable(29),f.uvsVertexOnly&&j.enable(30),f.fog&&j.enable(31),e.push(j.mask),j.disableAll(),f.useFog&&j.enable(0),f.flatShading&&j.enable(1),f.logarithmicDepthBuffer&&j.enable(2),f.skinning&&j.enable(3),f.useVertexTexture&&j.enable(4),f.morphTargets&&j.enable(5),f.morphNormals&&j.enable(6),f.premultipliedAlpha&&j.enable(7),f.shadowMapEnabled&&j.enable(8),f.physicallyCorrectLights&&j.enable(9),f.doubleSided&&j.enable(10),f.flipSided&&j.enable(11),f.depthPacking&&j.enable(12),f.dithering&&j.enable(13),f.specularIntensityMap&&j.enable(14),f.specularColorMap&&j.enable(15),f.transmission&&j.enable(16),f.transmissionMap&&j.enable(17),f.thicknessMap&&j.enable(18),f.sheen&&j.enable(19),f.sheenColorMap&&j.enable(20),f.sheenRoughnessMap&&j.enable(21),f.decodeVideoTexture&&j.enable(22),f.transparent&&j.enable(23),e.push(j.mask),g.push(a.outputEncoding)),g.push(b.customProgramCacheKey),g.join()},getUniforms:function(a){const b=s[a.type];let c;if(b){const d=hM[b];c=ZH.clone(d.uniforms)}else c=a.uniforms;return c},acquireProgram:function(b,c){let d;for(let e=0,g=l.length;e<g;e++){const h=l[e];if(h.cacheKey===c){d=h,++d.usedTimes;break}}return void 0===d&&(d=new oQ(a,c,b,f),l.push(d)),d},releaseProgram:function(a){if(0== --a.usedTimes){const b=l.indexOf(a);l[b]=l[l.length-1],l.pop(),a.destroy()}},releaseShaderCache:function(a){k.remove(a)},programs:l,dispose:function(){k.dispose()}}}function JQ(){let a=new WeakMap();return{get:function(b){let c=a.get(b);return void 0===c&&(c={},a.set(b,c)),c},remove:function(b){a.delete(b)},update:function(b,c,d){a.get(b)[c]=d},dispose:function(){a=new WeakMap()}}}function KQ(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function LQ(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function MQ(){const a=[];let b=0;const c=[],d=[],e=[];function f(c,d,e,f,g,h){let i=a[b];return void 0===i?(i={id:c.id,object:c,geometry:d,material:e,groupOrder:f,renderOrder:c.renderOrder,z:g,group:h},a[b]=i):(i.id=c.id,i.object=c,i.geometry=d,i.material=e,i.groupOrder=f,i.renderOrder=c.renderOrder,i.z=g,i.group=h),b++,i}return{opaque:c,transmissive:d,transparent:e,init:function(){b=0,c.length=0,d.length=0,e.length=0},push:function(a,b,g,h,i,j){const k=f(a,b,g,h,i,j);g.transmission>0?d.push(k):!0===g.transparent?e.push(k):c.push(k)},unshift:function(a,b,g,h,i,j){const k=f(a,b,g,h,i,j);g.transmission>0?d.unshift(k):!0===g.transparent?e.unshift(k):c.unshift(k)},finish:function(){for(let c=b,d=a.length;c<d;c++){const e=a[c];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(a,b){c.length>1&&c.sort(a||KQ),d.length>1&&d.sort(b||LQ),e.length>1&&e.sort(b||LQ)}}}function NQ(){let a=new WeakMap();return{get:function(b,c){let d;return!1===a.has(b)?(d=new MQ(),a.set(b,[d])):c>=a.get(b).length?(d=new MQ(),a.get(b).push(d)):d=a.get(b)[c],d},dispose:function(){a=new WeakMap()}}}function OQ(){const a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];let c;switch(b.type){case"DirectionalLight":c={direction:new qk(),color:new Gd()};break;case"SpotLight":c={position:new qk(),direction:new qk(),color:new Gd(),distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":c={position:new qk(),color:new Gd(),distance:0,decay:0};break;case"HemisphereLight":c={direction:new qk(),skyColor:new Gd(),groundColor:new Gd()};break;case"RectAreaLight":c={color:new Gd(),position:new qk(),halfWidth:new qk(),halfHeight:new qk()};break}return a[b.id]=c,c}}}let PQ=0;function QQ(a,b){return(b.castShadow?1:0)-(a.castShadow?1:0)}function RQ(a,b){const c=new OQ(),d=function(){const a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];let c;switch(b.type){case"DirectionalLight":c={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ea()};break;case"SpotLight":c={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ea()};break;case"PointLight":c={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ea(),shadowCameraNear:1,shadowCameraFar:1000};break}return a[b.id]=c,c}}}(),e={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let f=0;f<9;f++)e.probe.push(new qk());const g=new qk(),h=new Kq(),i=new Kq();return{setup:function(f,g){let h=0,i=0,j=0;for(let k=0;k<9;k++)e.probe[k].set(0,0,0);let l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f.sort(QQ);const t=!0!==g?Math.PI:1;for(let u=0,v=f.length;u<v;u++){const w=f[u],x=w.color,y=w.intensity,z=w.distance,A=w.shadow&&w.shadow.map?w.shadow.map.texture:null;if(w.isAmbientLight)h+=x.r*y*t,i+=x.g*y*t,j+=x.b*y*t;else if(w.isLightProbe)for(let B=0;B<9;B++)e.probe[B].addScaledVector(w.sh.coefficients[B],y);else if(w.isDirectionalLight){const C=c.get(w);if(C.color.copy(w.color).multiplyScalar(w.intensity*t),w.castShadow){const D=w.shadow,E=d.get(w);E.shadowBias=D.bias,E.shadowNormalBias=D.normalBias,E.shadowRadius=D.radius,E.shadowMapSize=D.mapSize,e.directionalShadow[l]=E,e.directionalShadowMap[l]=A,e.directionalShadowMatrix[l]=w.shadow.matrix,q++}e.directional[l]=C,l++}else if(w.isSpotLight){const F=c.get(w);if(F.position.setFromMatrixPosition(w.matrixWorld),F.color.copy(x).multiplyScalar(y*t),F.distance=z,F.coneCos=Math.cos(w.angle),F.penumbraCos=Math.cos(w.angle*(1-w.penumbra)),F.decay=w.decay,w.castShadow){const G=w.shadow,H=d.get(w);H.shadowBias=G.bias,H.shadowNormalBias=G.normalBias,H.shadowRadius=G.radius,H.shadowMapSize=G.mapSize,e.spotShadow[n]=H,e.spotShadowMap[n]=A,e.spotShadowMatrix[n]=w.shadow.matrix,s++}e.spot[n]=F,n++}else if(w.isRectAreaLight){const I=c.get(w);I.color.copy(x).multiplyScalar(y),I.halfWidth.set(0.5*w.width,0,0),I.halfHeight.set(0,0.5*w.height,0),e.rectArea[o]=I,o++}else if(w.isPointLight){const J=c.get(w);if(J.color.copy(w.color).multiplyScalar(w.intensity*t),J.distance=w.distance,J.decay=w.decay,w.castShadow){const K=w.shadow,L=d.get(w);L.shadowBias=K.bias,L.shadowNormalBias=K.normalBias,L.shadowRadius=K.radius,L.shadowMapSize=K.mapSize,L.shadowCameraNear=K.camera.near,L.shadowCameraFar=K.camera.far,e.pointShadow[m]=L,e.pointShadowMap[m]=A,e.pointShadowMatrix[m]=w.shadow.matrix,r++}e.point[m]=J,m++}else if(w.isHemisphereLight){const M=c.get(w);M.skyColor.copy(w.color).multiplyScalar(y*t),M.groundColor.copy(w.groundColor).multiplyScalar(y*t),e.hemi[p]=M,p++}}o>0&&(b.isWebGL2?(e.rectAreaLTC1=gM.LTC_FLOAT_1,e.rectAreaLTC2=gM.LTC_FLOAT_2):!0===a.has("OES_texture_float_linear")?(e.rectAreaLTC1=gM.LTC_FLOAT_1,e.rectAreaLTC2=gM.LTC_FLOAT_2):!0===a.has("OES_texture_half_float_linear")?(e.rectAreaLTC1=gM.LTC_HALF_1,e.rectAreaLTC2=gM.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),e.ambient[0]=h,e.ambient[1]=i,e.ambient[2]=j;const N=e.hash;(N.directionalLength!==l||N.pointLength!==m||N.spotLength!==n||N.rectAreaLength!==o||N.hemiLength!==p||N.numDirectionalShadows!==q||N.numPointShadows!==r||N.numSpotShadows!==s)&&(e.directional.length=l,e.spot.length=n,e.rectArea.length=o,e.point.length=m,e.hemi.length=p,e.directionalShadow.length=q,e.directionalShadowMap.length=q,e.pointShadow.length=r,e.pointShadowMap.length=r,e.spotShadow.length=s,e.spotShadowMap.length=s,e.directionalShadowMatrix.length=q,e.pointShadowMatrix.length=r,e.spotShadowMatrix.length=s,N.directionalLength=l,N.pointLength=m,N.spotLength=n,N.rectAreaLength=o,N.hemiLength=p,N.numDirectionalShadows=q,N.numPointShadows=r,N.numSpotShadows=s,e.version=PQ++)},setupView:function(a,b){let c=0,d=0,f=0,j=0,k=0;const l=b.matrixWorldInverse;for(let m=0,n=a.length;m<n;m++){const o=a[m];if(o.isDirectionalLight){const p=e.directional[c];p.direction.setFromMatrixPosition(o.matrixWorld),g.setFromMatrixPosition(o.target.matrixWorld),p.direction.sub(g),p.direction.transformDirection(l),c++}else if(o.isSpotLight){const q=e.spot[f];q.position.setFromMatrixPosition(o.matrixWorld),q.position.applyMatrix4(l),q.direction.setFromMatrixPosition(o.matrixWorld),g.setFromMatrixPosition(o.target.matrixWorld),q.direction.sub(g),q.direction.transformDirection(l),f++}else if(o.isRectAreaLight){const r=e.rectArea[j];r.position.setFromMatrixPosition(o.matrixWorld),r.position.applyMatrix4(l),i.identity(),h.copy(o.matrixWorld),h.premultiply(l),i.extractRotation(h),r.halfWidth.set(0.5*o.width,0,0),r.halfHeight.set(0,0.5*o.height,0),r.halfWidth.applyMatrix4(i),r.halfHeight.applyMatrix4(i),j++}else if(o.isPointLight){const s=e.point[d];s.position.setFromMatrixPosition(o.matrixWorld),s.position.applyMatrix4(l),d++}else if(o.isHemisphereLight){const t=e.hemi[k];t.direction.setFromMatrixPosition(o.matrixWorld),t.direction.transformDirection(l),t.direction.normalize(),k++}}},state:e}}function SQ(a,b){const c=new RQ(a,b),d=[],e=[];return{init:function(){d.length=0,e.length=0},state:{lightsArray:d,shadowsArray:e,lights:c},setupLights:function(a){c.setup(d,a)},setupLightsView:function(a){c.setupView(d,a)},pushLight:function(a){d.push(a)},pushShadow:function(a){e.push(a)}}}function TQ(a,b){let c=new WeakMap();return{get:function(d,e=0){let f;return!1===c.has(d)?(f=new SQ(a,b),c.set(d,[f])):e>=c.get(d).length?(f=new SQ(a,b),c.get(d).push(f)):f=c.get(d)[e],f},dispose:function(){c=new WeakMap()}}}class UQ extends zA{constructor(VQ){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(VQ)}copy(WQ){return super.copy(WQ),this.depthPacking=WQ.depthPacking,this.map=WQ.map,this.alphaMap=WQ.alphaMap,this.displacementMap=WQ.displacementMap,this.displacementScale=WQ.displacementScale,this.displacementBias=WQ.displacementBias,this.wireframe=WQ.wireframe,this.wireframeLinewidth=WQ.wireframeLinewidth,this}}UQ.prototype.isMeshDepthMaterial=!0;class XQ extends zA{constructor(YQ){super(),this.type="MeshDistanceMaterial",this.referencePosition=new qk(),this.nearDistance=1,this.farDistance=1000,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(YQ)}copy(ZQ){return super.copy(ZQ),this.referencePosition.copy(ZQ.referencePosition),this.nearDistance=ZQ.nearDistance,this.farDistance=ZQ.farDistance,this.map=ZQ.map,this.alphaMap=ZQ.alphaMap,this.displacementMap=ZQ.displacementMap,this.displacementScale=ZQ.displacementScale,this.displacementBias=ZQ.displacementBias,this}}function $Q(a,b,c){let d=new FK();const e=new ea(),f=new ea(),j=new Df(),k=new UQ({depthPacking:3201}),l=new XQ(),m={},n=c.maxTextureSize,o={0:h,1:g,2:i},p=new $H({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ea()},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),r=p.clone();r.defines.HORIZONTAL_PASS=1;const t=new PC();t.setAttribute("position",new WA(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));const u=new yG(t,p),v=this;function w(c,d){const e=b.update(u);p.defines.VSM_SAMPLES!==c.blurSamples&&(p.defines.VSM_SAMPLES=c.blurSamples,r.defines.VSM_SAMPLES=c.blurSamples,p.needsUpdate=!0,r.needsUpdate=!0),p.uniforms.shadow_pass.value=c.map.texture,p.uniforms.resolution.value=c.mapSize,p.uniforms.radius.value=c.radius,a.setRenderTarget(c.mapPass),a.clear(),a.renderBufferDirect(d,null,e,p,u,null),r.uniforms.shadow_pass.value=c.mapPass.texture,r.uniforms.resolution.value=c.mapSize,r.uniforms.radius.value=c.radius,a.setRenderTarget(c.map),a.clear(),a.renderBufferDirect(d,null,e,r,u,null)}function x(b,c,d,e,f,g,h){let i=null;const j=!0===e.isPointLight?b.customDistanceMaterial:b.customDepthMaterial;if(i=void 0!==j?j:!0===e.isPointLight?l:k,a.localClippingEnabled&& !0===d.clipShadows&&0!==d.clippingPlanes.length||d.displacementMap&&0!==d.displacementScale||d.alphaMap&&d.alphaTest>0){const n=i.uuid,p=d.uuid;let q=m[n];void 0===q&&(q={},m[n]=q);let r=q[p];void 0===r&&(r=i.clone(),q[p]=r),i=r}return i.visible=d.visible,i.wireframe=d.wireframe,3===h?i.side=null!==d.shadowSide?d.shadowSide:d.side:i.side=null!==d.shadowSide?d.shadowSide:o[d.side],i.alphaMap=d.alphaMap,i.alphaTest=d.alphaTest,i.clipShadows=d.clipShadows,i.clippingPlanes=d.clippingPlanes,i.clipIntersection=d.clipIntersection,i.displacementMap=d.displacementMap,i.displacementScale=d.displacementScale,i.displacementBias=d.displacementBias,i.wireframeLinewidth=d.wireframeLinewidth,i.linewidth=d.linewidth,!0===e.isPointLight&& !0===i.isMeshDistanceMaterial&&(i.referencePosition.setFromMatrixPosition(e.matrixWorld),i.nearDistance=f,i.farDistance=g),i}function y(c,e,f,g,h){if(!1===c.visible)return;const i=c.layers.test(e.layers);if(i&&(c.isMesh||c.isLine||c.isPoints)&&(c.castShadow||c.receiveShadow&&3===h)&&(!c.frustumCulled||d.intersectsObject(c))){c.modelViewMatrix.multiplyMatrices(f.matrixWorldInverse,c.matrixWorld);const j=b.update(c),k=c.material;if(Array.isArray(k)){const l=j.groups;for(let m=0,n=l.length;m<n;m++){const o=l[m],p=k[o.materialIndex];if(p&&p.visible){const q=x(c,j,p,g,f.near,f.far,h);a.renderBufferDirect(f,null,j,q,c,o)}}}else if(k.visible){const r=x(c,j,k,g,f.near,f.far,h);a.renderBufferDirect(f,null,j,r,c,null)}}const s=c.children;for(let t=0,u=s.length;t<u;t++)y(s[t],e,f,g,h)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(b,c,g){if(!1===v.enabled)return;if(!1===v.autoUpdate&& !1===v.needsUpdate)return;if(0===b.length)return;const h=a.getRenderTarget(),i=a.getActiveCubeFace(),k=a.getActiveMipmapLevel(),l=a.state;l.setBlending(0),l.buffers.color.setClear(1,1,1,1),l.buffers.depth.setTest(!0),l.setScissorTest(!1);for(let m=0,o=b.length;m<o;m++){const p=b[m],r=p.shadow;if(void 0===r){console.warn("THREE.WebGLShadowMap:",p,"has no shadow.");continue}if(!1===r.autoUpdate&& !1===r.needsUpdate)continue;e.copy(r.mapSize);const t=r.getFrameExtents();if(e.multiply(t),f.copy(r.mapSize),(e.x>n||e.y>n)&&(e.x>n&&(f.x=Math.floor(n/t.x),e.x=f.x*t.x,r.mapSize.x=f.x),e.y>n&&(f.y=Math.floor(n/t.y),e.y=f.y*t.y,r.mapSize.y=f.y)),null===r.map&&!r.isPointLightShadow&&3===this.type){const u={minFilter:1006,magFilter:1006,format:s};r.map=new kh(e.x,e.y,u),r.map.texture.name=p.name+".shadowMap",r.mapPass=new kh(e.x,e.y,u),r.camera.updateProjectionMatrix()}if(null===r.map){const x={minFilter:q,magFilter:q,format:s};r.map=new kh(e.x,e.y,x),r.map.texture.name=p.name+".shadowMap",r.camera.updateProjectionMatrix()}a.setRenderTarget(r.map),a.clear();const z=r.getViewportCount();for(let A=0;A<z;A++){const B=r.getViewport(A);j.set(f.x*B.x,f.y*B.y,f.x*B.z,f.y*B.w),l.viewport(j),r.updateMatrices(p,A),d=r.getFrustum(),y(c,g,r.camera,p,this.type)}r.isPointLightShadow||3!==this.type||w(r,g),r.needsUpdate=!1}v.needsUpdate=!1,a.setRenderTarget(h,i,k)}}function _Q(a,b,c){const d=c.isWebGL2,e=new function(){let b=!1;const c=new Df();let d=null;const e=new Df(0,0,0,0);return{setMask:function(c){d===c||b||(a.colorMask(c,c,c,c),d=c)},setLocked:function(a){b=a},setClear:function(b,d,f,g,h){!0===h&&(b*=g,d*=g,f*=g),c.set(b,d,f,g),!1===e.equals(c)&&(a.clearColor(b,d,f,g),e.copy(c))},reset:function(){b=!1,d=null,e.set(-1,0,0,0)}}}(),f=new function(){let b=!1,c=null,d=null,e=null;return{setTest:function(a){a?R(2929):S(2929)},setMask:function(d){c===d||b||(a.depthMask(d),c=d)},setFunc:function(b){if(d!==b){if(b)switch(b){case 0:a.depthFunc(512);break;case 1:a.depthFunc(519);break;case 2:a.depthFunc(513);break;case 3:a.depthFunc(515);break;case 4:a.depthFunc(514);break;case 5:a.depthFunc(518);break;case 6:a.depthFunc(516);break;case 7:a.depthFunc(517);break;default:a.depthFunc(515)}else a.depthFunc(515);d=b}},setLocked:function(a){b=a},setClear:function(b){e!==b&&(a.clearDepth(b),e=b)},reset:function(){b=!1,c=null,d=null,e=null}}}(),g=new function(){let b=!1,c=null,d=null,e=null,f=null,g=null,h=null,i=null,j=null;return{setTest:function(a){b||(a?R(2960):S(2960))},setMask:function(d){c===d||b||(a.stencilMask(d),c=d)},setFunc:function(b,c,g){(d!==b||e!==c||f!==g)&&(a.stencilFunc(b,c,g),d=b,e=c,f=g)},setOp:function(b,c,d){(g!==b||h!==c||i!==d)&&(a.stencilOp(b,c,d),g=b,h=c,i=d)},setLocked:function(a){b=a},setClear:function(b){j!==b&&(a.clearStencil(b),j=b)},reset:function(){b=!1,c=null,d=null,e=null,f=null,g=null,h=null,i=null,j=null}}}();let n={},o={},p=new WeakMap(),q=[],r=null,s=!1,t=null,u=null,v=null,w=null,x=null,y=null,z=null,A=!1,B=null,C=null,D=null,E=null,F=null;const G=a.getParameter(35661);let H=!1;const I=a.getParameter(7938);-1!==I.indexOf("WebGL")?H=parseFloat(/^WebGL (\d)/.exec(I)[1])>=1:-1!==I.indexOf("OpenGL ES")&&(H=parseFloat(/^OpenGL ES (\d)/.exec(I)[1])>=2);let J=null,K={};const L=a.getParameter(3088),M=a.getParameter(2978),N=new Df().fromArray(L),O=new Df().fromArray(M);function P(b,c,d){const e=new Uint8Array(4),f=a.createTexture();a.bindTexture(b,f),a.texParameteri(b,10241,9728),a.texParameteri(b,10240,9728);for(let g=0;g<d;g++)a.texImage2D(c+g,0,6408,1,1,0,6408,5121,e);return f}const Q={};function R(b){!0!==n[b]&&(a.enable(b),n[b]=!0)}function S(b){!1!==n[b]&&(a.disable(b),n[b]=!1)}Q[3553]=P(3553,3553,1),Q[34067]=P(34067,34069,6),e.setClear(0,0,0,1),f.setClear(1),g.setClear(0),R(2929),f.setFunc(3),X(!1),Y(1),R(2884),W(0);const T={[100]:32774,[101]:32778,[102]:32779};if(d)T[103]=32775,T[104]=32776;else{const U=b.get("EXT_blend_minmax");null!==U&&(T[103]=U.MIN_EXT,T[104]=U.MAX_EXT)}const V={[200]:0,[201]:1,[202]:768,[k]:770,[210]:776,[208]:774,[m]:772,[203]:769,[l]:771,[209]:775,[207]:773};function W(b,c,d,e,f,g,h,i){if(0===b){!0===s&&(S(3042),s=!1);return}if(!1===s&&(R(3042),s=!0),b!==j){if(b!==t||i!==A){if((100!==u||100!==x)&&(a.blendEquation(32774),u=100,x=100),i)switch(b){case 1:a.blendFuncSeparate(1,771,1,771);break;case 2:a.blendFunc(1,1);break;case 3:a.blendFuncSeparate(0,769,0,1);break;case 4:a.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}else switch(b){case 1:a.blendFuncSeparate(770,771,1,771);break;case 2:a.blendFunc(770,1);break;case 3:a.blendFuncSeparate(0,769,0,1);break;case 4:a.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}v=null,w=null,y=null,z=null,t=b,A=i}return}f=f||c,g=g||d,h=h||e,(c!==u||f!==x)&&(a.blendEquationSeparate(T[c],T[f]),u=c,x=f),(d!==v||e!==w||g!==y||h!==z)&&(a.blendFuncSeparate(V[d],V[e],V[g],V[h]),v=d,w=e,y=g,z=h),t=b,A=null}function X(b){B!==b&&(b?a.frontFace(2304):a.frontFace(2305),B=b)}function Y(b){0!==b?(R(2884),b!==C&&(1===b?a.cullFace(1029):2===b?a.cullFace(1028):a.cullFace(1032))):S(2884),C=b}function Z(b,c,d){b?(R(32823),(E!==c||F!==d)&&(a.polygonOffset(c,d),E=c,F=d)):S(32823)}function $(b){void 0===b&&(b=33984+G-1),J!==b&&(a.activeTexture(b),J=b)}return{buffers:{color:e,depth:f,stencil:g},enable:R,disable:S,bindFramebuffer:function(b,c){return o[b]!==c&&(a.bindFramebuffer(b,c),o[b]=c,d&&(36009===b&&(o[36160]=c),36160===b&&(o[36009]=c)),!0)},drawBuffers:function(d,e){let f=q,g=!1;if(d)if(void 0===(f=p.get(e))&&(f=[],p.set(e,f)),d.isWebGLMultipleRenderTargets){const h=d.texture;if(f.length!==h.length||36064!==f[0]){for(let i=0,j=h.length;i<j;i++)f[i]=36064+i;f.length=h.length,g=!0}}else 36064!==f[0]&&(f[0]=36064,g=!0);else 1029!==f[0]&&(f[0]=1029,g=!0);g&&(c.isWebGL2?a.drawBuffers(f):b.get("WEBGL_draw_buffers").drawBuffersWEBGL(f))},useProgram:function(b){return r!==b&&(a.useProgram(b),r=b,!0)},setBlending:W,setMaterial:function(a,b){a.side===i?S(2884):R(2884);let c=a.side===h;b&&(c=!c),X(c),1===a.blending&& !1===a.transparent?W(0):W(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha),f.setFunc(a.depthFunc),f.setTest(a.depthTest),f.setMask(a.depthWrite),e.setMask(a.colorWrite);const d=a.stencilWrite;g.setTest(d),d&&(g.setMask(a.stencilWriteMask),g.setFunc(a.stencilFunc,a.stencilRef,a.stencilFuncMask),g.setOp(a.stencilFail,a.stencilZFail,a.stencilZPass)),Z(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits),!0===a.alphaToCoverage?R(32926):S(32926)},setFlipSided:X,setCullFace:Y,setLineWidth:function(b){b!==D&&(H&&a.lineWidth(b),D=b)},setPolygonOffset:Z,setScissorTest:function(a){a?R(3089):S(3089)},activeTexture:$,bindTexture:function(b,c){null===J&&$();let d=K[J];void 0===d&&(d={type:void 0,texture:void 0},K[J]=d),(d.type!==b||d.texture!==c)&&(a.bindTexture(b,c||Q[b]),d.type=b,d.texture=c)},unbindTexture:function(){const b=K[J];void 0!==b&& void 0!==b.type&&(a.bindTexture(b.type,null),b.type=void 0,b.texture=void 0)},compressedTexImage2D:function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texImage2D:function(){try{a.texImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texImage3D:function(){try{a.texImage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texStorage2D:function(){try{a.texStorage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texStorage3D:function(){try{a.texStorage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texSubImage2D:function(){try{a.texSubImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texSubImage3D:function(){try{a.texSubImage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},compressedTexSubImage2D:function(){try{a.compressedTexSubImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},scissor:function(b){!1===N.equals(b)&&(a.scissor(b.x,b.y,b.z,b.w),N.copy(b))},viewport:function(b){!1===O.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),O.copy(b))},reset:function(){a.disable(3042),a.disable(2884),a.disable(2929),a.disable(32823),a.disable(3089),a.disable(2960),a.disable(32926),a.blendEquation(32774),a.blendFunc(1,0),a.blendFuncSeparate(1,0,1,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(513),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(519,0,4294967295),a.stencilOp(7680,7680,7680),a.clearStencil(0),a.cullFace(1029),a.frontFace(2305),a.polygonOffset(0,0),a.activeTexture(33984),a.bindFramebuffer(36160,null),!0===d&&(a.bindFramebuffer(36009,null),a.bindFramebuffer(36008,null)),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),n={},J=null,K={},o={},p=new WeakMap(),q=[],r=null,s=!1,t=null,u=null,v=null,w=null,x=null,y=null,z=null,A=!1,B=null,C=null,D=null,E=null,F=null,N.set(0,0,a.canvas.width,a.canvas.height),O.set(0,0,a.canvas.width,a.canvas.height),e.reset(),f.reset(),g.reset()}}}function aR(a,b,c,d,e,f,g){const h=e.isWebGL2,i=e.maxTextures,j=e.maxCubemapSize,k=e.maxTextureSize,l=e.maxSamples,m=b.has("WEBGL_multisampled_render_to_texture"),n=m?b.get("WEBGL_multisampled_render_to_texture"):void 0,o=new WeakMap();let t,u=!1;try{u="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(v){}function w(a,b){return u?new OffscreenCanvas(a,b):zd("canvas")}function x(a,b,c,d){let e=1;if((a.width>d||a.height>d)&&(e=d/Math.max(a.width,a.height)),e<1|| !0===b){if(("undefined"==typeof HTMLImageElement||!(a instanceof HTMLImageElement))&&("undefined"==typeof HTMLCanvasElement||!(a instanceof HTMLCanvasElement))&&("undefined"==typeof ImageBitmap||!(a instanceof ImageBitmap)))return"data"in a&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+a.width+"x"+a.height+")."),a;{const f=b?da:Math.floor,g=f(e*a.width),h=f(e*a.height);void 0===t&&(t=w(g,h));const i=c?w(g,h):t;i.width=g,i.height=h;const j=i.getContext("2d");return j.drawImage(a,0,0,g,h),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+a.width+"x"+a.height+") to ("+g+"x"+h+")."),i}}return a}function y(a){return ba(a.width)&&ba(a.height)}function z(a,b){return a.generateMipmaps&&b&&a.minFilter!==q&&1006!==a.minFilter}function A(b){a.generateMipmap(b)}function B(c,d,e,f,g=!1){if(!1===h)return d;if(null!==c){if(void 0!==a[c])return a[c];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+c+"'")}let i=d;return 6403===d&&(5126===e&&(i=33326),5131===e&&(i=33325),5121===e&&(i=33321)),33319===d&&(5126===e&&(i=33328),5131===e&&(i=33327),5121===e&&(i=33323)),6408===d&&(5126===e&&(i=34836),5131===e&&(i=34842),5121===e&&(i=3001===f&& !1===g?35907:32856),32819===e&&(i=32854),32820===e&&(i=32855)),(33325===i||33326===i||33327===i||33328===i||34842===i||34836===i)&&b.get("EXT_color_buffer_float"),i}function C(a,b,c){return!0===z(a,c)||a.isFramebufferTexture&&a.minFilter!==q&&1006!==a.minFilter?Math.log2(Math.max(b.width,b.height))+1:void 0!==a.mipmaps&&a.mipmaps.length>0?a.mipmaps.length:a.isCompressedTexture&&Array.isArray(a.image)?b.mipmaps.length:1}function D(a){return a===q||1004===a||1005===a?9728:9729}function E(a){const b=a.target;b.removeEventListener("dispose",E),G(b),b.isVideoTexture&&o.delete(b),g.memory.textures--}function F(a){const b=a.target;b.removeEventListener("dispose",F),H(b)}function G(b){const c=d.get(b);void 0!==c.__webglInit&&(a.deleteTexture(c.__webglTexture),d.remove(b))}function H(b){const c=b.texture,e=d.get(b),f=d.get(c);if(b){if(void 0!==f.__webglTexture&&(a.deleteTexture(f.__webglTexture),g.memory.textures--),b.depthTexture&&b.depthTexture.dispose(),b.isWebGLCubeRenderTarget)for(let h=0;h<6;h++)a.deleteFramebuffer(e.__webglFramebuffer[h]),e.__webglDepthbuffer&&a.deleteRenderbuffer(e.__webglDepthbuffer[h]);else a.deleteFramebuffer(e.__webglFramebuffer),e.__webglDepthbuffer&&a.deleteRenderbuffer(e.__webglDepthbuffer),e.__webglMultisampledFramebuffer&&a.deleteFramebuffer(e.__webglMultisampledFramebuffer),e.__webglColorRenderbuffer&&a.deleteRenderbuffer(e.__webglColorRenderbuffer),e.__webglDepthRenderbuffer&&a.deleteRenderbuffer(e.__webglDepthRenderbuffer);if(b.isWebGLMultipleRenderTargets)for(let i=0,j=c.length;i<j;i++){const k=d.get(c[i]);k.__webglTexture&&(a.deleteTexture(k.__webglTexture),g.memory.textures--),d.remove(c[i])}d.remove(c),d.remove(b)}}let I=0;function J(a,b){const e=d.get(a);if(a.isVideoTexture&&V(a),a.version>0&&e.__version!==a.version){const f=a.image;if(void 0===f)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(!1===f.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{P(e,a,b);return}}c.activeTexture(33984+b),c.bindTexture(3553,e.__webglTexture)}function K(a,b){const e=d.get(a);if(a.version>0&&e.__version!==a.version){Q(e,a,b);return}c.activeTexture(33984+b),c.bindTexture(34067,e.__webglTexture)}const L={[p]:10497,[1001]:33071,[1002]:33648},M={[q]:9728,[1004]:9984,[1005]:9986,[1006]:9729,[1007]:9985,[r]:9987};function N(c,f,g){if(g?(a.texParameteri(c,10242,L[f.wrapS]),a.texParameteri(c,10243,L[f.wrapT]),(32879===c||35866===c)&&a.texParameteri(c,32882,L[f.wrapR]),a.texParameteri(c,10240,M[f.magFilter]),a.texParameteri(c,10241,M[f.minFilter])):(a.texParameteri(c,10242,33071),a.texParameteri(c,10243,33071),(32879===c||35866===c)&&a.texParameteri(c,32882,33071),(1001!==f.wrapS||1001!==f.wrapT)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),a.texParameteri(c,10240,D(f.magFilter)),a.texParameteri(c,10241,D(f.minFilter)),f.minFilter!==q&&1006!==f.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===b.has("EXT_texture_filter_anisotropic")){const i=b.get("EXT_texture_filter_anisotropic");(1015!==f.type|| !1!==b.has("OES_texture_float_linear"))&&(!1!==h||1016!==f.type|| !1!==b.has("OES_texture_half_float_linear"))&&(f.anisotropy>1||d.get(f).__currentAnisotropy)&&(a.texParameterf(c,i.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(f.anisotropy,e.getMaxAnisotropy())),d.get(f).__currentAnisotropy=f.anisotropy)}}function O(b,c){void 0===b.__webglInit&&(b.__webglInit=!0,c.addEventListener("dispose",E),b.__webglTexture=a.createTexture(),g.memory.textures++)}function P(b,d,e){var g;let i=3553;d.isDataTexture2DArray&&(i=35866),d.isDataTexture3D&&(i=32879),O(b,d),c.activeTexture(33984+e),c.bindTexture(i,b.__webglTexture),a.pixelStorei(37440,d.flipY),a.pixelStorei(37441,d.premultiplyAlpha),a.pixelStorei(3317,d.unpackAlignment),a.pixelStorei(37443,0);const j=(g=d,!h&&(1001!==g.wrapS||1001!==g.wrapT||g.minFilter!==q&&1006!==g.minFilter)&& !1===y(d.image));let l=x(d.image,j,!1,k);l=W(d,l);const m=y(l)||h,n=f.convert(d.format,d.encoding);let o=f.convert(d.type),p=B(d.internalFormat,n,o,d.encoding,d.isVideoTexture);N(i,d,m);let r;const t=d.mipmaps,u=h&& !0!==d.isVideoTexture,v=void 0===b.__version,w=C(d,l,m);if(d.isDepthTexture)p=6402,h?p=1015===d.type?36012:1014===d.type?33190:1020===d.type?35056:33189:1015===d.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===d.format&&6402===p&&1012!==d.type&&1014!==d.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),d.type=1012,o=f.convert(d.type)),1027===d.format&&6402===p&&(p=34041,1020!==d.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),d.type=1020,o=f.convert(d.type))),u&&v?c.texStorage2D(3553,1,p,l.width,l.height):c.texImage2D(3553,0,p,l.width,l.height,0,n,o,null);else if(d.isDataTexture)if(t.length>0&&m){u&&v&&c.texStorage2D(3553,w,p,t[0].width,t[0].height);for(let D=0,E=t.length;D<E;D++)r=t[D],u?c.texSubImage2D(3553,0,0,0,r.width,r.height,n,o,r.data):c.texImage2D(3553,D,p,r.width,r.height,0,n,o,r.data);d.generateMipmaps=!1}else u?(v&&c.texStorage2D(3553,w,p,l.width,l.height),c.texSubImage2D(3553,0,0,0,l.width,l.height,n,o,l.data)):c.texImage2D(3553,0,p,l.width,l.height,0,n,o,l.data);else if(d.isCompressedTexture){u&&v&&c.texStorage2D(3553,w,p,t[0].width,t[0].height);for(let F=0,G=t.length;F<G;F++)r=t[F],d.format!==s?null!==n?u?c.compressedTexSubImage2D(3553,F,0,0,r.width,r.height,n,r.data):c.compressedTexImage2D(3553,F,p,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):u?c.texSubImage2D(3553,F,0,0,r.width,r.height,n,o,r.data):c.texImage2D(3553,F,p,r.width,r.height,0,n,o,r.data)}else if(d.isDataTexture2DArray)u?(v&&c.texStorage3D(35866,w,p,l.width,l.height,l.depth),c.texSubImage3D(35866,0,0,0,0,l.width,l.height,l.depth,n,o,l.data)):c.texImage3D(35866,0,p,l.width,l.height,l.depth,0,n,o,l.data);else if(d.isDataTexture3D)u?(v&&c.texStorage3D(32879,w,p,l.width,l.height,l.depth),c.texSubImage3D(32879,0,0,0,0,l.width,l.height,l.depth,n,o,l.data)):c.texImage3D(32879,0,p,l.width,l.height,l.depth,0,n,o,l.data);else if(d.isFramebufferTexture)u&&v?c.texStorage2D(3553,w,p,l.width,l.height):c.texImage2D(3553,0,p,l.width,l.height,0,n,o,null);else if(t.length>0&&m){u&&v&&c.texStorage2D(3553,w,p,t[0].width,t[0].height);for(let H=0,I=t.length;H<I;H++)r=t[H],u?c.texSubImage2D(3553,H,0,0,n,o,r):c.texImage2D(3553,H,p,n,o,r);d.generateMipmaps=!1}else u?(v&&c.texStorage2D(3553,w,p,l.width,l.height),c.texSubImage2D(3553,0,0,0,n,o,l)):c.texImage2D(3553,0,p,n,o,l);z(d,m)&&A(i),b.__version=d.version,d.onUpdate&&d.onUpdate(d)}function Q(b,d,e){if(6!==d.image.length)return;O(b,d),c.activeTexture(33984+e),c.bindTexture(34067,b.__webglTexture),a.pixelStorei(37440,d.flipY),a.pixelStorei(37441,d.premultiplyAlpha),a.pixelStorei(3317,d.unpackAlignment),a.pixelStorei(37443,0);const g=d&&(d.isCompressedTexture||d.image[0].isCompressedTexture),i=d.image[0]&&d.image[0].isDataTexture,k=[];for(let l=0;l<6;l++)g||i?k[l]=i?d.image[l].image:d.image[l]:k[l]=x(d.image[l],!1,!0,j),k[l]=W(d,k[l]);const m=k[0],n=y(m)||h,o=f.convert(d.format,d.encoding),p=f.convert(d.type),q=B(d.internalFormat,o,p,d.encoding),r=h&& !0!==d.isVideoTexture,t=void 0===b.__version;let u=C(d,m,n);N(34067,d,n);let v;if(g){r&&t&&c.texStorage2D(34067,u,q,m.width,m.height);for(let w=0;w<6;w++){v=k[w].mipmaps;for(let D=0;D<v.length;D++){const E=v[D];d.format!==s?null!==o?r?c.compressedTexSubImage2D(34069+w,D,0,0,E.width,E.height,o,E.data):c.compressedTexImage2D(34069+w,D,q,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):r?c.texSubImage2D(34069+w,D,0,0,E.width,E.height,o,p,E.data):c.texImage2D(34069+w,D,q,E.width,E.height,0,o,p,E.data)}}}else{v=d.mipmaps,r&&t&&(v.length>0&&u++,c.texStorage2D(34067,u,q,k[0].width,k[0].height));for(let F=0;F<6;F++)if(i){r?c.texSubImage2D(34069+F,0,0,0,k[F].width,k[F].height,o,p,k[F].data):c.texImage2D(34069+F,0,q,k[F].width,k[F].height,0,o,p,k[F].data);for(let G=0;G<v.length;G++){const H=v[G],I=H.image[F].image;r?c.texSubImage2D(34069+F,G+1,0,0,I.width,I.height,o,p,I.data):c.texImage2D(34069+F,G+1,q,I.width,I.height,0,o,p,I.data)}}else{r?c.texSubImage2D(34069+F,0,0,0,o,p,k[F]):c.texImage2D(34069+F,0,q,o,p,k[F]);for(let J=0;J<v.length;J++){const K=v[J];r?c.texSubImage2D(34069+F,J+1,0,0,o,p,K.image[F]):c.texImage2D(34069+F,J+1,q,o,p,K.image[F])}}}z(d,n)&&A(34067),b.__version=d.version,d.onUpdate&&d.onUpdate(d)}function R(b,e,g,h,i){const j=f.convert(g.format,g.encoding),k=f.convert(g.type),l=B(g.internalFormat,j,k,g.encoding),m=d.get(e);m.__hasExternalTextures||(32879===i||35866===i?c.texImage3D(i,0,l,e.width,e.height,e.depth,0,j,k,null):c.texImage2D(i,0,l,e.width,e.height,0,j,k,null)),c.bindFramebuffer(36160,b),e.useRenderToTexture?n.framebufferTexture2DMultisampleEXT(36160,h,i,d.get(g).__webglTexture,0,U(e)):a.framebufferTexture2D(36160,h,i,d.get(g).__webglTexture,0),c.bindFramebuffer(36160,null)}function S(b,c,d){if(a.bindRenderbuffer(36161,b),c.depthBuffer&&!c.stencilBuffer){let e=33189;if(d||c.useRenderToTexture){const g=c.depthTexture;g&&g.isDepthTexture&&(1015===g.type?e=36012:1014===g.type&&(e=33190));const h=U(c);c.useRenderToTexture?n.renderbufferStorageMultisampleEXT(36161,h,e,c.width,c.height):a.renderbufferStorageMultisample(36161,h,e,c.width,c.height)}else a.renderbufferStorage(36161,e,c.width,c.height);a.framebufferRenderbuffer(36160,36096,36161,b)}else if(c.depthBuffer&&c.stencilBuffer){const i=U(c);d&&c.useRenderbuffer?a.renderbufferStorageMultisample(36161,i,35056,c.width,c.height):c.useRenderToTexture?n.renderbufferStorageMultisampleEXT(36161,i,35056,c.width,c.height):a.renderbufferStorage(36161,34041,c.width,c.height),a.framebufferRenderbuffer(36160,33306,36161,b)}else{const j=!0===c.isWebGLMultipleRenderTargets?c.texture[0]:c.texture,k=f.convert(j.format,j.encoding),l=f.convert(j.type),m=B(j.internalFormat,k,l,j.encoding),o=U(c);d&&c.useRenderbuffer?a.renderbufferStorageMultisample(36161,o,m,c.width,c.height):c.useRenderToTexture?n.renderbufferStorageMultisampleEXT(36161,o,m,c.width,c.height):a.renderbufferStorage(36161,m,c.width,c.height)}a.bindRenderbuffer(36161,null)}function T(b){const e=d.get(b),f=!0===b.isWebGLCubeRenderTarget;if(b.depthTexture&&!e.__autoAllocateDepthBuffer){if(f)throw new Error("target.depthTexture not supported in Cube render targets");!function(b,e){const f=e&&e.isWebGLCubeRenderTarget;if(f)throw new Error("Depth Texture with cube render targets is not supported");if(c.bindFramebuffer(36160,b),!(e.depthTexture&&e.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(e.depthTexture).__webglTexture&&e.depthTexture.image.width===e.width&&e.depthTexture.image.height===e.height||(e.depthTexture.image.width=e.width,e.depthTexture.image.height=e.height,e.depthTexture.needsUpdate=!0),J(e.depthTexture,0);const g=d.get(e.depthTexture).__webglTexture,h=U(e);if(1026===e.depthTexture.format)e.useRenderToTexture?n.framebufferTexture2DMultisampleEXT(36160,36096,3553,g,0,h):a.framebufferTexture2D(36160,36096,3553,g,0);else if(1027===e.depthTexture.format)e.useRenderToTexture?n.framebufferTexture2DMultisampleEXT(36160,33306,3553,g,0,h):a.framebufferTexture2D(36160,33306,3553,g,0);else throw new Error("Unknown depthTexture format")}(e.__webglFramebuffer,b)}else if(f){e.__webglDepthbuffer=[];for(let g=0;g<6;g++)c.bindFramebuffer(36160,e.__webglFramebuffer[g]),e.__webglDepthbuffer[g]=a.createRenderbuffer(),S(e.__webglDepthbuffer[g],b,!1)}else c.bindFramebuffer(36160,e.__webglFramebuffer),e.__webglDepthbuffer=a.createRenderbuffer(),S(e.__webglDepthbuffer,b,!1);c.bindFramebuffer(36160,null)}function U(a){return h&&(a.useRenderbuffer||a.useRenderToTexture)?Math.min(l,a.samples):0}function V(a){const b=g.render.frame;o.get(a)!==b&&(o.set(a,b),a.update())}function W(a,c){const d=a.encoding,e=a.format,f=a.type;return!0===a.isCompressedTexture|| !0===a.isVideoTexture||1035===a.format||3000!==d&&(3001===d?!1===h?!0===b.has("EXT_sRGB")&&e===s?(a.format=1035,a.minFilter=1006,a.generateMipmaps=!1):c=Ve.sRGBToLinear(c):(e!==s||1009!==f)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",d)),c}let X=!1,Y=!1;this.allocateTextureUnit=function(){const a=I;return a>=i&&console.warn("THREE.WebGLTextures: Trying to use "+a+" texture units while this GPU supports only "+i),I+=1,a},this.resetTextureUnits=function(){I=0},this.setTexture2D=J,this.setTexture2DArray=function(a,b){const e=d.get(a);if(a.version>0&&e.__version!==a.version){P(e,a,b);return}c.activeTexture(33984+b),c.bindTexture(35866,e.__webglTexture)},this.setTexture3D=function(a,b){const e=d.get(a);if(a.version>0&&e.__version!==a.version){P(e,a,b);return}c.activeTexture(33984+b),c.bindTexture(32879,e.__webglTexture)},this.setTextureCube=K,this.rebindTextures=function(a,b,c){const e=d.get(a);void 0!==b&&R(e.__webglFramebuffer,a,a.texture,36064,3553),void 0!==c&&T(a)},this.setupRenderTarget=function(b){const i=b.texture,j=d.get(b),k=d.get(i);b.addEventListener("dispose",F),!0!==b.isWebGLMultipleRenderTargets&&(void 0===k.__webglTexture&&(k.__webglTexture=a.createTexture()),k.__version=i.version,g.memory.textures++);const l=!0===b.isWebGLCubeRenderTarget,m=!0===b.isWebGLMultipleRenderTargets,n=i.isDataTexture3D||i.isDataTexture2DArray,o=y(b)||h;if(l){j.__webglFramebuffer=[];for(let p=0;p<6;p++)j.__webglFramebuffer[p]=a.createFramebuffer()}else if(j.__webglFramebuffer=a.createFramebuffer(),m)if(e.drawBuffers){const q=b.texture;for(let r=0,s=q.length;r<s;r++){const t=d.get(q[r]);void 0===t.__webglTexture&&(t.__webglTexture=a.createTexture(),g.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(b.useRenderbuffer)if(h){j.__webglMultisampledFramebuffer=a.createFramebuffer(),j.__webglColorRenderbuffer=a.createRenderbuffer(),a.bindRenderbuffer(36161,j.__webglColorRenderbuffer);const u=f.convert(i.format,i.encoding),v=f.convert(i.type),w=B(i.internalFormat,u,v,i.encoding),x=U(b);a.renderbufferStorageMultisample(36161,x,w,b.width,b.height),c.bindFramebuffer(36160,j.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(36160,36064,36161,j.__webglColorRenderbuffer),a.bindRenderbuffer(36161,null),b.depthBuffer&&(j.__webglDepthRenderbuffer=a.createRenderbuffer(),S(j.__webglDepthRenderbuffer,b,!0)),c.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(l){c.bindTexture(34067,k.__webglTexture),N(34067,i,o);for(let C=0;C<6;C++)R(j.__webglFramebuffer[C],b,i,36064,34069+C);z(i,o)&&A(34067),c.unbindTexture()}else if(m){const D=b.texture;for(let E=0,G=D.length;E<G;E++){const H=D[E],I=d.get(H);c.bindTexture(3553,I.__webglTexture),N(3553,H,o),R(j.__webglFramebuffer,b,H,36064+E,3553),z(H,o)&&A(3553)}c.unbindTexture()}else{let J=3553;if(n)if(h){const K=i.isDataTexture3D;J=K?32879:35866}else console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");c.bindTexture(J,k.__webglTexture),N(J,i,o),R(j.__webglFramebuffer,b,i,36064,J),z(i,o)&&A(J),c.unbindTexture()}b.depthBuffer&&T(b)},this.updateRenderTargetMipmap=function(a){const b=y(a)||h,e=!0===a.isWebGLMultipleRenderTargets?a.texture:[a.texture];for(let f=0,g=e.length;f<g;f++){const i=e[f];if(z(i,b)){const j=a.isWebGLCubeRenderTarget?34067:3553,k=d.get(i).__webglTexture;c.bindTexture(j,k),A(j),c.unbindTexture()}}},this.updateMultisampleRenderTarget=function(b){if(b.useRenderbuffer)if(h){const e=b.width,f=b.height;let g=16384;const i=[36064],j=b.stencilBuffer?33306:36096;b.depthBuffer&&i.push(j),!b.ignoreDepthForMultisampleCopy&&(b.depthBuffer&&(g|=256),b.stencilBuffer&&(g|=1024));const k=d.get(b);c.bindFramebuffer(36008,k.__webglMultisampledFramebuffer),c.bindFramebuffer(36009,k.__webglFramebuffer),b.ignoreDepthForMultisampleCopy&&(a.invalidateFramebuffer(36008,[j]),a.invalidateFramebuffer(36009,[j])),a.blitFramebuffer(0,0,e,f,0,0,e,f,g,9728),a.invalidateFramebuffer(36008,i),c.bindFramebuffer(36008,null),c.bindFramebuffer(36009,k.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.setupDepthRenderbuffer=T,this.setupFrameBufferTexture=R,this.safeSetTexture2D=function(a,b){a&&a.isWebGLRenderTarget&&(!1===X&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),X=!0),a=a.texture),J(a,b)},this.safeSetTextureCube=function(a,b){a&&a.isWebGLCubeRenderTarget&&(!1===Y&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),Y=!0),a=a.texture),K(a,b)}}function bR(a,b,c){const d=c.isWebGL2;return{convert:function(a,c=null){let e;if(1009===a)return 5121;if(1017===a)return 32819;if(1018===a)return 32820;if(1010===a)return 5120;if(1011===a)return 5122;if(1012===a)return 5123;if(1013===a)return 5124;if(1014===a)return 5125;if(1015===a)return 5126;if(1016===a)return d?5131:null!==(e=b.get("OES_texture_half_float"))?e.HALF_FLOAT_OES:null;if(1021===a)return 6406;if(a===s)return 6408;if(1024===a)return 6409;if(1025===a)return 6410;if(1026===a)return 6402;if(1027===a)return 34041;if(1028===a)return 6403;if(1022===a)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(1035===a)return null!==(e=b.get("EXT_sRGB"))?e.SRGB_ALPHA_EXT:null;if(1029===a)return 36244;if(1030===a)return 33319;if(1031===a)return 33320;if(1033===a)return 36249;if(a===t||33777===a||a===u||a===v)if(3001===c){if(null===(e=b.get("WEBGL_compressed_texture_s3tc_srgb")))return null;if(a===t)return e.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(33777===a)return e.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(a===u)return e.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(a===v)return e.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(null===(e=b.get("WEBGL_compressed_texture_s3tc")))return null;if(a===t)return e.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===a)return e.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===u)return e.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===v)return e.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(a===w||a===x||35842===a||35843===a){if(null===(e=b.get("WEBGL_compressed_texture_pvrtc")))return null;if(a===w)return e.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===x)return e.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===a)return e.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===a)return e.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(a===y)return null!==(e=b.get("WEBGL_compressed_texture_etc1"))?e.COMPRESSED_RGB_ETC1_WEBGL:null;if(a===z||37496===a){if(null===(e=b.get("WEBGL_compressed_texture_etc")))return null;if(a===z)return 3001===c?e.COMPRESSED_SRGB8_ETC2:e.COMPRESSED_RGB8_ETC2;if(37496===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:e.COMPRESSED_RGBA8_ETC2_EAC}if(37808===a||37809===a||37810===a||37811===a||37812===a||37813===a||37814===a||37815===a||37816===a||37817===a||37818===a||37819===a||37820===a||37821===a){if(null===(e=b.get("WEBGL_compressed_texture_astc")))return null;if(37808===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:e.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:e.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:e.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:e.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:e.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:e.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:e.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:e.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:e.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:e.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:e.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:e.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:e.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:e.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===a){if(null===(e=b.get("EXT_texture_compression_bptc")))return null;if(36492===a)return 3001===c?e.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:e.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(1020===a)return d?34042:null!==(e=b.get("WEBGL_depth_texture"))?e.UNSIGNED_INT_24_8_WEBGL:null}}}XQ.prototype.isMeshDistanceMaterial=!0;class cR extends qI{constructor(dR=[]){super(),this.cameras=dR}}cR.prototype.isArrayCamera=!0;class eR extends Vw{constructor(){super(),this.type="Group"}}eR.prototype.isGroup=!0;const fR={type:"move"};class gR{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new eR(),this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new eR(),this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new qk(),this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new qk()),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new eR(),this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new qk(),this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new qk()),this._grip}dispatchEvent(hR){return null!==this._targetRay&&this._targetRay.dispatchEvent(hR),null!==this._grip&&this._grip.dispatchEvent(hR),null!==this._hand&&this._hand.dispatchEvent(hR),this}disconnect(iR){return this.dispatchEvent({type:"disconnected",data:iR}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(jR,kR,lR){let mR=null,nR=null,oR=null;const pR=this._targetRay,qR=this._grip,rR=this._hand;if(jR&&"visible-blurred"!==kR.session.visibilityState)if(null!==pR&&null!==(mR=kR.getPose(jR.targetRaySpace,lR))&&(pR.matrix.fromArray(mR.transform.matrix),pR.matrix.decompose(pR.position,pR.rotation,pR.scale),mR.linearVelocity?(pR.hasLinearVelocity=!0,pR.linearVelocity.copy(mR.linearVelocity)):pR.hasLinearVelocity=!1,mR.angularVelocity?(pR.hasAngularVelocity=!0,pR.angularVelocity.copy(mR.angularVelocity)):pR.hasAngularVelocity=!1,this.dispatchEvent(fR)),rR&&jR.hand){for(const sR of(oR=!0,jR.hand.values())){const tR=kR.getJointPose(sR,lR);if(void 0===rR.joints[sR.jointName]){const uR=new eR();uR.matrixAutoUpdate=!1,uR.visible=!1,rR.joints[sR.jointName]=uR,rR.add(uR)}const vR=rR.joints[sR.jointName];null!==tR&&(vR.matrix.fromArray(tR.transform.matrix),vR.matrix.decompose(vR.position,vR.rotation,vR.scale),vR.jointRadius=tR.radius),vR.visible=null!==tR}const wR=rR.joints["index-finger-tip"],xR=rR.joints["thumb-tip"],yR=wR.position.distanceTo(xR.position),zR=0.02,AR=0.005;rR.inputState.pinching&&yR>zR+AR?(rR.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:jR.handedness,target:this})):!rR.inputState.pinching&&yR<=zR-AR&&(rR.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:jR.handedness,target:this}))}else null!==qR&&jR.gripSpace&&null!==(nR=kR.getPose(jR.gripSpace,lR))&&(qR.matrix.fromArray(nR.transform.matrix),qR.matrix.decompose(qR.position,qR.rotation,qR.scale),nR.linearVelocity?(qR.hasLinearVelocity=!0,qR.linearVelocity.copy(nR.linearVelocity)):qR.hasLinearVelocity=!1,nR.angularVelocity?(qR.hasAngularVelocity=!0,qR.angularVelocity.copy(nR.angularVelocity)):qR.hasAngularVelocity=!1);return null!==pR&&(pR.visible=null!==mR),null!==qR&&(qR.visible=null!==nR),null!==rR&&(rR.visible=null!==oR),this}}class BR extends gf{constructor(CR,DR,ER,FR,GR,HR,IR,JR,KR,LR){if(1026!==(LR=void 0!==LR?LR:1026)&&1027!==LR)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===ER&&1026===LR&&(ER=1012),void 0===ER&&1027===LR&&(ER=1020),super(null,FR,GR,HR,IR,JR,LR,ER,KR),this.image={width:CR,height:DR},this.magFilter=void 0!==IR?IR:q,this.minFilter=void 0!==JR?JR:q,this.flipY=!1,this.generateMipmaps=!1}}BR.prototype.isDepthTexture=!0;class MR extends C{constructor(NR,OR){super();const PR=this;let QR=null,RR=1,SR=null,TR="local-floor";const UR=NR.extensions.has("WEBGL_multisampled_render_to_texture");let VR=null,WR=null,XR=null,YR=null,ZR=!1,$R=null;const _R=OR.getContextAttributes();let aS=null,bS=null;const cS=[],dS=new Map(),eS=new qI();eS.layers.enable(1),eS.viewport=new Df();const fS=new qI();fS.layers.enable(2),fS.viewport=new Df();const gS=[eS,fS],hS=new cR();hS.layers.enable(1),hS.layers.enable(2);let iS=null,jS=null;function kS(a){const b=dS.get(a.inputSource);b&&b.dispatchEvent({type:a.type,data:a.inputSource})}function lS(){dS.forEach(function(a,b){a.disconnect(b)}),dS.clear(),iS=null,jS=null,NR.setRenderTarget(aS),YR=null,XR=null,WR=null,QR=null,bS=null,rS.stop(),PR.isPresenting=!1,PR.dispatchEvent({type:"sessionend"})}function mS(a){const b=QR.inputSources;for(let c=0;c<cS.length;c++)dS.set(b[c],cS[c]);for(let d=0;d<a.removed.length;d++){const e=a.removed[d],f=dS.get(e);f&&(f.dispatchEvent({type:"disconnected",data:e}),dS.delete(e))}for(let g=0;g<a.added.length;g++){const h=a.added[g],i=dS.get(h);i&&i.dispatchEvent({type:"connected",data:h})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(a){let b=cS[a];return void 0===b&&(b=new gR(),cS[a]=b),b.getTargetRaySpace()},this.getControllerGrip=function(a){let b=cS[a];return void 0===b&&(b=new gR(),cS[a]=b),b.getGripSpace()},this.getHand=function(a){let b=cS[a];return void 0===b&&(b=new gR(),cS[a]=b),b.getHandSpace()},this.setFramebufferScaleFactor=function(a){RR=a,!0===PR.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(a){TR=a,!0===PR.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return SR},this.getBaseLayer=function(){return null!==XR?XR:YR},this.getBinding=function(){return WR},this.getFrame=function(){return $R},this.getSession=function(){return QR},this.setSession=async function(a){if(null!==(QR=a)){if(aS=NR.getRenderTarget(),QR.addEventListener("select",kS),QR.addEventListener("selectstart",kS),QR.addEventListener("selectend",kS),QR.addEventListener("squeeze",kS),QR.addEventListener("squeezestart",kS),QR.addEventListener("squeezeend",kS),QR.addEventListener("end",lS),QR.addEventListener("inputsourceschange",mS),!0!==_R.xrCompatible&&await OR.makeXRCompatible(),void 0===QR.renderState.layers|| !1===NR.capabilities.isWebGL2){const b={antialias:void 0!==QR.renderState.layers||_R.antialias,alpha:_R.alpha,depth:_R.depth,stencil:_R.stencil,framebufferScaleFactor:RR};YR=new XRWebGLLayer(QR,OR,b),QR.updateRenderState({baseLayer:YR}),bS=new kh(YR.framebufferWidth,YR.framebufferHeight,{format:s,type:1009,encoding:NR.outputEncoding})}else{ZR=_R.antialias;let c=null,d=null,e=null;_R.depth&&(e=_R.stencil?35056:33190,c=_R.stencil?1027:1026,d=_R.stencil?1020:1012);const f={colorFormat:3001===NR.outputEncoding?35907:32856,depthFormat:e,scaleFactor:RR};XR=(WR=new XRWebGLBinding(QR,OR)).createProjectionLayer(f),QR.updateRenderState({layers:[XR]}),bS=ZR?new Gh(XR.textureWidth,XR.textureHeight,{format:s,type:1009,depthTexture:new BR(XR.textureWidth,XR.textureHeight,d,void 0,void 0,void 0,void 0,void 0,void 0,c),stencilBuffer:_R.stencil,ignoreDepth:XR.ignoreDepthValues,useRenderToTexture:UR,encoding:NR.outputEncoding}):new kh(XR.textureWidth,XR.textureHeight,{format:s,type:1009,depthTexture:new BR(XR.textureWidth,XR.textureHeight,d,void 0,void 0,void 0,void 0,void 0,void 0,c),stencilBuffer:_R.stencil,ignoreDepth:XR.ignoreDepthValues,encoding:NR.outputEncoding})}bS.isXRRenderTarget=!0,this.setFoveation(1),SR=await QR.requestReferenceSpace(TR),rS.setContext(QR),rS.start(),PR.isPresenting=!0,PR.dispatchEvent({type:"sessionstart"})}};const nS=new qk(),oS=new qk();function pS(a,b){null===b?a.matrixWorld.copy(a.matrix):a.matrixWorld.multiplyMatrices(b.matrixWorld,a.matrix),a.matrixWorldInverse.copy(a.matrixWorld).invert()}this.updateCamera=function(a){if(null===QR)return;hS.near=fS.near=eS.near=a.near,hS.far=fS.far=eS.far=a.far,(iS!==hS.near||jS!==hS.far)&&(QR.updateRenderState({depthNear:hS.near,depthFar:hS.far}),iS=hS.near,jS=hS.far);const b=a.parent,c=hS.cameras;pS(hS,b);for(let d=0;d<c.length;d++)pS(c[d],b);hS.matrixWorld.decompose(hS.position,hS.quaternion,hS.scale),a.position.copy(hS.position),a.quaternion.copy(hS.quaternion),a.scale.copy(hS.scale),a.matrix.copy(hS.matrix),a.matrixWorld.copy(hS.matrixWorld);const e=a.children;for(let f=0,g=e.length;f<g;f++)e[f].updateMatrixWorld(!0);2===c.length?(function(a,b,c){nS.setFromMatrixPosition(b.matrixWorld),oS.setFromMatrixPosition(c.matrixWorld);const d=nS.distanceTo(oS),e=b.projectionMatrix.elements,f=c.projectionMatrix.elements,g=e[14]/(e[10]-1),h=e[14]/(e[10]+1),i=(e[9]+1)/e[5],j=(e[9]-1)/e[5],k=(e[8]-1)/e[0],l=(f[8]+1)/f[0],m=d/(-k+l),n=-(m*k);b.matrixWorld.decompose(a.position,a.quaternion,a.scale),a.translateX(n),a.translateZ(m),a.matrixWorld.compose(a.position,a.quaternion,a.scale),a.matrixWorldInverse.copy(a.matrixWorld).invert();const o=g+m,p=h+m;a.projectionMatrix.makePerspective(g*k-n,g*l+(d-n),i*h/p*o,j*h/p*o,o,p)})(hS,eS,fS):hS.projectionMatrix.copy(eS.projectionMatrix)},this.getCamera=function(){return hS},this.getFoveation=function(){return null!==XR?XR.fixedFoveation:null!==YR?YR.fixedFoveation:void 0},this.setFoveation=function(a){null!==XR&&(XR.fixedFoveation=a),null!==YR&& void 0!==YR.fixedFoveation&&(YR.fixedFoveation=a)};let qS=null;const rS=new DL();rS.setAnimationLoop(function(a,b){if(VR=b.getViewerPose(SR),$R=b,null!==VR){const c=VR.views;null!==YR&&(NR.setRenderTargetFramebuffer(bS,YR.framebuffer),NR.setRenderTarget(bS));let d=!1;c.length!==hS.cameras.length&&(hS.cameras.length=0,d=!0);for(let e=0;e<c.length;e++){const f=c[e];let g=null;if(null!==YR)g=YR.getViewport(f);else{const h=WR.getViewSubImage(XR,f);g=h.viewport,0===e&&(NR.setRenderTargetTextures(bS,h.colorTexture,XR.ignoreDepthValues?void 0:h.depthStencilTexture),NR.setRenderTarget(bS))}const i=gS[e];i.matrix.fromArray(f.transform.matrix),i.projectionMatrix.fromArray(f.projectionMatrix),i.viewport.set(g.x,g.y,g.width,g.height),0===e&&hS.matrix.copy(i.matrix),!0===d&&hS.cameras.push(i)}}const j=QR.inputSources;for(let k=0;k<cS.length;k++){const l=cS[k],m=j[k];l.update(m,b,SR)}qS&&qS(a,b),$R=null}),this.setAnimationLoop=function(a){qS=a},this.dispose=function(){}}}function sS(a){function b(b,c){b.opacity.value=c.opacity,c.color&&b.diffuse.value.copy(c.color),c.emissive&&b.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity),c.map&&(b.map.value=c.map),c.alphaMap&&(b.alphaMap.value=c.alphaMap),c.specularMap&&(b.specularMap.value=c.specularMap),c.alphaTest>0&&(b.alphaTest.value=c.alphaTest);const d=a.get(c).envMap;d&&(b.envMap.value=d,b.flipEnvMap.value=d.isCubeTexture&& !1===d.isRenderTargetTexture?-1:1,b.reflectivity.value=c.reflectivity,b.ior.value=c.ior,b.refractionRatio.value=c.refractionRatio),c.lightMap&&(b.lightMap.value=c.lightMap,b.lightMapIntensity.value=c.lightMapIntensity),c.aoMap&&(b.aoMap.value=c.aoMap,b.aoMapIntensity.value=c.aoMapIntensity);let e;c.map?e=c.map:c.specularMap?e=c.specularMap:c.displacementMap?e=c.displacementMap:c.normalMap?e=c.normalMap:c.bumpMap?e=c.bumpMap:c.roughnessMap?e=c.roughnessMap:c.metalnessMap?e=c.metalnessMap:c.alphaMap?e=c.alphaMap:c.emissiveMap?e=c.emissiveMap:c.clearcoatMap?e=c.clearcoatMap:c.clearcoatNormalMap?e=c.clearcoatNormalMap:c.clearcoatRoughnessMap?e=c.clearcoatRoughnessMap:c.specularIntensityMap?e=c.specularIntensityMap:c.specularColorMap?e=c.specularColorMap:c.transmissionMap?e=c.transmissionMap:c.thicknessMap?e=c.thicknessMap:c.sheenColorMap?e=c.sheenColorMap:c.sheenRoughnessMap&&(e=c.sheenRoughnessMap),void 0!==e&&(e.isWebGLRenderTarget&&(e=e.texture),!0===e.matrixAutoUpdate&&e.updateMatrix(),b.uvTransform.value.copy(e.matrix));let f;c.aoMap?f=c.aoMap:c.lightMap&&(f=c.lightMap),void 0!==f&&(f.isWebGLRenderTarget&&(f=f.texture),!0===f.matrixAutoUpdate&&f.updateMatrix(),b.uv2Transform.value.copy(f.matrix))}function c(b,c){b.roughness.value=c.roughness,b.metalness.value=c.metalness,c.roughnessMap&&(b.roughnessMap.value=c.roughnessMap),c.metalnessMap&&(b.metalnessMap.value=c.metalnessMap),c.emissiveMap&&(b.emissiveMap.value=c.emissiveMap),c.bumpMap&&(b.bumpMap.value=c.bumpMap,b.bumpScale.value=c.bumpScale,c.side===h&&(b.bumpScale.value*=-1)),c.normalMap&&(b.normalMap.value=c.normalMap,b.normalScale.value.copy(c.normalScale),c.side===h&&b.normalScale.value.negate()),c.displacementMap&&(b.displacementMap.value=c.displacementMap,b.displacementScale.value=c.displacementScale,b.displacementBias.value=c.displacementBias);const d=a.get(c).envMap;d&&(b.envMapIntensity.value=c.envMapIntensity)}return{refreshFogUniforms:function(a,b){a.fogColor.value.copy(b.color),b.isFog?(a.fogNear.value=b.near,a.fogFar.value=b.far):b.isFogExp2&&(a.fogDensity.value=b.density)},refreshMaterialUniforms:function(a,d,e,f,g){var i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I;let J,K;d.isMeshBasicMaterial?b(a,d):d.isMeshLambertMaterial?(b(a,d),i=a,(j=d).emissiveMap&&(i.emissiveMap.value=j.emissiveMap)):d.isMeshToonMaterial?(b(a,d),k=a,(l=d).gradientMap&&(k.gradientMap.value=l.gradientMap),l.emissiveMap&&(k.emissiveMap.value=l.emissiveMap),l.bumpMap&&(k.bumpMap.value=l.bumpMap,k.bumpScale.value=l.bumpScale,l.side===h&&(k.bumpScale.value*=-1)),l.normalMap&&(k.normalMap.value=l.normalMap,k.normalScale.value.copy(l.normalScale),l.side===h&&k.normalScale.value.negate()),l.displacementMap&&(k.displacementMap.value=l.displacementMap,k.displacementScale.value=l.displacementScale,k.displacementBias.value=l.displacementBias)):d.isMeshPhongMaterial?(b(a,d),m=a,n=d,m.specular.value.copy(n.specular),m.shininess.value=Math.max(n.shininess,0.0001),n.emissiveMap&&(m.emissiveMap.value=n.emissiveMap),n.bumpMap&&(m.bumpMap.value=n.bumpMap,m.bumpScale.value=n.bumpScale,n.side===h&&(m.bumpScale.value*=-1)),n.normalMap&&(m.normalMap.value=n.normalMap,m.normalScale.value.copy(n.normalScale),n.side===h&&m.normalScale.value.negate()),n.displacementMap&&(m.displacementMap.value=n.displacementMap,m.displacementScale.value=n.displacementScale,m.displacementBias.value=n.displacementBias)):d.isMeshStandardMaterial?(b(a,d),d.isMeshPhysicalMaterial?(o=a,p=d,q=g,c(o,p),o.ior.value=p.ior,p.sheen>0&&(o.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),o.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(o.sheenColorMap.value=p.sheenColorMap),p.sheenRoughnessMap&&(o.sheenRoughnessMap.value=p.sheenRoughnessMap)),p.clearcoat>0&&(o.clearcoat.value=p.clearcoat,o.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(o.clearcoatMap.value=p.clearcoatMap),p.clearcoatRoughnessMap&&(o.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap),p.clearcoatNormalMap&&(o.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),o.clearcoatNormalMap.value=p.clearcoatNormalMap,p.side===h&&o.clearcoatNormalScale.value.negate())),p.transmission>0&&(o.transmission.value=p.transmission,o.transmissionSamplerMap.value=q.texture,o.transmissionSamplerSize.value.set(q.width,q.height),p.transmissionMap&&(o.transmissionMap.value=p.transmissionMap),o.thickness.value=p.thickness,p.thicknessMap&&(o.thicknessMap.value=p.thicknessMap),o.attenuationDistance.value=p.attenuationDistance,o.attenuationColor.value.copy(p.attenuationColor)),o.specularIntensity.value=p.specularIntensity,o.specularColor.value.copy(p.specularColor),p.specularIntensityMap&&(o.specularIntensityMap.value=p.specularIntensityMap),p.specularColorMap&&(o.specularColorMap.value=p.specularColorMap)):c(a,d)):d.isMeshMatcapMaterial?(b(a,d),r=a,(s=d).matcap&&(r.matcap.value=s.matcap),s.bumpMap&&(r.bumpMap.value=s.bumpMap,r.bumpScale.value=s.bumpScale,s.side===h&&(r.bumpScale.value*=-1)),s.normalMap&&(r.normalMap.value=s.normalMap,r.normalScale.value.copy(s.normalScale),s.side===h&&r.normalScale.value.negate()),s.displacementMap&&(r.displacementMap.value=s.displacementMap,r.displacementScale.value=s.displacementScale,r.displacementBias.value=s.displacementBias)):d.isMeshDepthMaterial?(b(a,d),t=a,(u=d).displacementMap&&(t.displacementMap.value=u.displacementMap,t.displacementScale.value=u.displacementScale,t.displacementBias.value=u.displacementBias)):d.isMeshDistanceMaterial?(b(a,d),v=a,(w=d).displacementMap&&(v.displacementMap.value=w.displacementMap,v.displacementScale.value=w.displacementScale,v.displacementBias.value=w.displacementBias),v.referencePosition.value.copy(w.referencePosition),v.nearDistance.value=w.nearDistance,v.farDistance.value=w.farDistance):d.isMeshNormalMaterial?(b(a,d),x=a,(y=d).bumpMap&&(x.bumpMap.value=y.bumpMap,x.bumpScale.value=y.bumpScale,y.side===h&&(x.bumpScale.value*=-1)),y.normalMap&&(x.normalMap.value=y.normalMap,x.normalScale.value.copy(y.normalScale),y.side===h&&x.normalScale.value.negate()),y.displacementMap&&(x.displacementMap.value=y.displacementMap,x.displacementScale.value=y.displacementScale,x.displacementBias.value=y.displacementBias)):d.isLineBasicMaterial?(z=a,A=d,z.diffuse.value.copy(A.color),z.opacity.value=A.opacity,d.isLineDashedMaterial&&(B=a,C=d,B.dashSize.value=C.dashSize,B.totalSize.value=C.dashSize+C.gapSize,B.scale.value=C.scale)):d.isPointsMaterial?(D=a,E=d,F=e,G=f,D.diffuse.value.copy(E.color),D.opacity.value=E.opacity,D.size.value=E.size*F,D.scale.value=0.5*G,E.map&&(D.map.value=E.map),E.alphaMap&&(D.alphaMap.value=E.alphaMap),E.alphaTest>0&&(D.alphaTest.value=E.alphaTest),E.map?J=E.map:E.alphaMap&&(J=E.alphaMap),void 0!==J&&(!0===J.matrixAutoUpdate&&J.updateMatrix(),D.uvTransform.value.copy(J.matrix))):d.isSpriteMaterial?(H=a,I=d,H.diffuse.value.copy(I.color),H.opacity.value=I.opacity,H.rotation.value=I.rotation,I.map&&(H.map.value=I.map),I.alphaMap&&(H.alphaMap.value=I.alphaMap),I.alphaTest>0&&(H.alphaTest.value=I.alphaTest),I.map?K=I.map:I.alphaMap&&(K=I.alphaMap),void 0!==K&&(!0===K.matrixAutoUpdate&&K.updateMatrix(),H.uvTransform.value.copy(K.matrix))):d.isShadowMaterial?(a.color.value.copy(d.color),a.opacity.value=d.opacity):d.isShaderMaterial&&(d.uniformsNeedUpdate=!1)}}}function tS(a={}){const b=void 0!==a.canvas?a.canvas:function(){const a=zd("canvas");return a.style.display="block",a}(),c=void 0!==a.context?a.context:null,d=void 0!==a.alpha&&a.alpha,e=void 0===a.depth||a.depth,f=void 0===a.stencil||a.stencil,j=void 0!==a.antialias&&a.antialias,k=void 0===a.premultipliedAlpha||a.premultipliedAlpha,l=void 0!==a.preserveDrawingBuffer&&a.preserveDrawingBuffer,m=void 0!==a.powerPreference?a.powerPreference:"default",n=void 0!==a.failIfMajorPerformanceCaveat&&a.failIfMajorPerformanceCaveat;let o=null,p=null;const t=[],u=[];this.domElement=b,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=3000,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const v=this;let w=!1,x=0,y=0,z=null,A=-1,B=null;const C=new Df(),D=new Df();let E=null,F=b.width,G=b.height,H=1,I=null,J=null;const K=new Df(0,0,F,G),L=new Df(0,0,F,G);let M=!1;const N=new FK();let O=!1,P=!1,Q=null;const R=new Kq(),S=new qk(),T={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function U(){return null===z?H:1}let V=c;function W(a,c){for(let d=0;d<a.length;d++){const e=a[d],f=b.getContext(e,c);if(null!==f)return f}return null}try{const X={alpha:!0,depth:e,stencil:f,antialias:j,premultipliedAlpha:k,preserveDrawingBuffer:l,powerPreference:m,failIfMajorPerformanceCaveat:n};if("setAttribute"in b&&b.setAttribute("data-engine","three.js r137"),b.addEventListener("webglcontextlost",xa,!1),b.addEventListener("webglcontextrestored",ya,!1),null===V){const Y=["webgl2","webgl","experimental-webgl"];if(!0===v.isWebGL1Renderer&&Y.shift(),V=W(Y,X),null===V){if(W(Y))throw new Error("Error creating WebGL context with your selected attributes.");throw new Error("Error creating WebGL context.")}}void 0===V.getShaderPrecisionFormat&&(V.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Z){throw console.error("THREE.WebGLRenderer: "+Z.message),Z}let $,_,aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua;function va(){$=new EO(V),_=new lM(V,$,a),$.init(_),ta=new bR(V,$,_),aa=new _Q(V,$,_),ba=new HO(V),ca=new JQ(),da=new aR(V,$,aa,ca,_,ta,ba),ea=new nM(v),fa=new DO(v),ga=new EL(V,_),ua=new jM(V,$,ga,_),ha=new FO(V,ga,ba,ua),ia=new RO(V,ha,ga,ba),qa=new QO(V,_,da),na=new mM(ca),ja=new IQ(v,ea,fa,$,_,ua,na),ka=new sS(ca),la=new NQ(),ma=new TQ($,_),pa=new iM(v,ea,aa,ia,d,k),oa=new $Q(v,ia,_),ra=new kM(V,$,ba,_),sa=new GO(V,$,ba,_),ba.programs=ja.programs,v.capabilities=_,v.extensions=$,v.properties=ca,v.renderLists=la,v.shadowMap=oa,v.state=aa,v.info=ba}va();const wa=new MR(v,V);function xa(a){a.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),w=!0}function ya(){console.log("THREE.WebGLRenderer: Context Restored."),w=!1;const a=ba.autoReset,b=oa.enabled,c=oa.autoUpdate,d=oa.needsUpdate,e=oa.type;va(),ba.autoReset=a,oa.enabled=b,oa.autoUpdate=c,oa.needsUpdate=d,oa.type=e}function za(a){const b=a.target;b.removeEventListener("dispose",za),Aa(b)}function Aa(a){Ba(a),ca.remove(a)}function Ba(a){const b=ca.get(a).programs;void 0!==b&&(b.forEach(function(a){ja.releaseProgram(a)}),a.isShaderMaterial&&ja.releaseShaderCache(a))}this.xr=wa,this.getContext=function(){return V},this.getContextAttributes=function(){return V.getContextAttributes()},this.forceContextLoss=function(){const a=$.get("WEBGL_lose_context");a&&a.loseContext()},this.forceContextRestore=function(){const a=$.get("WEBGL_lose_context");a&&a.restoreContext()},this.getPixelRatio=function(){return H},this.setPixelRatio=function(a){void 0!==a&&(H=a,this.setSize(F,G,!1))},this.getSize=function(a){return a.set(F,G)},this.setSize=function(a,c,d){if(wa.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}F=a,G=c,b.width=Math.floor(a*H),b.height=Math.floor(c*H),!1!==d&&(b.style.width=a+"px",b.style.height=c+"px"),this.setViewport(0,0,a,c)},this.getDrawingBufferSize=function(a){return a.set(F*H,G*H).floor()},this.setDrawingBufferSize=function(a,c,d){F=a,G=c,H=d,b.width=Math.floor(a*d),b.height=Math.floor(c*d),this.setViewport(0,0,a,c)},this.getCurrentViewport=function(a){return a.copy(C)},this.getViewport=function(a){return a.copy(K)},this.setViewport=function(a,b,c,d){a.isVector4?K.set(a.x,a.y,a.z,a.w):K.set(a,b,c,d),aa.viewport(C.copy(K).multiplyScalar(H).floor())},this.getScissor=function(a){return a.copy(L)},this.setScissor=function(a,b,c,d){a.isVector4?L.set(a.x,a.y,a.z,a.w):L.set(a,b,c,d),aa.scissor(D.copy(L).multiplyScalar(H).floor())},this.getScissorTest=function(){return M},this.setScissorTest=function(a){aa.setScissorTest(M=a)},this.setOpaqueSort=function(a){I=a},this.setTransparentSort=function(a){J=a},this.getClearColor=function(a){return a.copy(pa.getClearColor())},this.setClearColor=function(){pa.setClearColor.apply(pa,arguments)},this.getClearAlpha=function(){return pa.getClearAlpha()},this.setClearAlpha=function(){pa.setClearAlpha.apply(pa,arguments)},this.clear=function(a,b,c){let d=0;(void 0===a||a)&&(d|=16384),(void 0===b||b)&&(d|=256),(void 0===c||c)&&(d|=1024),V.clear(d)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){b.removeEventListener("webglcontextlost",xa,!1),b.removeEventListener("webglcontextrestored",ya,!1),la.dispose(),ma.dispose(),ca.dispose(),ea.dispose(),fa.dispose(),ia.dispose(),ua.dispose(),ja.dispose(),wa.dispose(),wa.removeEventListener("sessionstart",Da),wa.removeEventListener("sessionend",Ea),Q&&(Q.dispose(),Q=null),Fa.stop()},this.renderBufferDirect=function(a,b,c,d,e,f){null===b&&(b=T);const g=e.isMesh&&0>e.matrixWorld.determinant(),h=Na(a,b,c,d,e);aa.setMaterial(d,g);let i=c.index;const j=c.attributes.position;if(null===i){if(void 0===j||0===j.count)return}else if(0===i.count)return;let k=1;!0===d.wireframe&&(i=ha.getWireframeAttribute(c),k=2),ua.setup(e,d,h,c,i);let l,m=ra;null!==i&&(l=ga.get(i),(m=sa).setIndex(l));const n=null!==i?i.count:j.count,o=c.drawRange.start*k,p=c.drawRange.count*k,q=null!==f?f.start*k:0,r=null!==f?f.count*k:1/0,s=Math.max(o,q),t=Math.max(0,Math.min(n,o+p,q+r)-1-s+1);if(0!==t){if(e.isMesh)!0===d.wireframe?(aa.setLineWidth(d.wireframeLinewidth*U()),m.setMode(1)):m.setMode(4);else if(e.isLine){let u=d.linewidth;void 0===u&&(u=1),aa.setLineWidth(u*U()),e.isLineSegments?m.setMode(1):e.isLineLoop?m.setMode(2):m.setMode(3)}else e.isPoints?m.setMode(0):e.isSprite&&m.setMode(4);if(e.isInstancedMesh)m.renderInstances(s,t,e.count);else if(c.isInstancedBufferGeometry){const v=Math.min(c.instanceCount,c._maxInstanceCount);m.renderInstances(s,t,v)}else m.render(s,t)}},this.compile=function(a,b){(p=ma.get(a)).init(),u.push(p),a.traverseVisible(function(a){a.isLight&&a.layers.test(b.layers)&&(p.pushLight(a),a.castShadow&&p.pushShadow(a))}),p.setupLights(v.physicallyCorrectLights),a.traverse(function(b){const c=b.material;if(c)if(Array.isArray(c))for(let d=0;d<c.length;d++){const e=c[d];La(e,a,b)}else La(c,a,b)}),u.pop(),p=null};let Ca=null;function Da(){Fa.stop()}function Ea(){Fa.start()}const Fa=new DL();function Ga(a,b,c,d){if(!1===a.visible)return;const e=a.layers.test(b.layers);if(e){if(a.isGroup)c=a.renderOrder;else if(a.isLOD)!0===a.autoUpdate&&a.update(b);else if(a.isLight)p.pushLight(a),a.castShadow&&p.pushShadow(a);else if(a.isSprite){if(!a.frustumCulled||N.intersectsSprite(a)){d&&S.setFromMatrixPosition(a.matrixWorld).applyMatrix4(R);const f=ia.update(a),g=a.material;g.visible&&o.push(a,f,g,c,S.z,null)}}else if((a.isMesh||a.isLine||a.isPoints)&&(a.isSkinnedMesh&&a.skeleton.frame!==ba.render.frame&&(a.skeleton.update(),a.skeleton.frame=ba.render.frame),!a.frustumCulled||N.intersectsObject(a))){d&&S.setFromMatrixPosition(a.matrixWorld).applyMatrix4(R);const h=ia.update(a),i=a.material;if(Array.isArray(i)){const j=h.groups;for(let k=0,l=j.length;k<l;k++){const m=j[k],n=i[m.materialIndex];n&&n.visible&&o.push(a,h,n,c,S.z,m)}}else i.visible&&o.push(a,h,i,c,S.z,null)}}const q=a.children;for(let r=0,s=q.length;r<s;r++)Ga(q[r],b,c,d)}function Ha(a,b,c,d){const e=a.opaque,f=a.transmissive,g=a.transparent;p.setupLightsView(c),f.length>0&&Ia(e,b,c),d&&aa.viewport(C.copy(d)),e.length>0&&Ja(e,b,c),f.length>0&&Ja(f,b,c),g.length>0&&Ja(g,b,c)}function Ia(a,b,c){if(null===Q){const d=!0===j&& !0===_.isWebGL2,e=d?Gh:kh;Q=new e(1024,1024,{generateMipmaps:!0,type:null!==ta.convert(1016)?1016:1009,minFilter:r,magFilter:q,wrapS:1001,wrapT:1001,useRenderToTexture:$.has("WEBGL_multisampled_render_to_texture")})}const f=v.getRenderTarget();v.setRenderTarget(Q),v.clear();const g=v.toneMapping;v.toneMapping=0,Ja(a,b,c),v.toneMapping=g,da.updateMultisampleRenderTarget(Q),da.updateRenderTargetMipmap(Q),v.setRenderTarget(f)}function Ja(a,b,c){const d=!0===b.isScene?b.overrideMaterial:null;for(let e=0,f=a.length;e<f;e++){const g=a[e],h=g.object,i=g.geometry,j=null===d?g.material:d,k=g.group;h.layers.test(c.layers)&&Ka(h,b,c,i,j,k)}}function Ka(a,b,c,d,e,f){a.onBeforeRender(v,b,c,d,e,f),a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld),a.normalMatrix.getNormalMatrix(a.modelViewMatrix),e.onBeforeRender(v,b,c,d,a,f),!0===e.transparent&&e.side===i?(e.side=h,e.needsUpdate=!0,v.renderBufferDirect(c,b,d,e,a,f),e.side=g,e.needsUpdate=!0,v.renderBufferDirect(c,b,d,e,a,f),e.side=i):v.renderBufferDirect(c,b,d,e,a,f),a.onAfterRender(v,b,c,d,e,f)}function La(a,b,c){!0!==b.isScene&&(b=T);const d=ca.get(a),e=p.state.lights,f=p.state.shadowsArray,g=e.state.version,h=ja.getParameters(a,e.state,f,b,c),i=ja.getProgramCacheKey(h);let j=d.programs;d.environment=a.isMeshStandardMaterial?b.environment:null,d.fog=b.fog,d.envMap=(a.isMeshStandardMaterial?fa:ea).get(a.envMap||d.environment),void 0===j&&(a.addEventListener("dispose",za),j=new Map(),d.programs=j);let k=j.get(i);if(void 0!==k){if(d.currentProgram===k&&d.lightsStateVersion===g)return Ma(a,h),k}else h.uniforms=ja.getUniforms(a),a.onBuild(c,h,v),a.onBeforeCompile(h,v),k=ja.acquireProgram(h,i),j.set(i,k),d.uniforms=h.uniforms;const l=d.uniforms;(a.isShaderMaterial||a.isRawShaderMaterial)&& !0!==a.clipping||(l.clippingPlanes=na.uniform),Ma(a,h),d.needsLights=Pa(a),d.lightsStateVersion=g,d.needsLights&&(l.ambientLightColor.value=e.state.ambient,l.lightProbe.value=e.state.probe,l.directionalLights.value=e.state.directional,l.directionalLightShadows.value=e.state.directionalShadow,l.spotLights.value=e.state.spot,l.spotLightShadows.value=e.state.spotShadow,l.rectAreaLights.value=e.state.rectArea,l.ltc_1.value=e.state.rectAreaLTC1,l.ltc_2.value=e.state.rectAreaLTC2,l.pointLights.value=e.state.point,l.pointLightShadows.value=e.state.pointShadow,l.hemisphereLights.value=e.state.hemi,l.directionalShadowMap.value=e.state.directionalShadowMap,l.directionalShadowMatrix.value=e.state.directionalShadowMatrix,l.spotShadowMap.value=e.state.spotShadowMap,l.spotShadowMatrix.value=e.state.spotShadowMatrix,l.pointShadowMap.value=e.state.pointShadowMap,l.pointShadowMatrix.value=e.state.pointShadowMatrix);const m=k.getUniforms(),n=$P.seqWithValue(m.seq,l);return d.currentProgram=k,d.uniformsList=n,k}function Ma(a,b){const c=ca.get(a);c.outputEncoding=b.outputEncoding,c.instancing=b.instancing,c.skinning=b.skinning,c.morphTargets=b.morphTargets,c.morphNormals=b.morphNormals,c.morphTargetsCount=b.morphTargetsCount,c.numClippingPlanes=b.numClippingPlanes,c.numIntersection=b.numClipIntersection,c.vertexAlphas=b.vertexAlphas,c.vertexTangents=b.vertexTangents,c.toneMapping=b.toneMapping}function Na(a,b,c,d,e){!0!==b.isScene&&(b=T),da.resetTextureUnits();const f=b.fog,g=d.isMeshStandardMaterial?b.environment:null,h=null===z?v.outputEncoding:!0===z.isXRRenderTarget?z.texture.encoding:3000,i=(d.isMeshStandardMaterial?fa:ea).get(d.envMap||g),j=!0===d.vertexColors&&!!c.attributes.color&&4===c.attributes.color.itemSize,k=!!d.normalMap&&!!c.attributes.tangent,l=!!c.morphAttributes.position,m=!!c.morphAttributes.normal,n=c.morphAttributes.position?c.morphAttributes.position.length:0,o=d.toneMapped?v.toneMapping:0,q=ca.get(d),r=p.state.lights;if(!0===O&&(!0===P||a!==B)){const s=a===B&&d.id===A;na.setState(d,a,s)}let t=!1;d.version===q.__version?q.needsLights&&q.lightsStateVersion!==r.state.version?t=!0:q.outputEncoding!==h?t=!0:e.isInstancedMesh&& !1===q.instancing?t=!0:e.isInstancedMesh|| !0!==q.instancing?e.isSkinnedMesh&& !1===q.skinning?t=!0:e.isSkinnedMesh|| !0!==q.skinning?q.envMap!==i?t=!0:d.fog&&q.fog!==f?t=!0:void 0!==q.numClippingPlanes&&(q.numClippingPlanes!==na.numPlanes||q.numIntersection!==na.numIntersection)?t=!0:q.vertexAlphas!==j?t=!0:q.vertexTangents!==k?t=!0:q.morphTargets!==l?t=!0:q.morphNormals!==m?t=!0:q.toneMapping!==o?t=!0:!0===_.isWebGL2&&q.morphTargetsCount!==n&&(t=!0):t=!0:t=!0:(t=!0,q.__version=d.version);let u=q.currentProgram;!0===t&&(u=La(d,b,e));let w=!1,x=!1,y=!1;const C=u.getUniforms(),D=q.uniforms;if(aa.useProgram(u.program)&&(w=!0,x=!0,y=!0),d.id!==A&&(A=d.id,x=!0),w||B!==a){if(C.setValue(V,"projectionMatrix",a.projectionMatrix),_.logarithmicDepthBuffer&&C.setValue(V,"logDepthBufFC",2/(Math.log(a.far+1)/Math.LN2)),B!==a&&(B=a,x=!0,y=!0),d.isShaderMaterial||d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshStandardMaterial||d.envMap){const E=C.map.cameraPosition;void 0!==E&&E.setValue(V,S.setFromMatrixPosition(a.matrixWorld))}(d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshLambertMaterial||d.isMeshBasicMaterial||d.isMeshStandardMaterial||d.isShaderMaterial)&&C.setValue(V,"isOrthographic",!0===a.isOrthographicCamera),(d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshLambertMaterial||d.isMeshBasicMaterial||d.isMeshStandardMaterial||d.isShaderMaterial||d.isShadowMaterial||e.isSkinnedMesh)&&C.setValue(V,"viewMatrix",a.matrixWorldInverse)}if(e.isSkinnedMesh){C.setOptional(V,e,"bindMatrix"),C.setOptional(V,e,"bindMatrixInverse");const F=e.skeleton;F&&(_.floatVertexTextures?(null===F.boneTexture&&F.computeBoneTexture(),C.setValue(V,"boneTexture",F.boneTexture,da),C.setValue(V,"boneTextureSize",F.boneTextureSize)):C.setOptional(V,F,"boneMatrices"))}return c&&(void 0!==c.morphAttributes.position|| void 0!==c.morphAttributes.normal)&&qa.update(e,c,d,u),(x||q.receiveShadow!==e.receiveShadow)&&(q.receiveShadow=e.receiveShadow,C.setValue(V,"receiveShadow",e.receiveShadow)),x&&(C.setValue(V,"toneMappingExposure",v.toneMappingExposure),q.needsLights&&Oa(D,y),f&&d.fog&&ka.refreshFogUniforms(D,f),ka.refreshMaterialUniforms(D,d,H,G,Q),$P.upload(V,q.uniformsList,D,da)),d.isShaderMaterial&& !0===d.uniformsNeedUpdate&&($P.upload(V,q.uniformsList,D,da),d.uniformsNeedUpdate=!1),d.isSpriteMaterial&&C.setValue(V,"center",e.center),C.setValue(V,"modelViewMatrix",e.modelViewMatrix),C.setValue(V,"normalMatrix",e.normalMatrix),C.setValue(V,"modelMatrix",e.matrixWorld),u}function Oa(a,b){a.ambientLightColor.needsUpdate=b,a.lightProbe.needsUpdate=b,a.directionalLights.needsUpdate=b,a.directionalLightShadows.needsUpdate=b,a.pointLights.needsUpdate=b,a.pointLightShadows.needsUpdate=b,a.spotLights.needsUpdate=b,a.spotLightShadows.needsUpdate=b,a.rectAreaLights.needsUpdate=b,a.hemisphereLights.needsUpdate=b}function Pa(a){return a.isMeshLambertMaterial||a.isMeshToonMaterial||a.isMeshPhongMaterial||a.isMeshStandardMaterial||a.isShadowMaterial||a.isShaderMaterial&& !0===a.lights}Fa.setAnimationLoop(function(a){Ca&&Ca(a)}),"undefined"!=typeof window&&Fa.setContext(window),this.setAnimationLoop=function(a){Ca=a,wa.setAnimationLoop(a),null===a?Fa.stop():Fa.start()},wa.addEventListener("sessionstart",Da),wa.addEventListener("sessionend",Ea),this.render=function(a,b){if(void 0!==b&& !0!==b.isCamera){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(!0===w)return;!0===a.autoUpdate&&a.updateMatrixWorld(),null===b.parent&&b.updateMatrixWorld(),!0===wa.enabled&& !0===wa.isPresenting&&(!0===wa.cameraAutoUpdate&&wa.updateCamera(b),b=wa.getCamera()),!0===a.isScene&&a.onBeforeRender(v,a,b,z),(p=ma.get(a,u.length)).init(),u.push(p),R.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),N.setFromProjectionMatrix(R),P=this.localClippingEnabled,O=na.init(this.clippingPlanes,P,b),(o=la.get(a,t.length)).init(),t.push(o),Ga(a,b,0,v.sortObjects),o.finish(),!0===v.sortObjects&&o.sort(I,J),!0===O&&na.beginShadows();const c=p.state.shadowsArray;if(oa.render(c,a,b),!0===O&&na.endShadows(),!0===this.info.autoReset&&this.info.reset(),pa.render(o,a),p.setupLights(v.physicallyCorrectLights),b.isArrayCamera){const d=b.cameras;for(let e=0,f=d.length;e<f;e++){const g=d[e];Ha(o,a,g,g.viewport)}}else Ha(o,a,b);null!==z&&(da.updateMultisampleRenderTarget(z),da.updateRenderTargetMipmap(z)),!0===a.isScene&&a.onAfterRender(v,a,b),aa.buffers.depth.setTest(!0),aa.buffers.depth.setMask(!0),aa.buffers.color.setMask(!0),aa.setPolygonOffset(!1),ua.resetDefaultState(),A=-1,B=null,u.pop(),p=u.length>0?u[u.length-1]:null,t.pop(),o=t.length>0?t[t.length-1]:null},this.getActiveCubeFace=function(){return x},this.getActiveMipmapLevel=function(){return y},this.getRenderTarget=function(){return z},this.setRenderTargetTextures=function(a,b,c){ca.get(a.texture).__webglTexture=b,ca.get(a.depthTexture).__webglTexture=c;const d=ca.get(a);d.__hasExternalTextures=!0,d.__hasExternalTextures&&(d.__autoAllocateDepthBuffer=void 0===c,!d.__autoAllocateDepthBuffer&&a.useRenderToTexture&&(console.warn("render-to-texture extension was disabled because an external texture was provided"),a.useRenderToTexture=!1,a.useRenderbuffer=!0))},this.setRenderTargetFramebuffer=function(a,b){const c=ca.get(a);c.__webglFramebuffer=b,c.__useDefaultFramebuffer=void 0===b},this.setRenderTarget=function(a,b=0,c=0){z=a,x=b,y=c;let d=!0;if(a){const e=ca.get(a);void 0!==e.__useDefaultFramebuffer?(aa.bindFramebuffer(36160,null),d=!1):void 0===e.__webglFramebuffer?da.setupRenderTarget(a):e.__hasExternalTextures&&da.rebindTextures(a,ca.get(a.texture).__webglTexture,ca.get(a.depthTexture).__webglTexture)}let f=null,g=!1,h=!1;if(a){const i=a.texture;(i.isDataTexture3D||i.isDataTexture2DArray)&&(h=!0);const j=ca.get(a).__webglFramebuffer;a.isWebGLCubeRenderTarget?(f=j[b],g=!0):f=a.useRenderbuffer?ca.get(a).__webglMultisampledFramebuffer:j,C.copy(a.viewport),D.copy(a.scissor),E=a.scissorTest}else C.copy(K).multiplyScalar(H).floor(),D.copy(L).multiplyScalar(H).floor(),E=M;const k=aa.bindFramebuffer(36160,f);if(k&&_.drawBuffers&&d&&aa.drawBuffers(a,f),aa.viewport(C),aa.scissor(D),aa.setScissorTest(E),g){const l=ca.get(a.texture);V.framebufferTexture2D(36160,36064,34069+b,l.__webglTexture,c)}else if(h){const m=ca.get(a.texture),n=b||0;V.framebufferTextureLayer(36160,36064,m.__webglTexture,c||0,n)}A=-1},this.readRenderTargetPixels=function(a,b,c,d,e,f,g){if(!(a&&a.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let h=ca.get(a).__webglFramebuffer;if(a.isWebGLCubeRenderTarget&& void 0!==g&&(h=h[g]),h){aa.bindFramebuffer(36160,h);try{const i=a.texture,j=i.format,k=i.type;if(j!==s&&ta.convert(j)!==V.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const l=1016===k&&($.has("EXT_color_buffer_half_float")||_.isWebGL2&&$.has("EXT_color_buffer_float"));if(1009!==k&&ta.convert(k)!==V.getParameter(35738)&&!(1015===k&&(_.isWebGL2||$.has("OES_texture_float")||$.has("WEBGL_color_buffer_float")))&&!l){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}36053===V.checkFramebufferStatus(36160)?b>=0&&b<=a.width-d&&c>=0&&c<=a.height-e&&V.readPixels(b,c,d,e,ta.convert(j),ta.convert(k),f):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const m=null!==z?ca.get(z).__webglFramebuffer:null;aa.bindFramebuffer(36160,m)}}},this.copyFramebufferToTexture=function(a,b,c=0){if(!0!==b.isFramebufferTexture){console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");return}const d=Math.pow(2,-c),e=Math.floor(b.image.width*d),f=Math.floor(b.image.height*d);da.setTexture2D(b,0),V.copyTexSubImage2D(3553,c,0,0,a.x,a.y,e,f),aa.unbindTexture()},this.copyTextureToTexture=function(a,b,c,d=0){const e=b.image.width,f=b.image.height,g=ta.convert(c.format),h=ta.convert(c.type);da.setTexture2D(c,0),V.pixelStorei(37440,c.flipY),V.pixelStorei(37441,c.premultiplyAlpha),V.pixelStorei(3317,c.unpackAlignment),b.isDataTexture?V.texSubImage2D(3553,d,a.x,a.y,e,f,g,h,b.image.data):b.isCompressedTexture?V.compressedTexSubImage2D(3553,d,a.x,a.y,b.mipmaps[0].width,b.mipmaps[0].height,g,b.mipmaps[0].data):V.texSubImage2D(3553,d,a.x,a.y,g,h,b.image),0===d&&c.generateMipmaps&&V.generateMipmap(3553),aa.unbindTexture()},this.copyTextureToTexture3D=function(a,b,c,d,e=0){if(v.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const f=a.max.x-a.min.x+1,g=a.max.y-a.min.y+1,h=a.max.z-a.min.z+1,i=ta.convert(d.format),j=ta.convert(d.type);let k;if(d.isDataTexture3D)da.setTexture3D(d,0),k=32879;else if(d.isDataTexture2DArray)da.setTexture2DArray(d,0),k=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}V.pixelStorei(37440,d.flipY),V.pixelStorei(37441,d.premultiplyAlpha),V.pixelStorei(3317,d.unpackAlignment);const l=V.getParameter(3314),m=V.getParameter(32878),n=V.getParameter(3316),o=V.getParameter(3315),p=V.getParameter(32877),q=c.isCompressedTexture?c.mipmaps[0]:c.image;V.pixelStorei(3314,q.width),V.pixelStorei(32878,q.height),V.pixelStorei(3316,a.min.x),V.pixelStorei(3315,a.min.y),V.pixelStorei(32877,a.min.z),c.isDataTexture||c.isDataTexture3D?V.texSubImage3D(k,e,b.x,b.y,b.z,f,g,h,i,j,q.data):c.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),V.compressedTexSubImage3D(k,e,b.x,b.y,b.z,f,g,h,i,q.data)):V.texSubImage3D(k,e,b.x,b.y,b.z,f,g,h,i,j,q),V.pixelStorei(3314,l),V.pixelStorei(32878,m),V.pixelStorei(3316,n),V.pixelStorei(3315,o),V.pixelStorei(32877,p),0===e&&d.generateMipmaps&&V.generateMipmap(k),aa.unbindTexture()},this.initTexture=function(a){da.setTexture2D(a,0),aa.unbindTexture()},this.resetState=function(){x=0,y=0,z=null,aa.reset(),ua.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}tS.prototype.isWebGLRenderer=!0;class uS extends tS{}uS.prototype.isWebGL1Renderer=!0;class vS{constructor(wS,xS=0.00025){this.name="",this.color=new Gd(wS),this.density=xS}clone(){return new vS(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}vS.prototype.isFogExp2=!0;class yS{constructor(zS,AS=1,BS=1000){this.name="",this.color=new Gd(zS),this.near=AS,this.far=BS}clone(){return new yS(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}yS.prototype.isFog=!0;class CS extends Vw{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(DS,ES){return super.copy(DS,ES),null!==DS.background&&(this.background=DS.background.clone()),null!==DS.environment&&(this.environment=DS.environment.clone()),null!==DS.fog&&(this.fog=DS.fog.clone()),null!==DS.overrideMaterial&&(this.overrideMaterial=DS.overrideMaterial.clone()),this.autoUpdate=DS.autoUpdate,this.matrixAutoUpdate=DS.matrixAutoUpdate,this}toJSON(FS){const GS=super.toJSON(FS);return null!==this.fog&&(GS.object.fog=this.fog.toJSON()),GS}}CS.prototype.isScene=!0;class HS{constructor(IS,JS){this.array=IS,this.stride=JS,this.count=void 0!==IS?IS.length/JS:0,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Z()}onUploadCallback(){}set needsUpdate(KS){!0===KS&&this.version++}setUsage(LS){return this.usage=LS,this}copy(MS){return this.array=new MS.array.constructor(MS.array),this.count=MS.count,this.stride=MS.stride,this.usage=MS.usage,this}copyAt(NS,OS,PS){NS*=this.stride,PS*=OS.stride;for(let QS=0,RS=this.stride;QS<RS;QS++)this.array[NS+QS]=OS.array[PS+QS];return this}set(SS,TS=0){return this.array.set(SS,TS),this}clone(US){void 0===US.arrayBuffers&&(US.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Z()),void 0===US.arrayBuffers[this.array.buffer._uuid]&&(US.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const VS=new this.array.constructor(US.arrayBuffers[this.array.buffer._uuid]),WS=new this.constructor(VS,this.stride);return WS.setUsage(this.usage),WS}onUpload(XS){return this.onUploadCallback=XS,this}toJSON(YS){return void 0===YS.arrayBuffers&&(YS.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Z()),void 0===YS.arrayBuffers[this.array.buffer._uuid]&&(YS.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}HS.prototype.isInterleavedBuffer=!0;const ZS=new qk();class $S{constructor(_S,aT,bT,cT=!1){this.name="",this.data=_S,this.itemSize=aT,this.offset=bT,this.normalized=!0===cT}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(dT){this.data.needsUpdate=dT}applyMatrix4(eT){for(let fT=0,gT=this.data.count;fT<gT;fT++)ZS.x=this.getX(fT),ZS.y=this.getY(fT),ZS.z=this.getZ(fT),ZS.applyMatrix4(eT),this.setXYZ(fT,ZS.x,ZS.y,ZS.z);return this}applyNormalMatrix(hT){for(let iT=0,jT=this.count;iT<jT;iT++)ZS.x=this.getX(iT),ZS.y=this.getY(iT),ZS.z=this.getZ(iT),ZS.applyNormalMatrix(hT),this.setXYZ(iT,ZS.x,ZS.y,ZS.z);return this}transformDirection(kT){for(let lT=0,mT=this.count;lT<mT;lT++)ZS.x=this.getX(lT),ZS.y=this.getY(lT),ZS.z=this.getZ(lT),ZS.transformDirection(kT),this.setXYZ(lT,ZS.x,ZS.y,ZS.z);return this}setX(nT,oT){return this.data.array[nT*this.data.stride+this.offset]=oT,this}setY(pT,qT){return this.data.array[pT*this.data.stride+this.offset+1]=qT,this}setZ(rT,sT){return this.data.array[rT*this.data.stride+this.offset+2]=sT,this}setW(tT,uT){return this.data.array[tT*this.data.stride+this.offset+3]=uT,this}getX(vT){return this.data.array[vT*this.data.stride+this.offset]}getY(wT){return this.data.array[wT*this.data.stride+this.offset+1]}getZ(xT){return this.data.array[xT*this.data.stride+this.offset+2]}getW(yT){return this.data.array[yT*this.data.stride+this.offset+3]}setXY(zT,AT,BT){return zT=zT*this.data.stride+this.offset,this.data.array[zT+0]=AT,this.data.array[zT+1]=BT,this}setXYZ(CT,DT,ET,FT){return CT=CT*this.data.stride+this.offset,this.data.array[CT+0]=DT,this.data.array[CT+1]=ET,this.data.array[CT+2]=FT,this}setXYZW(GT,HT,IT,JT,KT){return GT=GT*this.data.stride+this.offset,this.data.array[GT+0]=HT,this.data.array[GT+1]=IT,this.data.array[GT+2]=JT,this.data.array[GT+3]=KT,this}clone(LT){if(void 0!==LT)return void 0===LT.interleavedBuffers&&(LT.interleavedBuffers={}),void 0===LT.interleavedBuffers[this.data.uuid]&&(LT.interleavedBuffers[this.data.uuid]=this.data.clone(LT)),new $S(LT.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);{console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const MT=[];for(let NT=0;NT<this.count;NT++){const OT=NT*this.data.stride+this.offset;for(let PT=0;PT<this.itemSize;PT++)MT.push(this.data.array[OT+PT])}return new WA(new this.array.constructor(MT),this.itemSize,this.normalized)}}toJSON(QT){if(void 0!==QT)return void 0===QT.interleavedBuffers&&(QT.interleavedBuffers={}),void 0===QT.interleavedBuffers[this.data.uuid]&&(QT.interleavedBuffers[this.data.uuid]=this.data.toJSON(QT)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized};{console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const RT=[];for(let ST=0;ST<this.count;ST++){const TT=ST*this.data.stride+this.offset;for(let UT=0;UT<this.itemSize;UT++)RT.push(this.data.array[TT+UT])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:RT,normalized:this.normalized}}}}$S.prototype.isInterleavedBufferAttribute=!0;class VT extends zA{constructor(WT){super(),this.type="SpriteMaterial",this.color=new Gd(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(WT)}copy(XT){return super.copy(XT),this.color.copy(XT.color),this.map=XT.map,this.alphaMap=XT.alphaMap,this.rotation=XT.rotation,this.sizeAttenuation=XT.sizeAttenuation,this}}VT.prototype.isSpriteMaterial=!0;let YT;const ZT=new qk(),$T=new qk(),_T=new qk(),aU=new ea(),bU=new ea(),cU=new Kq(),dU=new qk(),eU=new qk(),fU=new qk(),gU=new ea(),hU=new ea(),iU=new ea();function jU(a,b,c,d,e,f){aU.subVectors(a,c).addScalar(0.5).multiply(d),void 0!==e?(bU.x=f*aU.x-e*aU.y,bU.y=e*aU.x+f*aU.y):bU.copy(aU),a.copy(b),a.x+=bU.x,a.y+=bU.y,a.applyMatrix4(cU)}(class extends Vw{constructor(kU){if(super(),this.type="Sprite",void 0===YT){YT=new PC();const lU=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]),mU=new HS(lU,5);YT.setIndex([0,1,2,0,2,3]),YT.setAttribute("position",new $S(mU,3,0,!1)),YT.setAttribute("uv",new $S(mU,2,3,!1))}this.geometry=YT,this.material=void 0!==kU?kU:new VT(),this.center=new ea(0.5,0.5)}raycast(nU,oU){null===nU.camera&&console.error("THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites."),$T.setFromMatrixScale(this.matrixWorld),cU.copy(nU.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(nU.camera.matrixWorldInverse,this.matrixWorld),_T.setFromMatrixPosition(this.modelViewMatrix),nU.camera.isPerspectiveCamera&& !1===this.material.sizeAttenuation&&$T.multiplyScalar(-_T.z);const pU=this.material.rotation;let qU,rU;0!==pU&&(rU=Math.cos(pU),qU=Math.sin(pU));const sU=this.center;jU(dU.set(-0.5,-0.5,0),_T,sU,$T,qU,rU),jU(eU.set(0.5,-0.5,0),_T,sU,$T,qU,rU),jU(fU.set(0.5,0.5,0),_T,sU,$T,qU,rU),gU.set(0,0),hU.set(1,0),iU.set(1,1);let tU=nU.ray.intersectTriangle(dU,eU,fU,!1,ZT);if(null===tU&&(jU(eU.set(-0.5,0.5,0),_T,sU,$T,qU,rU),hU.set(0,1),null===(tU=nU.ray.intersectTriangle(dU,fU,eU,!1,ZT))))return;const uU=nU.ray.origin.distanceTo(ZT);uU<nU.near||uU>nU.far||oU.push({distance:uU,point:ZT.clone(),uv:Yy.getUV(ZT,dU,eU,fU,gU,hU,iU,new ea()),face:null,object:this})}copy(vU){return super.copy(vU),void 0!==vU.center&&this.center.copy(vU.center),this.material=vU.material,this}}).prototype.isSprite=!0,new qk(),new qk();const wU=new qk(),xU=new Df(),yU=new Df(),zU=new qk(),AU=new Kq();class BU extends yG{constructor(CU,DU){super(CU,DU),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Kq(),this.bindMatrixInverse=new Kq()}copy(EU){return super.copy(EU),this.bindMode=EU.bindMode,this.bindMatrix.copy(EU.bindMatrix),this.bindMatrixInverse.copy(EU.bindMatrixInverse),this.skeleton=EU.skeleton,this}bind(FU,GU){this.skeleton=FU,void 0===GU&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),GU=this.matrixWorld),this.bindMatrix.copy(GU),this.bindMatrixInverse.copy(GU).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const HU=new Df(),IU=this.geometry.attributes.skinWeight;for(let JU=0,KU=IU.count;JU<KU;JU++){HU.x=IU.getX(JU),HU.y=IU.getY(JU),HU.z=IU.getZ(JU),HU.w=IU.getW(JU);const LU=1/HU.manhattanLength();LU!==1/0?HU.multiplyScalar(LU):HU.set(1,0,0,0),IU.setXYZW(JU,HU.x,HU.y,HU.z,HU.w)}}updateMatrixWorld(MU){super.updateMatrixWorld(MU),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(NU,OU){const PU=this.skeleton,QU=this.geometry;xU.fromBufferAttribute(QU.attributes.skinIndex,NU),yU.fromBufferAttribute(QU.attributes.skinWeight,NU),wU.copy(OU).applyMatrix4(this.bindMatrix),OU.set(0,0,0);for(let RU=0;RU<4;RU++){const SU=yU.getComponent(RU);if(0!==SU){const TU=xU.getComponent(RU);AU.multiplyMatrices(PU.bones[TU].matrixWorld,PU.boneInverses[TU]),OU.addScaledVector(zU.copy(wU).applyMatrix4(AU),SU)}}return OU.applyMatrix4(this.bindMatrixInverse)}}BU.prototype.isSkinnedMesh=!0;class UU extends Vw{constructor(){super(),this.type="Bone"}}UU.prototype.isBone=!0;class VU extends gf{constructor(WU=null,XU=1,YU=1,ZU,$U,_U,aV,bV,cV=q,dV=q,eV,fV){super(null,_U,aV,bV,cV,dV,ZU,$U,eV,fV),this.image={data:WU,width:XU,height:YU},this.magFilter=cV,this.minFilter=dV,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}VU.prototype.isDataTexture=!0;const gV=new Kq(),hV=new Kq();class iV{constructor(jV=[],kV=[]){this.uuid=Z(),this.bones=jV.slice(0),this.boneInverses=kV,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const lV=this.bones,mV=this.boneInverses;if(this.boneMatrices=new Float32Array(16*lV.length),0===mV.length)this.calculateInverses();else if(lV.length!==mV.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let nV=0,oV=this.bones.length;nV<oV;nV++)this.boneInverses.push(new Kq())}}calculateInverses(){this.boneInverses.length=0;for(let pV=0,qV=this.bones.length;pV<qV;pV++){const rV=new Kq();this.bones[pV]&&rV.copy(this.bones[pV].matrixWorld).invert(),this.boneInverses.push(rV)}}pose(){for(let sV=0,tV=this.bones.length;sV<tV;sV++){const uV=this.bones[sV];uV&&uV.matrixWorld.copy(this.boneInverses[sV]).invert()}for(let vV=0,wV=this.bones.length;vV<wV;vV++){const xV=this.bones[vV];xV&&(xV.parent&&xV.parent.isBone?(xV.matrix.copy(xV.parent.matrixWorld).invert(),xV.matrix.multiply(xV.matrixWorld)):xV.matrix.copy(xV.matrixWorld),xV.matrix.decompose(xV.position,xV.quaternion,xV.scale))}}update(){const yV=this.bones,zV=this.boneInverses,AV=this.boneMatrices,BV=this.boneTexture;for(let CV=0,DV=yV.length;CV<DV;CV++){const EV=yV[CV]?yV[CV].matrixWorld:hV;gV.multiplyMatrices(EV,zV[CV]),gV.toArray(AV,16*CV)}null!==BV&&(BV.needsUpdate=!0)}clone(){return new iV(this.bones,this.boneInverses)}computeBoneTexture(){let FV=Math.sqrt(4*this.bones.length);FV=Math.max(FV=ca(FV),4);const GV=new Float32Array(FV*FV*4);GV.set(this.boneMatrices);const HV=new VU(GV,FV,FV,s,1015);return HV.needsUpdate=!0,this.boneMatrices=GV,this.boneTexture=HV,this.boneTextureSize=FV,this}getBoneByName(IV){for(let JV=0,KV=this.bones.length;JV<KV;JV++){const LV=this.bones[JV];if(LV.name===IV)return LV}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(MV,NV){this.uuid=MV.uuid;for(let OV=0,PV=MV.bones.length;OV<PV;OV++){const QV=MV.bones[OV];let RV=NV[QV];void 0===RV&&(console.warn("THREE.Skeleton: No bone found with UUID:",QV),RV=new UU()),this.bones.push(RV),this.boneInverses.push(new Kq().fromArray(MV.boneInverses[OV]))}return this.init(),this}toJSON(){const SV={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};SV.uuid=this.uuid;const TV=this.bones,UV=this.boneInverses;for(let VV=0,WV=TV.length;VV<WV;VV++){const XV=TV[VV];SV.bones.push(XV.uuid);const YV=UV[VV];SV.boneInverses.push(YV.toArray())}return SV}}class ZV extends WA{constructor($V,_V,aW,bW=1){"number"==typeof aW&&(bW=aW,aW=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super($V,_V,aW),this.meshPerAttribute=bW}copy(cW){return super.copy(cW),this.meshPerAttribute=cW.meshPerAttribute,this}toJSON(){const dW=super.toJSON();return dW.meshPerAttribute=this.meshPerAttribute,dW.isInstancedBufferAttribute=!0,dW}}ZV.prototype.isInstancedBufferAttribute=!0;const eW=new Kq(),fW=new Kq(),gW=[],hW=new yG();(class extends yG{constructor(iW,jW,kW){super(iW,jW),this.instanceMatrix=new ZV(new Float32Array(16*kW),16),this.instanceColor=null,this.count=kW,this.frustumCulled=!1}copy(lW){return super.copy(lW),this.instanceMatrix.copy(lW.instanceMatrix),null!==lW.instanceColor&&(this.instanceColor=lW.instanceColor.clone()),this.count=lW.count,this}getColorAt(mW,nW){nW.fromArray(this.instanceColor.array,3*mW)}getMatrixAt(oW,pW){pW.fromArray(this.instanceMatrix.array,16*oW)}raycast(qW,rW){const sW=this.matrixWorld,tW=this.count;if(hW.geometry=this.geometry,hW.material=this.material,void 0!==hW.material)for(let uW=0;uW<tW;uW++){this.getMatrixAt(uW,eW),fW.multiplyMatrices(sW,eW),hW.matrixWorld=fW,hW.raycast(qW,gW);for(let vW=0,wW=gW.length;vW<wW;vW++){const xW=gW[vW];xW.instanceId=uW,xW.object=this,rW.push(xW)}gW.length=0}}setColorAt(yW,zW){null===this.instanceColor&&(this.instanceColor=new ZV(new Float32Array(3*this.instanceMatrix.count),3)),zW.toArray(this.instanceColor.array,3*yW)}setMatrixAt(AW,BW){BW.toArray(this.instanceMatrix.array,16*AW)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class CW extends zA{constructor(DW){super(),this.type="LineBasicMaterial",this.color=new Gd(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(DW)}copy(EW){return super.copy(EW),this.color.copy(EW.color),this.linewidth=EW.linewidth,this.linecap=EW.linecap,this.linejoin=EW.linejoin,this}}CW.prototype.isLineBasicMaterial=!0;const FW=new qk(),GW=new qk(),HW=new Kq(),IW=new qp(),JW=new Ho();class KW extends Vw{constructor(LW=new PC(),MW=new CW()){super(),this.type="Line",this.geometry=LW,this.material=MW,this.updateMorphTargets()}copy(NW){return super.copy(NW),this.material=NW.material,this.geometry=NW.geometry,this}computeLineDistances(){const OW=this.geometry;if(OW.isBufferGeometry)if(null===OW.index){const PW=OW.attributes.position,QW=[0];for(let RW=1,SW=PW.count;RW<SW;RW++)FW.fromBufferAttribute(PW,RW-1),GW.fromBufferAttribute(PW,RW),QW[RW]=QW[RW-1],QW[RW]+=FW.distanceTo(GW);OW.setAttribute("lineDistance",new EC(QW,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else OW.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(TW,UW){const VW=this.geometry,WW=this.matrixWorld,XW=TW.params.Line.threshold,YW=VW.drawRange;if(null===VW.boundingSphere&&VW.computeBoundingSphere(),JW.copy(VW.boundingSphere),JW.applyMatrix4(WW),JW.radius+=XW,!1===TW.ray.intersectsSphere(JW))return;HW.copy(WW).invert(),IW.copy(TW.ray).applyMatrix4(HW);const ZW=XW/((this.scale.x+this.scale.y+this.scale.z)/3),$W=ZW*ZW,_W=new qk(),aX=new qk(),bX=new qk(),cX=new qk(),dX=this.isLineSegments?2:1;if(VW.isBufferGeometry){const eX=VW.index,fX=VW.attributes,gX=fX.position;if(null!==eX){const hX=Math.max(0,YW.start),iX=Math.min(eX.count,YW.start+YW.count);for(let jX=hX,kX=iX-1;jX<kX;jX+=dX){const lX=eX.getX(jX),mX=eX.getX(jX+1);_W.fromBufferAttribute(gX,lX),aX.fromBufferAttribute(gX,mX);const nX=IW.distanceSqToSegment(_W,aX,cX,bX);if(nX>$W)continue;cX.applyMatrix4(this.matrixWorld);const oX=TW.ray.origin.distanceTo(cX);oX<TW.near||oX>TW.far||UW.push({distance:oX,point:bX.clone().applyMatrix4(this.matrixWorld),index:jX,face:null,faceIndex:null,object:this})}}else{const pX=Math.max(0,YW.start),qX=Math.min(gX.count,YW.start+YW.count);for(let rX=pX,sX=qX-1;rX<sX;rX+=dX){_W.fromBufferAttribute(gX,rX),aX.fromBufferAttribute(gX,rX+1);const tX=IW.distanceSqToSegment(_W,aX,cX,bX);if(tX>$W)continue;cX.applyMatrix4(this.matrixWorld);const uX=TW.ray.origin.distanceTo(cX);uX<TW.near||uX>TW.far||UW.push({distance:uX,point:bX.clone().applyMatrix4(this.matrixWorld),index:rX,face:null,faceIndex:null,object:this})}}}else VW.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const vX=this.geometry;if(vX.isBufferGeometry){const wX=vX.morphAttributes,xX=Object.keys(wX);if(xX.length>0){const yX=wX[xX[0]];if(void 0!==yX){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let zX=0,AX=yX.length;zX<AX;zX++){const BX=yX[zX].name||String(zX);this.morphTargetInfluences.push(0),this.morphTargetDictionary[BX]=zX}}}}else{const CX=vX.morphTargets;void 0!==CX&&CX.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}KW.prototype.isLine=!0;const DX=new qk(),EX=new qk();class FX extends KW{constructor(GX,HX){super(GX,HX),this.type="LineSegments"}computeLineDistances(){const IX=this.geometry;if(IX.isBufferGeometry)if(null===IX.index){const JX=IX.attributes.position,KX=[];for(let LX=0,MX=JX.count;LX<MX;LX+=2)DX.fromBufferAttribute(JX,LX),EX.fromBufferAttribute(JX,LX+1),KX[LX]=0===LX?0:KX[LX-1],KX[LX+1]=KX[LX]+DX.distanceTo(EX);IX.setAttribute("lineDistance",new EC(KX,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else IX.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}FX.prototype.isLineSegments=!0,(class extends KW{constructor(NX,OX){super(NX,OX),this.type="LineLoop"}}).prototype.isLineLoop=!0;class PX extends zA{constructor(QX){super(),this.type="PointsMaterial",this.color=new Gd(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(QX)}copy(RX){return super.copy(RX),this.color.copy(RX.color),this.map=RX.map,this.alphaMap=RX.alphaMap,this.size=RX.size,this.sizeAttenuation=RX.sizeAttenuation,this}}PX.prototype.isPointsMaterial=!0;const SX=new Kq(),TX=new qp(),UX=new Ho(),VX=new qk();function WX(a,b,c,d,e,f,g){const h=TX.distanceSqToPoint(a);if(h<c){const i=new qk();TX.closestPointToPoint(a,i),i.applyMatrix4(d);const j=e.ray.origin.distanceTo(i);if(j<e.near||j>e.far)return;f.push({distance:j,distanceToRay:Math.sqrt(h),point:i,index:b,face:null,object:g})}}(class extends Vw{constructor(XX=new PC(),YX=new PX()){super(),this.type="Points",this.geometry=XX,this.material=YX,this.updateMorphTargets()}copy(ZX){return super.copy(ZX),this.material=ZX.material,this.geometry=ZX.geometry,this}raycast($X,_X){const aY=this.geometry,bY=this.matrixWorld,cY=$X.params.Points.threshold,dY=aY.drawRange;if(null===aY.boundingSphere&&aY.computeBoundingSphere(),UX.copy(aY.boundingSphere),UX.applyMatrix4(bY),UX.radius+=cY,!1===$X.ray.intersectsSphere(UX))return;SX.copy(bY).invert(),TX.copy($X.ray).applyMatrix4(SX);const eY=cY/((this.scale.x+this.scale.y+this.scale.z)/3),fY=eY*eY;if(aY.isBufferGeometry){const gY=aY.index,hY=aY.attributes,iY=hY.position;if(null!==gY){const jY=Math.max(0,dY.start),kY=Math.min(gY.count,dY.start+dY.count);for(let lY=jY,mY=kY;lY<mY;lY++){const nY=gY.getX(lY);VX.fromBufferAttribute(iY,nY),WX(VX,nY,fY,bY,$X,_X,this)}}else{const oY=Math.max(0,dY.start),pY=Math.min(iY.count,dY.start+dY.count);for(let qY=oY,rY=pY;qY<rY;qY++)VX.fromBufferAttribute(iY,qY),WX(VX,qY,fY,bY,$X,_X,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const sY=this.geometry;if(sY.isBufferGeometry){const tY=sY.morphAttributes,uY=Object.keys(tY);if(uY.length>0){const vY=tY[uY[0]];if(void 0!==vY){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let wY=0,xY=vY.length;wY<xY;wY++){const yY=vY[wY].name||String(wY);this.morphTargetInfluences.push(0),this.morphTargetDictionary[yY]=wY}}}}else{const zY=sY.morphTargets;void 0!==zY&&zY.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}).prototype.isPoints=!0,(class extends gf{constructor(AY,BY,CY,DY,EY,FY,GY,HY,IY){super(AY,BY,CY,DY,EY,FY,GY,HY,IY),this.minFilter=void 0!==FY?FY:1006,this.magFilter=void 0!==EY?EY:1006,this.generateMipmaps=!1;const JY=this;function KY(){JY.needsUpdate=!0,AY.requestVideoFrameCallback(KY)}"requestVideoFrameCallback"in AY&&AY.requestVideoFrameCallback(KY)}clone(){return new this.constructor(this.image).copy(this)}update(){const LY=this.image;!1=="requestVideoFrameCallback"in LY&&LY.readyState>=LY.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}).prototype.isVideoTexture=!0,(class extends gf{constructor(MY,NY,OY){super({width:MY,height:NY}),this.format=OY,this.magFilter=q,this.minFilter=q,this.generateMipmaps=!1,this.needsUpdate=!0}}).prototype.isFramebufferTexture=!0;class PY extends gf{constructor(QY,RY,SY,TY,UY,VY,WY,XY,YY,ZY,$Y,_Y){super(null,VY,WY,XY,YY,ZY,TY,UY,$Y,_Y),this.image={width:RY,height:SY},this.mipmaps=QY,this.flipY=!1,this.generateMipmaps=!1}}PY.prototype.isCompressedTexture=!0,(class extends gf{constructor(aZ,bZ,cZ,dZ,eZ,fZ,gZ,hZ,iZ){super(aZ,bZ,cZ,dZ,eZ,fZ,gZ,hZ,iZ),this.needsUpdate=!0}}).prototype.isCanvasTexture=!0;class jZ extends PC{constructor(kZ=1,lZ=8,mZ=0,nZ=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:kZ,segments:lZ,thetaStart:mZ,thetaLength:nZ},lZ=Math.max(3,lZ);const oZ=[],pZ=[],qZ=[],rZ=[],sZ=new qk(),tZ=new ea();pZ.push(0,0,0),qZ.push(0,0,1),rZ.push(0.5,0.5);for(let uZ=0,vZ=3;uZ<=lZ;uZ++,vZ+=3){const wZ=mZ+uZ/lZ*nZ;sZ.x=kZ*Math.cos(wZ),sZ.y=kZ*Math.sin(wZ),pZ.push(sZ.x,sZ.y,sZ.z),qZ.push(0,0,1),tZ.x=(pZ[vZ]/kZ+1)/2,tZ.y=(pZ[vZ+1]/kZ+1)/2,rZ.push(tZ.x,tZ.y)}for(let xZ=1;xZ<=lZ;xZ++)oZ.push(xZ,xZ+1,0);this.setIndex(oZ),this.setAttribute("position",new EC(pZ,3)),this.setAttribute("normal",new EC(qZ,3)),this.setAttribute("uv",new EC(rZ,2))}static fromJSON(yZ){return new jZ(yZ.radius,yZ.segments,yZ.thetaStart,yZ.thetaLength)}}class zZ extends PC{constructor(AZ=1,BZ=1,CZ=1,DZ=8,EZ=1,FZ=!1,GZ=0,HZ=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:AZ,radiusBottom:BZ,height:CZ,radialSegments:DZ,heightSegments:EZ,openEnded:FZ,thetaStart:GZ,thetaLength:HZ};const IZ=this;DZ=Math.floor(DZ),EZ=Math.floor(EZ);const JZ=[],KZ=[],LZ=[],MZ=[];let NZ=0;const OZ=[],PZ=CZ/2;let QZ=0;function RZ(a){const b=NZ,c=new ea(),d=new qk();let e=0;const f=!0===a?AZ:BZ,g=!0===a?1:-1;for(let h=1;h<=DZ;h++)KZ.push(0,PZ*g,0),LZ.push(0,g,0),MZ.push(0.5,0.5),NZ++;const i=NZ;for(let j=0;j<=DZ;j++){const k=j/DZ,l=k*HZ+GZ,m=Math.cos(l),n=Math.sin(l);d.x=f*n,d.y=PZ*g,d.z=f*m,KZ.push(d.x,d.y,d.z),LZ.push(0,g,0),c.x=0.5*m+0.5,c.y=0.5*n*g+0.5,MZ.push(c.x,c.y),NZ++}for(let o=0;o<DZ;o++){const p=b+o,q=i+o;!0===a?JZ.push(q,q+1,p):JZ.push(q+1,q,p),e+=3}IZ.addGroup(QZ,e,!0===a?1:2),QZ+=e}(function(){const a=new qk(),b=new qk();let c=0;const d=(BZ-AZ)/CZ;for(let e=0;e<=EZ;e++){const f=[],g=e/EZ,h=g*(BZ-AZ)+AZ;for(let i=0;i<=DZ;i++){const j=i/DZ,k=j*HZ+GZ,l=Math.sin(k),m=Math.cos(k);b.x=h*l,b.y=-g*CZ+PZ,b.z=h*m,KZ.push(b.x,b.y,b.z),a.set(l,d,m).normalize(),LZ.push(a.x,a.y,a.z),MZ.push(j,1-g),f.push(NZ++)}OZ.push(f)}for(let n=0;n<DZ;n++)for(let o=0;o<EZ;o++){const p=OZ[o][n],q=OZ[o+1][n],r=OZ[o+1][n+1],s=OZ[o][n+1];JZ.push(p,q,s),JZ.push(q,r,s),c+=6}IZ.addGroup(QZ,c,0),QZ+=c})(),!1===FZ&&(AZ>0&&RZ(!0),BZ>0&&RZ(!1)),this.setIndex(JZ),this.setAttribute("position",new EC(KZ,3)),this.setAttribute("normal",new EC(LZ,3)),this.setAttribute("uv",new EC(MZ,2))}static fromJSON(SZ){return new zZ(SZ.radiusTop,SZ.radiusBottom,SZ.height,SZ.radialSegments,SZ.heightSegments,SZ.openEnded,SZ.thetaStart,SZ.thetaLength)}}class TZ extends zZ{constructor(UZ=1,VZ=1,WZ=8,XZ=1,YZ=!1,ZZ=0,$Z=2*Math.PI){super(0,UZ,VZ,WZ,XZ,YZ,ZZ,$Z),this.type="ConeGeometry",this.parameters={radius:UZ,height:VZ,radialSegments:WZ,heightSegments:XZ,openEnded:YZ,thetaStart:ZZ,thetaLength:$Z}}static fromJSON(_Z){return new TZ(_Z.radius,_Z.height,_Z.radialSegments,_Z.heightSegments,_Z.openEnded,_Z.thetaStart,_Z.thetaLength)}}class a$ extends PC{constructor(b$=[],c$=[],d$=1,e$=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:b$,indices:c$,radius:d$,detail:e$};const f$=[],g$=[];function h$(a,b,c,d){const e=d+1,f=[];for(let g=0;g<=e;g++){f[g]=[];const h=a.clone().lerp(c,g/e),i=b.clone().lerp(c,g/e),j=e-g;for(let k=0;k<=j;k++)0===k&&g===e?f[g][k]=h:f[g][k]=h.clone().lerp(i,k/j)}for(let l=0;l<e;l++)for(let m=0;m<2*(e-l)-1;m++){const n=Math.floor(m/2);m%2==0?(i$(f[l][n+1]),i$(f[l+1][n]),i$(f[l][n])):(i$(f[l][n+1]),i$(f[l+1][n+1]),i$(f[l+1][n]))}}function i$(a){f$.push(a.x,a.y,a.z)}function j$(a,b){const c=3*a;b.x=b$[c+0],b.y=b$[c+1],b.z=b$[c+2]}function k$(a,b,c,d){d<0&&1===a.x&&(g$[b]=a.x-1),0===c.x&&0===c.z&&(g$[b]=d/2/Math.PI+0.5)}function l$(a){return Math.atan2(a.z,-a.x)}function m$(a){return Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))}(function(a){const b=new qk(),c=new qk(),d=new qk();for(let e=0;e<c$.length;e+=3)j$(c$[e+0],b),j$(c$[e+1],c),j$(c$[e+2],d),h$(b,c,d,a)})(e$),(function(a){const b=new qk();for(let c=0;c<f$.length;c+=3)b.x=f$[c+0],b.y=f$[c+1],b.z=f$[c+2],b.normalize().multiplyScalar(a),f$[c+0]=b.x,f$[c+1]=b.y,f$[c+2]=b.z})(d$),(function(){const a=new qk();for(let b=0;b<f$.length;b+=3){a.x=f$[b+0],a.y=f$[b+1],a.z=f$[b+2];const c=l$(a)/2/Math.PI+0.5,d=m$(a)/Math.PI+0.5;g$.push(c,1-d)}(function(){const a=new qk(),b=new qk(),c=new qk(),d=new qk(),e=new ea(),f=new ea(),g=new ea();for(let h=0,i=0;h<f$.length;h+=9,i+=6){a.set(f$[h+0],f$[h+1],f$[h+2]),b.set(f$[h+3],f$[h+4],f$[h+5]),c.set(f$[h+6],f$[h+7],f$[h+8]),e.set(g$[i+0],g$[i+1]),f.set(g$[i+2],g$[i+3]),g.set(g$[i+4],g$[i+5]),d.copy(a).add(b).add(c).divideScalar(3);const j=l$(d);k$(e,i+0,a,j),k$(f,i+2,b,j),k$(g,i+4,c,j)}})(),(function(){for(let a=0;a<g$.length;a+=6){const b=g$[a+0],c=g$[a+2],d=g$[a+4],e=Math.max(b,c,d),f=Math.min(b,c,d);e>0.9&&f<0.1&&(b<0.2&&(g$[a+0]+=1),c<0.2&&(g$[a+2]+=1),d<0.2&&(g$[a+4]+=1))}})()})(),this.setAttribute("position",new EC(f$,3)),this.setAttribute("normal",new EC(f$.slice(),3)),this.setAttribute("uv",new EC(g$,2)),0===e$?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(n$){return new a$(n$.vertices,n$.indices,n$.radius,n$.details)}}class o$ extends a${constructor(p$=1,q$=0){const r$=(1+Math.sqrt(5))/2,s$=1/r$;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-s$,-r$,0,-s$,r$,0,s$,-r$,0,s$,r$,-s$,-r$,0,-s$,r$,0,s$,-r$,0,s$,r$,0,-r$,0,-s$,r$,0,-s$,-r$,0,s$,r$,0,s$],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],p$,q$),this.type="DodecahedronGeometry",this.parameters={radius:p$,detail:q$}}static fromJSON(t$){return new o$(t$.radius,t$.detail)}}const u$=new qk(),v$=new qk(),w$=new qk(),x$=new Yy();class y${constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(z$,A$){const B$=this.getUtoTmapping(z$);return this.getPoint(B$,A$)}getPoints(C$=5){const D$=[];for(let E$=0;E$<=C$;E$++)D$.push(this.getPoint(E$/C$));return D$}getSpacedPoints(F$=5){const G$=[];for(let H$=0;H$<=F$;H$++)G$.push(this.getPointAt(H$/F$));return G$}getLength(){const I$=this.getLengths();return I$[I$.length-1]}getLengths(J$=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===J$+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const K$=[];let L$,M$=this.getPoint(0),N$=0;K$.push(0);for(let O$=1;O$<=J$;O$++)N$+=(L$=this.getPoint(O$/J$)).distanceTo(M$),K$.push(N$),M$=L$;return this.cacheArcLengths=K$,K$}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(P$,Q$){const R$=this.getLengths();let S$=0;const T$=R$.length;let U$;U$=Q$||P$*R$[T$-1];let V$=0,W$=T$-1,X$;for(;V$<=W$;)if((X$=R$[S$=Math.floor(V$+(W$-V$)/2)]-U$)<0)V$=S$+1;else if(X$>0)W$=S$-1;else{W$=S$;break}if(R$[S$=W$]===U$)return S$/(T$-1);const Y$=R$[S$],Z$=R$[S$+1];return(S$+(U$-Y$)/(Z$-Y$))/(T$-1)}getTangent($$,_$){const a_=0.0001;let b_=$$-a_,c_=$$+a_;b_<0&&(b_=0),c_>1&&(c_=1);const d_=this.getPoint(b_),e_=this.getPoint(c_),f_=_$||(d_.isVector2?new ea():new qk());return f_.copy(e_).sub(d_).normalize(),f_}getTangentAt(g_,h_){const i_=this.getUtoTmapping(g_);return this.getTangent(i_,h_)}computeFrenetFrames(j_,k_){const l_=new qk(),m_=[],n_=[],o_=[],p_=new qk(),q_=new Kq();for(let r_=0;r_<=j_;r_++){const s_=r_/j_;m_[r_]=this.getTangentAt(s_,new qk())}n_[0]=new qk(),o_[0]=new qk();let t_=Number.MAX_VALUE;const u_=Math.abs(m_[0].x),v_=Math.abs(m_[0].y),w_=Math.abs(m_[0].z);u_<=t_&&(t_=u_,l_.set(1,0,0)),v_<=t_&&(t_=v_,l_.set(0,1,0)),w_<=t_&&l_.set(0,0,1),p_.crossVectors(m_[0],l_).normalize(),n_[0].crossVectors(m_[0],p_),o_[0].crossVectors(m_[0],n_[0]);for(let x_=1;x_<=j_;x_++){if(n_[x_]=n_[x_-1].clone(),o_[x_]=o_[x_-1].clone(),p_.crossVectors(m_[x_-1],m_[x_]),p_.length()>Number.EPSILON){p_.normalize();const y_=Math.acos($(m_[x_-1].dot(m_[x_]),-1,1));n_[x_].applyMatrix4(q_.makeRotationAxis(p_,y_))}o_[x_].crossVectors(m_[x_],n_[x_])}if(!0===k_){let z_=Math.acos($(n_[0].dot(n_[j_]),-1,1));z_/=j_,m_[0].dot(p_.crossVectors(n_[0],n_[j_]))>0&&(z_=-z_);for(let A_=1;A_<=j_;A_++)n_[A_].applyMatrix4(q_.makeRotationAxis(m_[A_],z_*A_)),o_[A_].crossVectors(m_[A_],n_[A_])}return{tangents:m_,normals:n_,binormals:o_}}clone(){return new this.constructor().copy(this)}copy(B_){return this.arcLengthDivisions=B_.arcLengthDivisions,this}toJSON(){const C_={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return C_.arcLengthDivisions=this.arcLengthDivisions,C_.type=this.type,C_}fromJSON(D_){return this.arcLengthDivisions=D_.arcLengthDivisions,this}}class E_ extends y${constructor(F_=0,G_=0,H_=1,I_=1,J_=0,K_=2*Math.PI,L_=!1,M_=0){super(),this.type="EllipseCurve",this.aX=F_,this.aY=G_,this.xRadius=H_,this.yRadius=I_,this.aStartAngle=J_,this.aEndAngle=K_,this.aClockwise=L_,this.aRotation=M_}getPoint(N_,O_){const P_=O_||new ea(),Q_=2*Math.PI;let R_=this.aEndAngle-this.aStartAngle;const S_=Math.abs(R_)<Number.EPSILON;for(;R_<0;)R_+=Q_;for(;R_>Q_;)R_-=Q_;R_<Number.EPSILON&&(R_=S_?0:Q_),!0!==this.aClockwise||S_||(R_===Q_?R_=-Q_:R_-=Q_);const T_=this.aStartAngle+N_*R_;let U_=this.aX+this.xRadius*Math.cos(T_),V_=this.aY+this.yRadius*Math.sin(T_);if(0!==this.aRotation){const W_=Math.cos(this.aRotation),X_=Math.sin(this.aRotation),Y_=U_-this.aX,Z_=V_-this.aY;U_=Y_*W_-Z_*X_+this.aX,V_=Y_*X_+Z_*W_+this.aY}return P_.set(U_,V_)}copy($_){return super.copy($_),this.aX=$_.aX,this.aY=$_.aY,this.xRadius=$_.xRadius,this.yRadius=$_.yRadius,this.aStartAngle=$_.aStartAngle,this.aEndAngle=$_.aEndAngle,this.aClockwise=$_.aClockwise,this.aRotation=$_.aRotation,this}toJSON(){const __=super.toJSON();return __.aX=this.aX,__.aY=this.aY,__.xRadius=this.xRadius,__.yRadius=this.yRadius,__.aStartAngle=this.aStartAngle,__.aEndAngle=this.aEndAngle,__.aClockwise=this.aClockwise,__.aRotation=this.aRotation,__}fromJSON(a0){return super.fromJSON(a0),this.aX=a0.aX,this.aY=a0.aY,this.xRadius=a0.xRadius,this.yRadius=a0.yRadius,this.aStartAngle=a0.aStartAngle,this.aEndAngle=a0.aEndAngle,this.aClockwise=a0.aClockwise,this.aRotation=a0.aRotation,this}}E_.prototype.isEllipseCurve=!0;class b0 extends E_{constructor(c0,d0,e0,f0,g0,h0){super(c0,d0,e0,e0,f0,g0,h0),this.type="ArcCurve"}}function i0(){let a=0,b=0,c=0,d=0;function e(e,f,g,h){a=e,b=g,c=-3*e+3*f-2*g-h,d=2*e-2*f+g+h}return{initCatmullRom:function(a,b,c,d,f){e(b,c,f*(c-a),f*(d-b))},initNonuniformCatmullRom:function(a,b,c,d,f,g,h){let i=(b-a)/f-(c-a)/(f+g)+(c-b)/g,j=(c-b)/g-(d-b)/(g+h)+(d-c)/h;i*=g,j*=g,e(b,c,i,j)},calc:function(e){const f=e*e;return a+b*e+c*f+d*(f*e)}}}b0.prototype.isArcCurve=!0;const j0=new qk(),k0=new i0(),l0=new i0(),m0=new i0();class n0 extends y${constructor(o0=[],p0=!1,q0="centripetal",r0=0.5){super(),this.type="CatmullRomCurve3",this.points=o0,this.closed=p0,this.curveType=q0,this.tension=r0}getPoint(s0,t0=new qk()){const u0=t0,v0=this.points,w0=v0.length,x0=(w0-(this.closed?0:1))*s0;let y0=Math.floor(x0),z0=x0-y0;this.closed?y0+=y0>0?0:(Math.floor(Math.abs(y0)/w0)+1)*w0:0===z0&&y0===w0-1&&(y0=w0-2,z0=1);let A0,B0;this.closed||y0>0?A0=v0[(y0-1)%w0]:(j0.subVectors(v0[0],v0[1]).add(v0[0]),A0=j0);const C0=v0[y0%w0],D0=v0[(y0+1)%w0];if(this.closed||y0+2<w0?B0=v0[(y0+2)%w0]:(j0.subVectors(v0[w0-1],v0[w0-2]).add(v0[w0-1]),B0=j0),"centripetal"===this.curveType||"chordal"===this.curveType){const E0="chordal"===this.curveType?0.5:0.25;let F0=Math.pow(A0.distanceToSquared(C0),E0),G0=Math.pow(C0.distanceToSquared(D0),E0),H0=Math.pow(D0.distanceToSquared(B0),E0);G0<0.0001&&(G0=1),F0<0.0001&&(F0=G0),H0<0.0001&&(H0=G0),k0.initNonuniformCatmullRom(A0.x,C0.x,D0.x,B0.x,F0,G0,H0),l0.initNonuniformCatmullRom(A0.y,C0.y,D0.y,B0.y,F0,G0,H0),m0.initNonuniformCatmullRom(A0.z,C0.z,D0.z,B0.z,F0,G0,H0)}else"catmullrom"===this.curveType&&(k0.initCatmullRom(A0.x,C0.x,D0.x,B0.x,this.tension),l0.initCatmullRom(A0.y,C0.y,D0.y,B0.y,this.tension),m0.initCatmullRom(A0.z,C0.z,D0.z,B0.z,this.tension));return u0.set(k0.calc(z0),l0.calc(z0),m0.calc(z0)),u0}copy(I0){super.copy(I0),this.points=[];for(let J0=0,K0=I0.points.length;J0<K0;J0++){const L0=I0.points[J0];this.points.push(L0.clone())}return this.closed=I0.closed,this.curveType=I0.curveType,this.tension=I0.tension,this}toJSON(){const M0=super.toJSON();M0.points=[];for(let N0=0,O0=this.points.length;N0<O0;N0++){const P0=this.points[N0];M0.points.push(P0.toArray())}return M0.closed=this.closed,M0.curveType=this.curveType,M0.tension=this.tension,M0}fromJSON(Q0){super.fromJSON(Q0),this.points=[];for(let R0=0,S0=Q0.points.length;R0<S0;R0++){const T0=Q0.points[R0];this.points.push(new qk().fromArray(T0))}return this.closed=Q0.closed,this.curveType=Q0.curveType,this.tension=Q0.tension,this}}function U0(a,b,c,d,e){const f=(d-b)*0.5,g=(e-c)*0.5,h=a*a;return(2*c-2*d+f+g)*(a*h)+(-3*c+3*d-2*f-g)*h+f*a+c}function V0(a,b,c,d){var e,f;return(function(a,b){const c=1-a;return c*c*b})(a,b)+2*(1-(e=a))*e*c+(f=a)*f*d}function W0(a,b,c,d,e){var f,g;return(function(a,b){const c=1-a;return c*c*c*b})(a,b)+(function(a,b){const c=1-a;return 3*c*c*a*b})(a,c)+3*(1-(f=a))*f*f*d+(g=a)*g*g*e}n0.prototype.isCatmullRomCurve3=!0;class X0 extends y${constructor(Y0=new ea(),Z0=new ea(),$0=new ea(),_0=new ea()){super(),this.type="CubicBezierCurve",this.v0=Y0,this.v1=Z0,this.v2=$0,this.v3=_0}getPoint(a1,b1=new ea()){const c1=b1,d1=this.v0,e1=this.v1,f1=this.v2,g1=this.v3;return c1.set(W0(a1,d1.x,e1.x,f1.x,g1.x),W0(a1,d1.y,e1.y,f1.y,g1.y)),c1}copy(h1){return super.copy(h1),this.v0.copy(h1.v0),this.v1.copy(h1.v1),this.v2.copy(h1.v2),this.v3.copy(h1.v3),this}toJSON(){const i1=super.toJSON();return i1.v0=this.v0.toArray(),i1.v1=this.v1.toArray(),i1.v2=this.v2.toArray(),i1.v3=this.v3.toArray(),i1}fromJSON(j1){return super.fromJSON(j1),this.v0.fromArray(j1.v0),this.v1.fromArray(j1.v1),this.v2.fromArray(j1.v2),this.v3.fromArray(j1.v3),this}}X0.prototype.isCubicBezierCurve=!0;class k1 extends y${constructor(l1=new qk(),m1=new qk(),n1=new qk(),o1=new qk()){super(),this.type="CubicBezierCurve3",this.v0=l1,this.v1=m1,this.v2=n1,this.v3=o1}getPoint(p1,q1=new qk()){const r1=q1,s1=this.v0,t1=this.v1,u1=this.v2,v1=this.v3;return r1.set(W0(p1,s1.x,t1.x,u1.x,v1.x),W0(p1,s1.y,t1.y,u1.y,v1.y),W0(p1,s1.z,t1.z,u1.z,v1.z)),r1}copy(w1){return super.copy(w1),this.v0.copy(w1.v0),this.v1.copy(w1.v1),this.v2.copy(w1.v2),this.v3.copy(w1.v3),this}toJSON(){const x1=super.toJSON();return x1.v0=this.v0.toArray(),x1.v1=this.v1.toArray(),x1.v2=this.v2.toArray(),x1.v3=this.v3.toArray(),x1}fromJSON(y1){return super.fromJSON(y1),this.v0.fromArray(y1.v0),this.v1.fromArray(y1.v1),this.v2.fromArray(y1.v2),this.v3.fromArray(y1.v3),this}}k1.prototype.isCubicBezierCurve3=!0;class z1 extends y${constructor(A1=new ea(),B1=new ea()){super(),this.type="LineCurve",this.v1=A1,this.v2=B1}getPoint(C1,D1=new ea()){const E1=D1;return 1===C1?E1.copy(this.v2):(E1.copy(this.v2).sub(this.v1),E1.multiplyScalar(C1).add(this.v1)),E1}getPointAt(F1,G1){return this.getPoint(F1,G1)}getTangent(H1,I1){const J1=I1||new ea();return J1.copy(this.v2).sub(this.v1).normalize(),J1}copy(K1){return super.copy(K1),this.v1.copy(K1.v1),this.v2.copy(K1.v2),this}toJSON(){const L1=super.toJSON();return L1.v1=this.v1.toArray(),L1.v2=this.v2.toArray(),L1}fromJSON(M1){return super.fromJSON(M1),this.v1.fromArray(M1.v1),this.v2.fromArray(M1.v2),this}}z1.prototype.isLineCurve=!0;class N1 extends y${constructor(O1=new ea(),P1=new ea(),Q1=new ea()){super(),this.type="QuadraticBezierCurve",this.v0=O1,this.v1=P1,this.v2=Q1}getPoint(R1,S1=new ea()){const T1=S1,U1=this.v0,V1=this.v1,W1=this.v2;return T1.set(V0(R1,U1.x,V1.x,W1.x),V0(R1,U1.y,V1.y,W1.y)),T1}copy(X1){return super.copy(X1),this.v0.copy(X1.v0),this.v1.copy(X1.v1),this.v2.copy(X1.v2),this}toJSON(){const Y1=super.toJSON();return Y1.v0=this.v0.toArray(),Y1.v1=this.v1.toArray(),Y1.v2=this.v2.toArray(),Y1}fromJSON(Z1){return super.fromJSON(Z1),this.v0.fromArray(Z1.v0),this.v1.fromArray(Z1.v1),this.v2.fromArray(Z1.v2),this}}N1.prototype.isQuadraticBezierCurve=!0;class $1 extends y${constructor(_1=new qk(),a2=new qk(),b2=new qk()){super(),this.type="QuadraticBezierCurve3",this.v0=_1,this.v1=a2,this.v2=b2}getPoint(c2,d2=new qk()){const e2=d2,f2=this.v0,g2=this.v1,h2=this.v2;return e2.set(V0(c2,f2.x,g2.x,h2.x),V0(c2,f2.y,g2.y,h2.y),V0(c2,f2.z,g2.z,h2.z)),e2}copy(i2){return super.copy(i2),this.v0.copy(i2.v0),this.v1.copy(i2.v1),this.v2.copy(i2.v2),this}toJSON(){const j2=super.toJSON();return j2.v0=this.v0.toArray(),j2.v1=this.v1.toArray(),j2.v2=this.v2.toArray(),j2}fromJSON(k2){return super.fromJSON(k2),this.v0.fromArray(k2.v0),this.v1.fromArray(k2.v1),this.v2.fromArray(k2.v2),this}}$1.prototype.isQuadraticBezierCurve3=!0;class l2 extends y${constructor(m2=[]){super(),this.type="SplineCurve",this.points=m2}getPoint(n2,o2=new ea()){const p2=o2,q2=this.points,r2=(q2.length-1)*n2,s2=Math.floor(r2),t2=r2-s2,u2=q2[0===s2?s2:s2-1],v2=q2[s2],w2=q2[s2>q2.length-2?q2.length-1:s2+1],x2=q2[s2>q2.length-3?q2.length-1:s2+2];return p2.set(U0(t2,u2.x,v2.x,w2.x,x2.x),U0(t2,u2.y,v2.y,w2.y,x2.y)),p2}copy(y2){super.copy(y2),this.points=[];for(let z2=0,A2=y2.points.length;z2<A2;z2++){const B2=y2.points[z2];this.points.push(B2.clone())}return this}toJSON(){const C2=super.toJSON();C2.points=[];for(let D2=0,E2=this.points.length;D2<E2;D2++){const F2=this.points[D2];C2.points.push(F2.toArray())}return C2}fromJSON(G2){super.fromJSON(G2),this.points=[];for(let H2=0,I2=G2.points.length;H2<I2;H2++){const J2=G2.points[H2];this.points.push(new ea().fromArray(J2))}return this}}l2.prototype.isSplineCurve=!0;var K2=Object.freeze({__proto__:null,ArcCurve:b0,CatmullRomCurve3:n0,CubicBezierCurve:X0,CubicBezierCurve3:k1,EllipseCurve:E_,LineCurve:z1,LineCurve3:class extends y${constructor(L2=new qk(),M2=new qk()){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=L2,this.v2=M2}getPoint(N2,O2=new qk()){const P2=O2;return 1===N2?P2.copy(this.v2):(P2.copy(this.v2).sub(this.v1),P2.multiplyScalar(N2).add(this.v1)),P2}getPointAt(Q2,R2){return this.getPoint(Q2,R2)}copy(S2){return super.copy(S2),this.v1.copy(S2.v1),this.v2.copy(S2.v2),this}toJSON(){const T2=super.toJSON();return T2.v1=this.v1.toArray(),T2.v2=this.v2.toArray(),T2}fromJSON(U2){return super.fromJSON(U2),this.v1.fromArray(U2.v1),this.v2.fromArray(U2.v2),this}},QuadraticBezierCurve:N1,QuadraticBezierCurve3:$1,SplineCurve:l2});class V2 extends y${constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(W2){this.curves.push(W2)}closePath(){const X2=this.curves[0].getPoint(0),Y2=this.curves[this.curves.length-1].getPoint(1);X2.equals(Y2)||this.curves.push(new z1(Y2,X2))}getPoint(Z2,$2){const _2=Z2*this.getLength(),a3=this.getCurveLengths();let b3=0;for(;b3<a3.length;){if(a3[b3]>=_2){const c3=a3[b3]-_2,d3=this.curves[b3],e3=d3.getLength(),f3=0===e3?0:1-c3/e3;return d3.getPointAt(f3,$2)}b3++}return null}getLength(){const g3=this.getCurveLengths();return g3[g3.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const h3=[];let i3=0;for(let j3=0,k3=this.curves.length;j3<k3;j3++)i3+=this.curves[j3].getLength(),h3.push(i3);return this.cacheLengths=h3,h3}getSpacedPoints(l3=40){const m3=[];for(let n3=0;n3<=l3;n3++)m3.push(this.getPoint(n3/l3));return this.autoClose&&m3.push(m3[0]),m3}getPoints(o3=12){const p3=[];let q3;for(let r3=0,s3=this.curves;r3<s3.length;r3++){const t3=s3[r3],u3=t3&&t3.isEllipseCurve?2*o3:t3&&(t3.isLineCurve||t3.isLineCurve3)?1:t3&&t3.isSplineCurve?o3*t3.points.length:o3,v3=t3.getPoints(u3);for(let w3=0;w3<v3.length;w3++){const x3=v3[w3];q3&&q3.equals(x3)||(p3.push(x3),q3=x3)}}return this.autoClose&&p3.length>1&&!p3[p3.length-1].equals(p3[0])&&p3.push(p3[0]),p3}copy(y3){super.copy(y3),this.curves=[];for(let z3=0,A3=y3.curves.length;z3<A3;z3++){const B3=y3.curves[z3];this.curves.push(B3.clone())}return this.autoClose=y3.autoClose,this}toJSON(){const C3=super.toJSON();C3.autoClose=this.autoClose,C3.curves=[];for(let D3=0,E3=this.curves.length;D3<E3;D3++){const F3=this.curves[D3];C3.curves.push(F3.toJSON())}return C3}fromJSON(G3){super.fromJSON(G3),this.autoClose=G3.autoClose,this.curves=[];for(let H3=0,I3=G3.curves.length;H3<I3;H3++){const J3=G3.curves[H3];this.curves.push(new K2[J3.type]().fromJSON(J3))}return this}}class K3 extends V2{constructor(L3){super(),this.type="Path",this.currentPoint=new ea(),L3&&this.setFromPoints(L3)}setFromPoints(M3){this.moveTo(M3[0].x,M3[0].y);for(let N3=1,O3=M3.length;N3<O3;N3++)this.lineTo(M3[N3].x,M3[N3].y);return this}moveTo(P3,Q3){return this.currentPoint.set(P3,Q3),this}lineTo(R3,S3){const T3=new z1(this.currentPoint.clone(),new ea(R3,S3));return this.curves.push(T3),this.currentPoint.set(R3,S3),this}quadraticCurveTo(U3,V3,W3,X3){const Y3=new N1(this.currentPoint.clone(),new ea(U3,V3),new ea(W3,X3));return this.curves.push(Y3),this.currentPoint.set(W3,X3),this}bezierCurveTo(Z3,$3,_3,a4,b4,c4){const d4=new X0(this.currentPoint.clone(),new ea(Z3,$3),new ea(_3,a4),new ea(b4,c4));return this.curves.push(d4),this.currentPoint.set(b4,c4),this}splineThru(e4){const f4=[this.currentPoint.clone()].concat(e4),g4=new l2(f4);return this.curves.push(g4),this.currentPoint.copy(e4[e4.length-1]),this}arc(h4,i4,j4,k4,l4,m4){const n4=this.currentPoint.x,o4=this.currentPoint.y;return this.absarc(h4+n4,i4+o4,j4,k4,l4,m4),this}absarc(p4,q4,r4,s4,t4,u4){return this.absellipse(p4,q4,r4,r4,s4,t4,u4),this}ellipse(v4,w4,x4,y4,z4,A4,B4,C4){const D4=this.currentPoint.x,E4=this.currentPoint.y;return this.absellipse(v4+D4,w4+E4,x4,y4,z4,A4,B4,C4),this}absellipse(F4,G4,H4,I4,J4,K4,L4,M4){const N4=new E_(F4,G4,H4,I4,J4,K4,L4,M4);if(this.curves.length>0){const O4=N4.getPoint(0);O4.equals(this.currentPoint)||this.lineTo(O4.x,O4.y)}this.curves.push(N4);const P4=N4.getPoint(1);return this.currentPoint.copy(P4),this}copy(Q4){return super.copy(Q4),this.currentPoint.copy(Q4.currentPoint),this}toJSON(){const R4=super.toJSON();return R4.currentPoint=this.currentPoint.toArray(),R4}fromJSON(S4){return super.fromJSON(S4),this.currentPoint.fromArray(S4.currentPoint),this}}class T4 extends K3{constructor(U4){super(U4),this.uuid=Z(),this.type="Shape",this.holes=[]}getPointsHoles(V4){const W4=[];for(let X4=0,Y4=this.holes.length;X4<Y4;X4++)W4[X4]=this.holes[X4].getPoints(V4);return W4}extractPoints(Z4){return{shape:this.getPoints(Z4),holes:this.getPointsHoles(Z4)}}copy($4){super.copy($4),this.holes=[];for(let _4=0,a5=$4.holes.length;_4<a5;_4++){const b5=$4.holes[_4];this.holes.push(b5.clone())}return this}toJSON(){const c5=super.toJSON();c5.uuid=this.uuid,c5.holes=[];for(let d5=0,e5=this.holes.length;d5<e5;d5++){const f5=this.holes[d5];c5.holes.push(f5.toJSON())}return c5}fromJSON(g5){super.fromJSON(g5),this.uuid=g5.uuid,this.holes=[];for(let h5=0,i5=g5.holes.length;h5<i5;h5++){const j5=g5.holes[h5];this.holes.push(new K3().fromJSON(j5))}return this}}const k5={triangulate:function(a,b,c=2){const d=b&&b.length,e=d?b[0]*c:a.length;let f=l5(a,0,e,c,!0);const g=[];if(!f||f.next===f.prev)return g;let h,i,j,k,l,m,n;if(d&&(f=s5(a,b,f,c)),a.length>80*c){h=j=a[0],i=k=a[1];for(let o=c;o<e;o+=c)l=a[o],m=a[o+1],l<h&&(h=l),m<i&&(i=m),l>j&&(j=l),m>k&&(k=m);n=0!==(n=Math.max(j-h,k-i))?1/n:0}return n5(f,g,c,h,i,n),g}};function l5(a,b,c,d,e){let f,g;if(e===P5(a,b,c,d)>0)for(f=b;f<c;f+=d)g=M5(f,a[f],a[f+1],g);else for(f=c-d;f>=b;f-=d)g=M5(f,a[f],a[f+1],g);return g&&E5(g,g.next)&&(N5(g),g=g.next),g}function m5(a,b){if(!a)return a;b||(b=a);let c=a,d;do if(d=!1,!c.steiner&&(E5(c,c.next)||0===D5(c.prev,c,c.next))){if(N5(c),(c=b=c.prev)===c.next)break;d=!0}else c=c.next;while(d||c!==b)return b}function n5(a,b,c,d,e,f,g){if(!a)return;!g&&f&&x5(a,d,e,f);let h=a,i,j;for(;a.prev!==a.next;){if(i=a.prev,j=a.next,f?p5(a,d,e,f):o5(a)){b.push(i.i/c),b.push(a.i/c),b.push(j.i/c),N5(a),a=j.next,h=j.next;continue}if((a=j)===h){g?1===g?n5(a=q5(m5(a),b,c),b,c,d,e,f,2):2===g&&r5(a,b,c,d,e,f):n5(m5(a),b,c,d,e,f,1);break}}}function o5(a){const b=a.prev,c=a,d=a.next;if(D5(b,c,d)>=0)return!1;let e=a.next.next;for(;e!==a.prev;){if(B5(b.x,b.y,c.x,c.y,d.x,d.y,e.x,e.y)&&D5(e.prev,e,e.next)>=0)return!1;e=e.next}return!0}function p5(a,b,c,d){const e=a.prev,f=a,g=a.next;if(D5(e,f,g)>=0)return!1;const h=e.x<f.x?e.x<g.x?e.x:g.x:f.x<g.x?f.x:g.x,i=e.y<f.y?e.y<g.y?e.y:g.y:f.y<g.y?f.y:g.y,j=e.x>f.x?e.x>g.x?e.x:g.x:f.x>g.x?f.x:g.x,k=e.y>f.y?e.y>g.y?e.y:g.y:f.y>g.y?f.y:g.y,l=z5(h,i,b,c,d),m=z5(j,k,b,c,d);let n=a.prevZ,o=a.nextZ;for(;n&&n.z>=l&&o&&o.z<=m;){if(n!==a.prev&&n!==a.next&&B5(e.x,e.y,f.x,f.y,g.x,g.y,n.x,n.y)&&D5(n.prev,n,n.next)>=0)return!1;if(n=n.prevZ,o!==a.prev&&o!==a.next&&B5(e.x,e.y,f.x,f.y,g.x,g.y,o.x,o.y)&&D5(o.prev,o,o.next)>=0)return!1;o=o.nextZ}for(;n&&n.z>=l;){if(n!==a.prev&&n!==a.next&&B5(e.x,e.y,f.x,f.y,g.x,g.y,n.x,n.y)&&D5(n.prev,n,n.next)>=0)return!1;n=n.prevZ}for(;o&&o.z<=m;){if(o!==a.prev&&o!==a.next&&B5(e.x,e.y,f.x,f.y,g.x,g.y,o.x,o.y)&&D5(o.prev,o,o.next)>=0)return!1;o=o.nextZ}return!0}function q5(a,b,c){let d=a;do{const e=d.prev,f=d.next.next;!E5(e,f)&&F5(e,d,d.next,f)&&J5(e,f)&&J5(f,e)&&(b.push(e.i/c),b.push(d.i/c),b.push(f.i/c),N5(d),N5(d.next),d=a=f),d=d.next}while(d!==a)return m5(d)}function r5(a,b,c,d,e,f){let g=a;do{let h=g.next.next;for(;h!==g.prev;){if(g.i!==h.i&&C5(g,h)){let i=L5(g,h);g=m5(g,g.next),i=m5(i,i.next),n5(g,b,c,d,e,f),n5(i,b,c,d,e,f);return}h=h.next}g=g.next}while(g!==a)}function s5(a,b,c,d){const e=[];let f,g,h,i,j;for(f=0,g=b.length;f<g;f++)h=b[f]*d,i=f<g-1?b[f+1]*d:a.length,j=l5(a,h,i,d,!1),j===j.next&&(j.steiner=!0),e.push(A5(j));for(e.sort(t5),f=0;f<e.length;f++)u5(e[f],c),c=m5(c,c.next);return c}function t5(a,b){return a.x-b.x}function u5(a,b){if(b=v5(a,b)){const c=L5(b,a);m5(b,b.next),m5(c,c.next)}}function v5(a,b){let c=b;const d=a.x,e=a.y;let f=-1/0,g;do{if(e<=c.y&&e>=c.next.y&&c.next.y!==c.y){const h=c.x+(e-c.y)*(c.next.x-c.x)/(c.next.y-c.y);if(h<=d&&h>f){if(f=h,h===d){if(e===c.y)return c;if(e===c.next.y)return c.next}g=c.x<c.next.x?c:c.next}}c=c.next}while(c!==b)if(!g)return null;if(d===f)return g;const i=g,j=g.x,k=g.y;let l=1/0,m;c=g;do d>=c.x&&c.x>=j&&d!==c.x&&B5(e<k?d:f,e,j,k,e<k?f:d,e,c.x,c.y)&&(m=Math.abs(e-c.y)/(d-c.x),J5(c,a)&&(m<l||m===l&&(c.x>g.x||c.x===g.x&&w5(g,c)))&&(g=c,l=m)),c=c.next;while(c!==i)return g}function w5(a,b){return 0>D5(a.prev,a,b.prev)&&0>D5(b.next,a,a.next)}function x5(a,b,c,d){let e=a;do null===e.z&&(e.z=z5(e.x,e.y,b,c,d)),e.prevZ=e.prev,e.nextZ=e.next,e=e.next;while(e!==a)e.prevZ.nextZ=null,e.prevZ=null,y5(e)}function y5(a){let b,c,d,e,f,g,h,i,j=1;do{for(c=a,a=null,f=null,g=0;c;){for(g++,d=c,h=0,b=0;b<j&&(h++,d=d.nextZ);b++);for(i=j;h>0||i>0&&d;)0!==h&&(0===i||!d||c.z<=d.z)?(e=c,c=c.nextZ,h--):(e=d,d=d.nextZ,i--),f?f.nextZ=e:a=e,e.prevZ=f,f=e;c=d}f.nextZ=null,j*=2}while(g>1)return a}function z5(a,b,c,d,e){return a=32767*(a-c)*e,b=32767*(b-d)*e,a=(a|a<<8)&16711935,a=(a|a<<4)&252645135,a=(a|a<<2)&858993459,a=(a|a<<1)&1431655765,b=(b|b<<8)&16711935,b=(b|b<<4)&252645135,b=(b|b<<2)&858993459,b=(b|b<<1)&1431655765,a|b<<1}function A5(a){let b=a,c=a;do(b.x<c.x||b.x===c.x&&b.y<c.y)&&(c=b),b=b.next;while(b!==a)return c}function B5(a,b,c,d,e,f,g,h){return(e-g)*(b-h)-(a-g)*(f-h)>=0&&(a-g)*(d-h)-(c-g)*(b-h)>=0&&(c-g)*(f-h)-(e-g)*(d-h)>=0}function C5(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!I5(a,b)&&(J5(a,b)&&J5(b,a)&&K5(a,b)&&(D5(a.prev,a,b.prev)||D5(a,b.prev,b))||E5(a,b)&&D5(a.prev,a,a.next)>0&&D5(b.prev,b,b.next)>0)}function D5(a,b,c){return(b.y-a.y)*(c.x-b.x)-(b.x-a.x)*(c.y-b.y)}function E5(a,b){return a.x===b.x&&a.y===b.y}function F5(a,b,c,d){const e=H5(D5(a,b,c)),f=H5(D5(a,b,d)),g=H5(D5(c,d,a)),h=H5(D5(c,d,b));return e!==f&&g!==h|| !!(0===e&&G5(a,c,b))|| !!(0===f&&G5(a,d,b))|| !!(0===g&&G5(c,a,d))||!!(0===h&&G5(c,b,d))}function G5(a,b,c){return b.x<=Math.max(a.x,c.x)&&b.x>=Math.min(a.x,c.x)&&b.y<=Math.max(a.y,c.y)&&b.y>=Math.min(a.y,c.y)}function H5(a){return a>0?1:a<0?-1:0}function I5(a,b){let c=a;do{if(c.i!==a.i&&c.next.i!==a.i&&c.i!==b.i&&c.next.i!==b.i&&F5(c,c.next,a,b))return!0;c=c.next}while(c!==a)return!1}function J5(a,b){return 0>D5(a.prev,a,a.next)?D5(a,b,a.next)>=0&&D5(a,a.prev,b)>=0:0>D5(a,b,a.prev)||0>D5(a,a.next,b)}function K5(a,b){let c=a,d=!1;const e=(a.x+b.x)/2,f=(a.y+b.y)/2;do c.y>f!=c.next.y>f&&c.next.y!==c.y&&e<(c.next.x-c.x)*(f-c.y)/(c.next.y-c.y)+c.x&&(d=!d),c=c.next;while(c!==a)return d}function L5(a,b){const c=new O5(a.i,a.x,a.y),d=new O5(b.i,b.x,b.y),e=a.next,f=b.prev;return a.next=b,b.prev=a,c.next=e,e.prev=c,d.next=c,c.prev=d,f.next=d,d.prev=f,d}function M5(a,b,c,d){const e=new O5(a,b,c);return d?(e.next=d.next,e.prev=d,d.next.prev=e,d.next=e):(e.prev=e,e.next=e),e}function N5(a){a.next.prev=a.prev,a.prev.next=a.next,a.prevZ&&(a.prevZ.nextZ=a.nextZ),a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function O5(a,b,c){this.i=a,this.x=b,this.y=c,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function P5(a,b,c,d){let e=0;for(let f=b,g=c-d;f<c;f+=d)e+=(a[g]-a[f])*(a[f+1]+a[g+1]),g=f;return e}class Q5{static area(R5){const S5=R5.length;let T5=0;for(let U5=S5-1,V5=0;V5<S5;U5=V5++)T5+=R5[U5].x*R5[V5].y-R5[V5].x*R5[U5].y;return 0.5*T5}static isClockWise(W5){return 0>Q5.area(W5)}static triangulateShape(X5,Y5){const Z5=[],$5=[],_5=[];e6(X5),f6(Z5,X5);let a6=X5.length;Y5.forEach(e6);for(let b6=0;b6<Y5.length;b6++)$5.push(a6),a6+=Y5[b6].length,f6(Z5,Y5[b6]);const c6=k5.triangulate(Z5,$5);for(let d6=0;d6<c6.length;d6+=3)_5.push(c6.slice(d6,d6+3));return _5}}function e6(a){const b=a.length;b>2&&a[b-1].equals(a[0])&&a.pop()}function f6(a,b){for(let c=0;c<b.length;c++)a.push(b[c].x),a.push(b[c].y)}class g6 extends PC{constructor(h6=new T4([new ea(0.5,0.5),new ea(-0.5,0.5),new ea(-0.5,-0.5),new ea(0.5,-0.5)]),i6={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:h6,options:i6},h6=Array.isArray(h6)?h6:[h6];const j6=this,k6=[],l6=[];for(let m6=0,n6=h6.length;m6<n6;m6++){const o6=h6[m6];p6(o6)}function p6(a){const b=[],c=void 0!==i6.curveSegments?i6.curveSegments:12,d=void 0!==i6.steps?i6.steps:1;let e=void 0!==i6.depth?i6.depth:1,f=void 0===i6.bevelEnabled||i6.bevelEnabled,g=void 0!==i6.bevelThickness?i6.bevelThickness:0.2,h=void 0!==i6.bevelSize?i6.bevelSize:g-0.1,i=void 0!==i6.bevelOffset?i6.bevelOffset:0,j=void 0!==i6.bevelSegments?i6.bevelSegments:3;const k=i6.extrudePath,l=void 0!==i6.UVGenerator?i6.UVGenerator:A6;void 0!==i6.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),e=i6.amount);let m,n=!1,o,p,q,r;k&&(m=k.getSpacedPoints(d),n=!0,f=!1,o=k.computeFrenetFrames(d,!1),p=new qk(),q=new qk(),r=new qk()),f||(j=0,g=0,h=0,i=0);const s=a.extractPoints(c);let t=s.shape;const u=s.holes,v=!Q5.isClockWise(t);if(v){t=t.reverse();for(let w=0,x=u.length;w<x;w++){const y=u[w];Q5.isClockWise(y)&&(u[w]=y.reverse())}}const z=Q5.triangulateShape(t,u),A=t;for(let B=0,C=u.length;B<C;B++){const D=u[B];t=t.concat(D)}function E(a,b,c){return b||console.error("THREE.ExtrudeGeometry: vec does not exist"),b.clone().multiplyScalar(c).add(a)}const F=t.length,G=z.length;function H(a,b,c){let d,e,f;const g=a.x-b.x,h=a.y-b.y,i=c.x-a.x,j=c.y-a.y,k=g*g+h*h,l=g*j-h*i;if(Math.abs(l)>Number.EPSILON){const m=Math.sqrt(k),n=Math.sqrt(i*i+j*j),o=b.x-h/m,p=b.y+g/m,q=c.x-j/n,r=c.y+i/n,s=((q-o)*j-(r-p)*i)/(g*j-h*i);d=o+g*s-a.x,e=p+h*s-a.y;const t=d*d+e*e;if(t<=2)return new ea(d,e);f=Math.sqrt(t/2)}else{let u=!1;g>Number.EPSILON?i>Number.EPSILON&&(u=!0):g< -Number.EPSILON?i< -Number.EPSILON&&(u=!0):Math.sign(h)===Math.sign(j)&&(u=!0),u?(d=-h,e=g,f=Math.sqrt(k)):(d=g,e=h,f=Math.sqrt(k/2))}return new ea(d/f,e/f)}const I=[];for(let J=0,K=A.length,L=K-1,M=J+1;J<K;J++,L++,M++)L===K&&(L=0),M===K&&(M=0),I[J]=H(A[J],A[L],A[M]);const N=[];let O,P=I.concat();for(let Q=0,R=u.length;Q<R;Q++){const S=u[Q];O=[];for(let T=0,U=S.length,V=U-1,W=T+1;T<U;T++,V++,W++)V===U&&(V=0),W===U&&(W=0),O[T]=H(S[T],S[V],S[W]);N.push(O),P=P.concat(O)}for(let X=0;X<j;X++){const Y=X/j,Z=g*Math.cos(Y*Math.PI/2),$=h*Math.sin(Y*Math.PI/2)+i;for(let _=0,aa=A.length;_<aa;_++){const ba=E(A[_],I[_],$);Da(ba.x,ba.y,-Z)}for(let ca=0,da=u.length;ca<da;ca++){const fa=u[ca];O=N[ca];for(let ga=0,ha=fa.length;ga<ha;ga++){const ia=E(fa[ga],O[ga],$);Da(ia.x,ia.y,-Z)}}}const ja=h+i;for(let ka=0;ka<F;ka++){const la=f?E(t[ka],P[ka],ja):t[ka];n?(q.copy(o.normals[0]).multiplyScalar(la.x),p.copy(o.binormals[0]).multiplyScalar(la.y),r.copy(m[0]).add(q).add(p),Da(r.x,r.y,r.z)):Da(la.x,la.y,0)}for(let ma=1;ma<=d;ma++)for(let na=0;na<F;na++){const oa=f?E(t[na],P[na],ja):t[na];n?(q.copy(o.normals[ma]).multiplyScalar(oa.x),p.copy(o.binormals[ma]).multiplyScalar(oa.y),r.copy(m[ma]).add(q).add(p),Da(r.x,r.y,r.z)):Da(oa.x,oa.y,e/d*ma)}for(let pa=j-1;pa>=0;pa--){const qa=pa/j,ra=g*Math.cos(qa*Math.PI/2),sa=h*Math.sin(qa*Math.PI/2)+i;for(let ta=0,ua=A.length;ta<ua;ta++){const va=E(A[ta],I[ta],sa);Da(va.x,va.y,e+ra)}for(let wa=0,xa=u.length;wa<xa;wa++){const ya=u[wa];O=N[wa];for(let za=0,Aa=ya.length;za<Aa;za++){const Ba=E(ya[za],O[za],sa);n?Da(Ba.x,Ba.y+m[d-1].y,m[d-1].x+ra):Da(Ba.x,Ba.y,e+ra)}}}function Ca(a,b){let c=a.length;for(;--c>=0;){const e=c;let f=c-1;f<0&&(f=a.length-1);for(let g=0,h=d+2*j;g<h;g++){const i=F*g,k=F*(g+1),l=b+e+i,m=b+f+i,n=b+f+k,o=b+e+k;Fa(l,m,n,o)}}}function Da(a,c,d){b.push(a),b.push(c),b.push(d)}function Ea(a,b,c){Ga(a),Ga(b),Ga(c);const d=k6.length/3,e=l.generateTopUV(j6,k6,d-3,d-2,d-1);Ha(e[0]),Ha(e[1]),Ha(e[2])}function Fa(a,b,c,d){Ga(a),Ga(b),Ga(d),Ga(b),Ga(c),Ga(d);const e=k6.length/3,f=l.generateSideWallUV(j6,k6,e-6,e-3,e-2,e-1);Ha(f[0]),Ha(f[1]),Ha(f[3]),Ha(f[1]),Ha(f[2]),Ha(f[3])}function Ga(a){k6.push(b[3*a+0]),k6.push(b[3*a+1]),k6.push(b[3*a+2])}function Ha(a){l6.push(a.x),l6.push(a.y)}(function(){const a=k6.length/3;if(f){let b=0,c=F*b;for(let e=0;e<G;e++){const g=z[e];Ea(g[2]+c,g[1]+c,g[0]+c)}c=F*(b=d+2*j);for(let h=0;h<G;h++){const i=z[h];Ea(i[0]+c,i[1]+c,i[2]+c)}}else{for(let k=0;k<G;k++){const l=z[k];Ea(l[2],l[1],l[0])}for(let m=0;m<G;m++){const n=z[m];Ea(n[0]+F*d,n[1]+F*d,n[2]+F*d)}}j6.addGroup(a,k6.length/3-a,0)})(),(function(){const a=k6.length/3;let b=0;Ca(A,b),b+=A.length;for(let c=0,d=u.length;c<d;c++){const e=u[c];Ca(e,b),b+=e.length}j6.addGroup(a,k6.length/3-a,1)})()}this.setAttribute("position",new EC(k6,3)),this.setAttribute("uv",new EC(l6,2)),this.computeVertexNormals()}toJSON(){const q6=super.toJSON(),r6=this.parameters.shapes,s6=this.parameters.options;return B6(r6,s6,q6)}static fromJSON(t6,u6){const v6=[];for(let w6=0,x6=t6.shapes.length;w6<x6;w6++){const y6=u6[t6.shapes[w6]];v6.push(y6)}const z6=t6.options.extrudePath;return void 0!==z6&&(t6.options.extrudePath=new K2[z6.type]().fromJSON(z6)),new g6(v6,t6.options)}}const A6={generateTopUV:function(a,b,c,d,e){const f=b[3*c],g=b[3*c+1],h=b[3*d],i=b[3*d+1],j=b[3*e],k=b[3*e+1];return[new ea(f,g),new ea(h,i),new ea(j,k)]},generateSideWallUV:function(a,b,c,d,e,f){const g=b[3*c],h=b[3*c+1],i=b[3*c+2],j=b[3*d],k=b[3*d+1],l=b[3*d+2],m=b[3*e],n=b[3*e+1],o=b[3*e+2],p=b[3*f],q=b[3*f+1],r=b[3*f+2];return Math.abs(h-k)<Math.abs(g-j)?[new ea(g,1-i),new ea(j,1-l),new ea(m,1-o),new ea(p,1-r)]:[new ea(h,1-i),new ea(k,1-l),new ea(n,1-o),new ea(q,1-r)]}};function B6(a,b,c){if(c.shapes=[],Array.isArray(a))for(let d=0,e=a.length;d<e;d++){const f=a[d];c.shapes.push(f.uuid)}else c.shapes.push(a.uuid);return void 0!==b.extrudePath&&(c.options.extrudePath=b.extrudePath.toJSON()),c}class C6 extends a${constructor(D6=1,E6=0){const F6=(1+Math.sqrt(5))/2;super([-1,F6,0,1,F6,0,-1,-F6,0,1,-F6,0,0,-1,F6,0,1,F6,0,-1,-F6,0,1,-F6,F6,0,-1,F6,0,1,-F6,0,-1,-F6,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],D6,E6),this.type="IcosahedronGeometry",this.parameters={radius:D6,detail:E6}}static fromJSON(G6){return new C6(G6.radius,G6.detail)}}class H6 extends PC{constructor(I6=[new ea(0,0.5),new ea(0.5,0),new ea(0,-0.5)],J6=12,K6=0,L6=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:I6,segments:J6,phiStart:K6,phiLength:L6},J6=Math.floor(J6),L6=$(L6,0,2*Math.PI);const M6=[],N6=[],O6=[],P6=[],Q6=[],R6=1/J6,S6=new qk(),T6=new ea(),U6=new qk(),V6=new qk(),W6=new qk();let X6=0,Y6=0;for(let Z6=0;Z6<=I6.length-1;Z6++)switch(Z6){case 0:X6=I6[Z6+1].x-I6[Z6].x,Y6=I6[Z6+1].y-I6[Z6].y,U6.x=1*Y6,U6.y=-X6,U6.z=0*Y6,W6.copy(U6),U6.normalize(),P6.push(U6.x,U6.y,U6.z);break;case I6.length-1:P6.push(W6.x,W6.y,W6.z);break;default:X6=I6[Z6+1].x-I6[Z6].x,Y6=I6[Z6+1].y-I6[Z6].y,U6.x=1*Y6,U6.y=-X6,U6.z=0*Y6,V6.copy(U6),U6.x+=W6.x,U6.y+=W6.y,U6.z+=W6.z,U6.normalize(),P6.push(U6.x,U6.y,U6.z),W6.copy(V6)}for(let $6=0;$6<=J6;$6++){const _6=K6+$6*R6*L6,a7=Math.sin(_6),b7=Math.cos(_6);for(let c7=0;c7<=I6.length-1;c7++){S6.x=I6[c7].x*a7,S6.y=I6[c7].y,S6.z=I6[c7].x*b7,N6.push(S6.x,S6.y,S6.z),T6.x=$6/J6,T6.y=c7/(I6.length-1),O6.push(T6.x,T6.y);const d7=P6[3*c7+0]*a7,e7=P6[3*c7+1],f7=P6[3*c7+0]*b7;Q6.push(d7,e7,f7)}}for(let g7=0;g7<J6;g7++)for(let h7=0;h7<I6.length-1;h7++){const i7=h7+g7*I6.length,j7=i7,k7=i7+I6.length,l7=i7+I6.length+1,m7=i7+1;M6.push(j7,k7,m7),M6.push(l7,m7,k7)}this.setIndex(M6),this.setAttribute("position",new EC(N6,3)),this.setAttribute("uv",new EC(O6,2)),this.setAttribute("normal",new EC(Q6,3))}static fromJSON(n7){return new H6(n7.points,n7.segments,n7.phiStart,n7.phiLength)}}class o7 extends a${constructor(p7=1,q7=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],p7,q7),this.type="OctahedronGeometry",this.parameters={radius:p7,detail:q7}}static fromJSON(r7){return new o7(r7.radius,r7.detail)}}class s7 extends PC{constructor(t7=0.5,u7=1,v7=8,w7=1,x7=0,y7=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t7,outerRadius:u7,thetaSegments:v7,phiSegments:w7,thetaStart:x7,thetaLength:y7},v7=Math.max(3,v7),w7=Math.max(1,w7);const z7=[],A7=[],B7=[],C7=[];let D7=t7;const E7=(u7-t7)/w7,F7=new qk(),G7=new ea();for(let H7=0;H7<=w7;H7++){for(let I7=0;I7<=v7;I7++){const J7=x7+I7/v7*y7;F7.x=D7*Math.cos(J7),F7.y=D7*Math.sin(J7),A7.push(F7.x,F7.y,F7.z),B7.push(0,0,1),G7.x=(F7.x/u7+1)/2,G7.y=(F7.y/u7+1)/2,C7.push(G7.x,G7.y)}D7+=E7}for(let K7=0;K7<w7;K7++){const L7=K7*(v7+1);for(let M7=0;M7<v7;M7++){const N7=M7+L7,O7=N7,P7=N7+v7+1,Q7=N7+v7+2,R7=N7+1;z7.push(O7,P7,R7),z7.push(P7,Q7,R7)}}this.setIndex(z7),this.setAttribute("position",new EC(A7,3)),this.setAttribute("normal",new EC(B7,3)),this.setAttribute("uv",new EC(C7,2))}static fromJSON(S7){return new s7(S7.innerRadius,S7.outerRadius,S7.thetaSegments,S7.phiSegments,S7.thetaStart,S7.thetaLength)}}class T7 extends PC{constructor(U7=new T4([new ea(0,0.5),new ea(-0.5,-0.5),new ea(0.5,-0.5)]),V7=12){super(),this.type="ShapeGeometry",this.parameters={shapes:U7,curveSegments:V7};const W7=[],X7=[],Y7=[],Z7=[];let $7=0,_7=0;if(!1===Array.isArray(U7))b8(U7);else for(let a8=0;a8<U7.length;a8++)b8(U7[a8]),this.addGroup($7,_7,a8),$7+=_7,_7=0;function b8(a){const b=X7.length/3,c=a.extractPoints(V7);let d=c.shape;const e=c.holes;!1===Q5.isClockWise(d)&&(d=d.reverse());for(let f=0,g=e.length;f<g;f++){const h=e[f];!0===Q5.isClockWise(h)&&(e[f]=h.reverse())}const i=Q5.triangulateShape(d,e);for(let j=0,k=e.length;j<k;j++){const l=e[j];d=d.concat(l)}for(let m=0,n=d.length;m<n;m++){const o=d[m];X7.push(o.x,o.y,0),Y7.push(0,0,1),Z7.push(o.x,o.y)}for(let p=0,q=i.length;p<q;p++){const r=i[p],s=r[0]+b,t=r[1]+b,u=r[2]+b;W7.push(s,t,u),_7+=3}}this.setIndex(W7),this.setAttribute("position",new EC(X7,3)),this.setAttribute("normal",new EC(Y7,3)),this.setAttribute("uv",new EC(Z7,2))}toJSON(){const c8=super.toJSON(),d8=this.parameters.shapes;return k8(d8,c8)}static fromJSON(e8,f8){const g8=[];for(let h8=0,i8=e8.shapes.length;h8<i8;h8++){const j8=f8[e8.shapes[h8]];g8.push(j8)}return new T7(g8,e8.curveSegments)}}function k8(a,b){if(b.shapes=[],Array.isArray(a))for(let c=0,d=a.length;c<d;c++){const e=a[c];b.shapes.push(e.uuid)}else b.shapes.push(a.uuid);return b}class l8 extends PC{constructor(m8=1,n8=32,o8=16,p8=0,q8=2*Math.PI,r8=0,s8=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:m8,widthSegments:n8,heightSegments:o8,phiStart:p8,phiLength:q8,thetaStart:r8,thetaLength:s8},n8=Math.max(3,Math.floor(n8)),o8=Math.max(2,Math.floor(o8));const t8=Math.min(r8+s8,Math.PI);let u8=0;const v8=[],w8=new qk(),x8=new qk(),y8=[],z8=[],A8=[],B8=[];for(let C8=0;C8<=o8;C8++){const D8=[],E8=C8/o8;let F8=0;0==C8&&0==r8?F8=0.5/n8:C8==o8&&t8==Math.PI&&(F8=-0.5/n8);for(let G8=0;G8<=n8;G8++){const H8=G8/n8;w8.x=-m8*Math.cos(p8+H8*q8)*Math.sin(r8+E8*s8),w8.y=m8*Math.cos(r8+E8*s8),w8.z=m8*Math.sin(p8+H8*q8)*Math.sin(r8+E8*s8),z8.push(w8.x,w8.y,w8.z),x8.copy(w8).normalize(),A8.push(x8.x,x8.y,x8.z),B8.push(H8+F8,1-E8),D8.push(u8++)}v8.push(D8)}for(let I8=0;I8<o8;I8++)for(let J8=0;J8<n8;J8++){const K8=v8[I8][J8+1],L8=v8[I8][J8],M8=v8[I8+1][J8],N8=v8[I8+1][J8+1];(0!==I8||r8>0)&&y8.push(K8,L8,N8),(I8!==o8-1||t8<Math.PI)&&y8.push(L8,M8,N8)}this.setIndex(y8),this.setAttribute("position",new EC(z8,3)),this.setAttribute("normal",new EC(A8,3)),this.setAttribute("uv",new EC(B8,2))}static fromJSON(O8){return new l8(O8.radius,O8.widthSegments,O8.heightSegments,O8.phiStart,O8.phiLength,O8.thetaStart,O8.thetaLength)}}class P8 extends a${constructor(Q8=1,R8=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],Q8,R8),this.type="TetrahedronGeometry",this.parameters={radius:Q8,detail:R8}}static fromJSON(S8){return new P8(S8.radius,S8.detail)}}class T8 extends PC{constructor(U8=1,V8=0.4,W8=8,X8=6,Y8=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:U8,tube:V8,radialSegments:W8,tubularSegments:X8,arc:Y8},W8=Math.floor(W8),X8=Math.floor(X8);const Z8=[],$8=[],_8=[],a9=[],b9=new qk(),c9=new qk(),d9=new qk();for(let e9=0;e9<=W8;e9++)for(let f9=0;f9<=X8;f9++){const g9=f9/X8*Y8,h9=e9/W8*Math.PI*2;c9.x=(U8+V8*Math.cos(h9))*Math.cos(g9),c9.y=(U8+V8*Math.cos(h9))*Math.sin(g9),c9.z=V8*Math.sin(h9),$8.push(c9.x,c9.y,c9.z),b9.x=U8*Math.cos(g9),b9.y=U8*Math.sin(g9),d9.subVectors(c9,b9).normalize(),_8.push(d9.x,d9.y,d9.z),a9.push(f9/X8),a9.push(e9/W8)}for(let i9=1;i9<=W8;i9++)for(let j9=1;j9<=X8;j9++){const k9=(X8+1)*i9+j9-1,l9=(X8+1)*(i9-1)+j9-1,m9=(X8+1)*(i9-1)+j9,n9=(X8+1)*i9+j9;Z8.push(k9,l9,n9),Z8.push(l9,m9,n9)}this.setIndex(Z8),this.setAttribute("position",new EC($8,3)),this.setAttribute("normal",new EC(_8,3)),this.setAttribute("uv",new EC(a9,2))}static fromJSON(o9){return new T8(o9.radius,o9.tube,o9.radialSegments,o9.tubularSegments,o9.arc)}}class p9 extends PC{constructor(q9=1,r9=0.4,s9=64,t9=8,u9=2,v9=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:q9,tube:r9,tubularSegments:s9,radialSegments:t9,p:u9,q:v9},s9=Math.floor(s9),t9=Math.floor(t9);const w9=[],x9=[],y9=[],z9=[],A9=new qk(),B9=new qk(),C9=new qk(),D9=new qk(),E9=new qk(),F9=new qk(),G9=new qk();for(let H9=0;H9<=s9;++H9){const I9=H9/s9*u9*Math.PI*2;T9(I9,u9,v9,q9,C9),T9(I9+0.01,u9,v9,q9,D9),F9.subVectors(D9,C9),G9.addVectors(D9,C9),E9.crossVectors(F9,G9),G9.crossVectors(E9,F9),E9.normalize(),G9.normalize();for(let J9=0;J9<=t9;++J9){const K9=J9/t9*Math.PI*2,L9=-r9*Math.cos(K9),M9=r9*Math.sin(K9);A9.x=C9.x+(L9*G9.x+M9*E9.x),A9.y=C9.y+(L9*G9.y+M9*E9.y),A9.z=C9.z+(L9*G9.z+M9*E9.z),x9.push(A9.x,A9.y,A9.z),B9.subVectors(A9,C9).normalize(),y9.push(B9.x,B9.y,B9.z),z9.push(H9/s9),z9.push(J9/t9)}}for(let N9=1;N9<=s9;N9++)for(let O9=1;O9<=t9;O9++){const P9=(t9+1)*(N9-1)+(O9-1),Q9=(t9+1)*N9+(O9-1),R9=(t9+1)*N9+O9,S9=(t9+1)*(N9-1)+O9;w9.push(P9,Q9,S9),w9.push(Q9,R9,S9)}function T9(a,b,c,d,e){const f=c/b*a,g=Math.cos(f);e.x=d*(2+g)*0.5*Math.cos(a),e.y=d*(2+g)*Math.sin(a)*0.5,e.z=d*Math.sin(f)*0.5}this.setIndex(w9),this.setAttribute("position",new EC(x9,3)),this.setAttribute("normal",new EC(y9,3)),this.setAttribute("uv",new EC(z9,2))}static fromJSON(U9){return new p9(U9.radius,U9.tube,U9.tubularSegments,U9.radialSegments,U9.p,U9.q)}}class V9 extends PC{constructor(W9=new $1(new qk(-1,-1,0),new qk(-1,1,0),new qk(1,1,0)),X9=64,Y9=1,Z9=8,$9=!1){super(),this.type="TubeGeometry",this.parameters={path:W9,tubularSegments:X9,radius:Y9,radialSegments:Z9,closed:$9};const _9=W9.computeFrenetFrames(X9,$9);this.tangents=_9.tangents,this.normals=_9.normals,this.binormals=_9.binormals;const aaa=new qk(),baa=new qk(),caa=new ea();let daa=new qk();const eaa=[],faa=[],gaa=[],haa=[];function iaa(a){daa=W9.getPointAt(a/X9,daa);const b=_9.normals[a],c=_9.binormals[a];for(let d=0;d<=Z9;d++){const e=d/Z9*Math.PI*2,f=Math.sin(e),g=-Math.cos(e);baa.x=g*b.x+f*c.x,baa.y=g*b.y+f*c.y,baa.z=g*b.z+f*c.z,baa.normalize(),faa.push(baa.x,baa.y,baa.z),aaa.x=daa.x+Y9*baa.x,aaa.y=daa.y+Y9*baa.y,aaa.z=daa.z+Y9*baa.z,eaa.push(aaa.x,aaa.y,aaa.z)}}(function(){for(let a=0;a<X9;a++)iaa(a);iaa(!1===$9?X9:0),(function(){for(let a=0;a<=X9;a++)for(let b=0;b<=Z9;b++)caa.x=a/X9,caa.y=b/Z9,gaa.push(caa.x,caa.y)})(),(function(){for(let a=1;a<=X9;a++)for(let b=1;b<=Z9;b++){const c=(Z9+1)*(a-1)+(b-1),d=(Z9+1)*a+(b-1),e=(Z9+1)*a+b,f=(Z9+1)*(a-1)+b;haa.push(c,d,f),haa.push(d,e,f)}})()})(),this.setIndex(haa),this.setAttribute("position",new EC(eaa,3)),this.setAttribute("normal",new EC(faa,3)),this.setAttribute("uv",new EC(gaa,2))}toJSON(){const jaa=super.toJSON();return jaa.path=this.parameters.path.toJSON(),jaa}static fromJSON(kaa){return new V9(new K2[kaa.path.type]().fromJSON(kaa.path),kaa.tubularSegments,kaa.radius,kaa.radialSegments,kaa.closed)}}function laa(a,b,c){const d=`${a.x},${a.y},${a.z}-${b.x},${b.y},${b.z}`,e=`${b.x},${b.y},${b.z}-${a.x},${a.y},${a.z}`;return!0!==c.has(d)&& !0!==c.has(e)&&(c.add(d,e),!0)}Object.freeze({__proto__:null,BoxGeometry:HH,BoxBufferGeometry:HH,CircleGeometry:jZ,CircleBufferGeometry:jZ,ConeGeometry:TZ,ConeBufferGeometry:TZ,CylinderGeometry:zZ,CylinderBufferGeometry:zZ,DodecahedronGeometry:o$,DodecahedronBufferGeometry:o$,EdgesGeometry:class extends PC{constructor(maa=null,naa=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:maa,thresholdAngle:naa},null!==maa){const oaa=4,paa=Math.pow(10,oaa),qaa=Math.cos(X*naa),raa=maa.getIndex(),saa=maa.getAttribute("position"),taa=raa?raa.count:saa.count,uaa=[0,0,0],vaa=["a","b","c"],waa=new Array(3),xaa={},yaa=[];for(let zaa=0;zaa<taa;zaa+=3){raa?(uaa[0]=raa.getX(zaa),uaa[1]=raa.getX(zaa+1),uaa[2]=raa.getX(zaa+2)):(uaa[0]=zaa,uaa[1]=zaa+1,uaa[2]=zaa+2);const{a:Aaa,b:Baa,c:Caa}=x$;if(Aaa.fromBufferAttribute(saa,uaa[0]),Baa.fromBufferAttribute(saa,uaa[1]),Caa.fromBufferAttribute(saa,uaa[2]),x$.getNormal(w$),waa[0]=`${Math.round(Aaa.x*paa)},${Math.round(Aaa.y*paa)},${Math.round(Aaa.z*paa)}`,waa[1]=`${Math.round(Baa.x*paa)},${Math.round(Baa.y*paa)},${Math.round(Baa.z*paa)}`,waa[2]=`${Math.round(Caa.x*paa)},${Math.round(Caa.y*paa)},${Math.round(Caa.z*paa)}`,waa[0]!==waa[1]&&waa[1]!==waa[2]&&waa[2]!==waa[0])for(let Daa=0;Daa<3;Daa++){const Eaa=(Daa+1)%3,Faa=waa[Daa],Gaa=waa[Eaa],Haa=x$[vaa[Daa]],Iaa=x$[vaa[Eaa]],Jaa=`${Faa}_${Gaa}`,Kaa=`${Gaa}_${Faa}`;Kaa in xaa&&xaa[Kaa]?(w$.dot(xaa[Kaa].normal)<=qaa&&(yaa.push(Haa.x,Haa.y,Haa.z),yaa.push(Iaa.x,Iaa.y,Iaa.z)),xaa[Kaa]=null):Jaa in xaa||(xaa[Jaa]={index0:uaa[Daa],index1:uaa[Eaa],normal:w$.clone()})}}for(const Laa in xaa)if(xaa[Laa]){const{index0:Maa,index1:Naa}=xaa[Laa];u$.fromBufferAttribute(saa,Maa),v$.fromBufferAttribute(saa,Naa),yaa.push(u$.x,u$.y,u$.z),yaa.push(v$.x,v$.y,v$.z)}this.setAttribute("position",new EC(yaa,3))}}},ExtrudeGeometry:g6,ExtrudeBufferGeometry:g6,IcosahedronGeometry:C6,IcosahedronBufferGeometry:C6,LatheGeometry:H6,LatheBufferGeometry:H6,OctahedronGeometry:o7,OctahedronBufferGeometry:o7,PlaneGeometry:FL,PlaneBufferGeometry:FL,PolyhedronGeometry:a$,PolyhedronBufferGeometry:a$,RingGeometry:s7,RingBufferGeometry:s7,ShapeGeometry:T7,ShapeBufferGeometry:T7,SphereGeometry:l8,SphereBufferGeometry:l8,TetrahedronGeometry:P8,TetrahedronBufferGeometry:P8,TorusGeometry:T8,TorusBufferGeometry:T8,TorusKnotGeometry:p9,TorusKnotBufferGeometry:p9,TubeGeometry:V9,TubeBufferGeometry:V9,WireframeGeometry:class extends PC{constructor(Oaa=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:Oaa},null!==Oaa){const Paa=[],Qaa=new Set(),Raa=new qk(),Saa=new qk();if(null!==Oaa.index){const Taa=Oaa.attributes.position,Uaa=Oaa.index;let Vaa=Oaa.groups;0===Vaa.length&&(Vaa=[{start:0,count:Uaa.count,materialIndex:0}]);for(let Waa=0,Xaa=Vaa.length;Waa<Xaa;++Waa){const Yaa=Vaa[Waa],Zaa=Yaa.start,$aa=Yaa.count;for(let _aa=Zaa,aba=Zaa+$aa;_aa<aba;_aa+=3)for(let bba=0;bba<3;bba++){const cba=Uaa.getX(_aa+bba),dba=Uaa.getX(_aa+(bba+1)%3);Raa.fromBufferAttribute(Taa,cba),Saa.fromBufferAttribute(Taa,dba),!0===laa(Raa,Saa,Qaa)&&(Paa.push(Raa.x,Raa.y,Raa.z),Paa.push(Saa.x,Saa.y,Saa.z))}}}else{const eba=Oaa.attributes.position;for(let fba=0,gba=eba.count/3;fba<gba;fba++)for(let hba=0;hba<3;hba++){const iba=3*fba+hba,jba=3*fba+(hba+1)%3;Raa.fromBufferAttribute(eba,iba),Saa.fromBufferAttribute(eba,jba),!0===laa(Raa,Saa,Qaa)&&(Paa.push(Raa.x,Raa.y,Raa.z),Paa.push(Saa.x,Saa.y,Saa.z))}}this.setAttribute("position",new EC(Paa,3))}}}});class kba extends zA{constructor(lba){super(),this.type="ShadowMaterial",this.color=new Gd(0),this.transparent=!0,this.setValues(lba)}copy(mba){return super.copy(mba),this.color.copy(mba.color),this}}kba.prototype.isShadowMaterial=!0;class nba extends zA{constructor(oba){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Gd(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Gd(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=A,this.normalScale=new ea(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(oba)}copy(pba){return super.copy(pba),this.defines={STANDARD:""},this.color.copy(pba.color),this.roughness=pba.roughness,this.metalness=pba.metalness,this.map=pba.map,this.lightMap=pba.lightMap,this.lightMapIntensity=pba.lightMapIntensity,this.aoMap=pba.aoMap,this.aoMapIntensity=pba.aoMapIntensity,this.emissive.copy(pba.emissive),this.emissiveMap=pba.emissiveMap,this.emissiveIntensity=pba.emissiveIntensity,this.bumpMap=pba.bumpMap,this.bumpScale=pba.bumpScale,this.normalMap=pba.normalMap,this.normalMapType=pba.normalMapType,this.normalScale.copy(pba.normalScale),this.displacementMap=pba.displacementMap,this.displacementScale=pba.displacementScale,this.displacementBias=pba.displacementBias,this.roughnessMap=pba.roughnessMap,this.metalnessMap=pba.metalnessMap,this.alphaMap=pba.alphaMap,this.envMap=pba.envMap,this.envMapIntensity=pba.envMapIntensity,this.refractionRatio=pba.refractionRatio,this.wireframe=pba.wireframe,this.wireframeLinewidth=pba.wireframeLinewidth,this.wireframeLinecap=pba.wireframeLinecap,this.wireframeLinejoin=pba.wireframeLinejoin,this.flatShading=pba.flatShading,this}}nba.prototype.isMeshStandardMaterial=!0;class qba extends nba{constructor(rba){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new ea(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return $(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(a){this.ior=(1+0.4*a)/(1-0.4*a)}}),this.sheenColor=new Gd(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Gd(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Gd(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(rba)}get sheen(){return this._sheen}set sheen(sba){this._sheen>0!=sba>0&&this.version++,this._sheen=sba}get clearcoat(){return this._clearcoat}set clearcoat(tba){this._clearcoat>0!=tba>0&&this.version++,this._clearcoat=tba}get transmission(){return this._transmission}set transmission(uba){this._transmission>0!=uba>0&&this.version++,this._transmission=uba}copy(vba){return super.copy(vba),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=vba.clearcoat,this.clearcoatMap=vba.clearcoatMap,this.clearcoatRoughness=vba.clearcoatRoughness,this.clearcoatRoughnessMap=vba.clearcoatRoughnessMap,this.clearcoatNormalMap=vba.clearcoatNormalMap,this.clearcoatNormalScale.copy(vba.clearcoatNormalScale),this.ior=vba.ior,this.sheen=vba.sheen,this.sheenColor.copy(vba.sheenColor),this.sheenColorMap=vba.sheenColorMap,this.sheenRoughness=vba.sheenRoughness,this.sheenRoughnessMap=vba.sheenRoughnessMap,this.transmission=vba.transmission,this.transmissionMap=vba.transmissionMap,this.thickness=vba.thickness,this.thicknessMap=vba.thicknessMap,this.attenuationDistance=vba.attenuationDistance,this.attenuationColor.copy(vba.attenuationColor),this.specularIntensity=vba.specularIntensity,this.specularIntensityMap=vba.specularIntensityMap,this.specularColor.copy(vba.specularColor),this.specularColorMap=vba.specularColorMap,this}}qba.prototype.isMeshPhysicalMaterial=!0;class wba extends zA{constructor(xba){super(),this.type="MeshPhongMaterial",this.color=new Gd(16777215),this.specular=new Gd(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Gd(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=A,this.normalScale=new ea(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=n,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(xba)}copy(yba){return super.copy(yba),this.color.copy(yba.color),this.specular.copy(yba.specular),this.shininess=yba.shininess,this.map=yba.map,this.lightMap=yba.lightMap,this.lightMapIntensity=yba.lightMapIntensity,this.aoMap=yba.aoMap,this.aoMapIntensity=yba.aoMapIntensity,this.emissive.copy(yba.emissive),this.emissiveMap=yba.emissiveMap,this.emissiveIntensity=yba.emissiveIntensity,this.bumpMap=yba.bumpMap,this.bumpScale=yba.bumpScale,this.normalMap=yba.normalMap,this.normalMapType=yba.normalMapType,this.normalScale.copy(yba.normalScale),this.displacementMap=yba.displacementMap,this.displacementScale=yba.displacementScale,this.displacementBias=yba.displacementBias,this.specularMap=yba.specularMap,this.alphaMap=yba.alphaMap,this.envMap=yba.envMap,this.combine=yba.combine,this.reflectivity=yba.reflectivity,this.refractionRatio=yba.refractionRatio,this.wireframe=yba.wireframe,this.wireframeLinewidth=yba.wireframeLinewidth,this.wireframeLinecap=yba.wireframeLinecap,this.wireframeLinejoin=yba.wireframeLinejoin,this.flatShading=yba.flatShading,this}}wba.prototype.isMeshPhongMaterial=!0;class zba extends zA{constructor(Aba){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Gd(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Gd(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=A,this.normalScale=new ea(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(Aba)}copy(Bba){return super.copy(Bba),this.color.copy(Bba.color),this.map=Bba.map,this.gradientMap=Bba.gradientMap,this.lightMap=Bba.lightMap,this.lightMapIntensity=Bba.lightMapIntensity,this.aoMap=Bba.aoMap,this.aoMapIntensity=Bba.aoMapIntensity,this.emissive.copy(Bba.emissive),this.emissiveMap=Bba.emissiveMap,this.emissiveIntensity=Bba.emissiveIntensity,this.bumpMap=Bba.bumpMap,this.bumpScale=Bba.bumpScale,this.normalMap=Bba.normalMap,this.normalMapType=Bba.normalMapType,this.normalScale.copy(Bba.normalScale),this.displacementMap=Bba.displacementMap,this.displacementScale=Bba.displacementScale,this.displacementBias=Bba.displacementBias,this.alphaMap=Bba.alphaMap,this.wireframe=Bba.wireframe,this.wireframeLinewidth=Bba.wireframeLinewidth,this.wireframeLinecap=Bba.wireframeLinecap,this.wireframeLinejoin=Bba.wireframeLinejoin,this}}zba.prototype.isMeshToonMaterial=!0;class Cba extends zA{constructor(Dba){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=A,this.normalScale=new ea(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(Dba)}copy(Eba){return super.copy(Eba),this.bumpMap=Eba.bumpMap,this.bumpScale=Eba.bumpScale,this.normalMap=Eba.normalMap,this.normalMapType=Eba.normalMapType,this.normalScale.copy(Eba.normalScale),this.displacementMap=Eba.displacementMap,this.displacementScale=Eba.displacementScale,this.displacementBias=Eba.displacementBias,this.wireframe=Eba.wireframe,this.wireframeLinewidth=Eba.wireframeLinewidth,this.flatShading=Eba.flatShading,this}}Cba.prototype.isMeshNormalMaterial=!0;class Fba extends zA{constructor(Gba){super(),this.type="MeshLambertMaterial",this.color=new Gd(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Gd(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=n,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(Gba)}copy(Hba){return super.copy(Hba),this.color.copy(Hba.color),this.map=Hba.map,this.lightMap=Hba.lightMap,this.lightMapIntensity=Hba.lightMapIntensity,this.aoMap=Hba.aoMap,this.aoMapIntensity=Hba.aoMapIntensity,this.emissive.copy(Hba.emissive),this.emissiveMap=Hba.emissiveMap,this.emissiveIntensity=Hba.emissiveIntensity,this.specularMap=Hba.specularMap,this.alphaMap=Hba.alphaMap,this.envMap=Hba.envMap,this.combine=Hba.combine,this.reflectivity=Hba.reflectivity,this.refractionRatio=Hba.refractionRatio,this.wireframe=Hba.wireframe,this.wireframeLinewidth=Hba.wireframeLinewidth,this.wireframeLinecap=Hba.wireframeLinecap,this.wireframeLinejoin=Hba.wireframeLinejoin,this}}Fba.prototype.isMeshLambertMaterial=!0;class Iba extends zA{constructor(Jba){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Gd(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=A,this.normalScale=new ea(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(Jba)}copy(Kba){return super.copy(Kba),this.defines={MATCAP:""},this.color.copy(Kba.color),this.matcap=Kba.matcap,this.map=Kba.map,this.bumpMap=Kba.bumpMap,this.bumpScale=Kba.bumpScale,this.normalMap=Kba.normalMap,this.normalMapType=Kba.normalMapType,this.normalScale.copy(Kba.normalScale),this.displacementMap=Kba.displacementMap,this.displacementScale=Kba.displacementScale,this.displacementBias=Kba.displacementBias,this.alphaMap=Kba.alphaMap,this.flatShading=Kba.flatShading,this}}Iba.prototype.isMeshMatcapMaterial=!0;class Lba extends CW{constructor(Mba){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(Mba)}copy(Nba){return super.copy(Nba),this.scale=Nba.scale,this.dashSize=Nba.dashSize,this.gapSize=Nba.gapSize,this}}Lba.prototype.isLineDashedMaterial=!0,Object.freeze({__proto__:null,ShadowMaterial:kba,SpriteMaterial:VT,RawShaderMaterial:PM,ShaderMaterial:$H,PointsMaterial:PX,MeshPhysicalMaterial:qba,MeshStandardMaterial:nba,MeshPhongMaterial:wba,MeshToonMaterial:zba,MeshNormalMaterial:Cba,MeshLambertMaterial:Fba,MeshDepthMaterial:UQ,MeshDistanceMaterial:XQ,MeshBasicMaterial:RA,MeshMatcapMaterial:Iba,LineDashedMaterial:Lba,LineBasicMaterial:CW,Material:zA});const Oba={arraySlice:function(a,b,c){return Oba.isTypedArray(a)?new a.constructor(a.subarray(b,void 0!==c?c:a.length)):a.slice(b,c)},convertArray:function(a,b,c){return a&&(c||a.constructor!==b)?"number"==typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a):a},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){const b=a.length,c=new Array(b);for(let d=0;d!==b;++d)c[d]=d;return c.sort(function(b,c){return a[b]-a[c]}),c},sortedArray:function(a,b,c){const d=a.length,e=new a.constructor(d);for(let f=0,g=0;g!==d;++f){const h=c[f]*b;for(let i=0;i!==b;++i)e[g++]=a[h+i]}return e},flattenJSON:function(a,b,c,d){let e=1,f=a[0];for(;void 0!==f&& void 0===f[d];)f=a[e++];if(void 0===f)return;let g=f[d];if(void 0!==g)if(Array.isArray(g))do void 0!==(g=f[d])&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)else if(void 0!==g.toArray)do void 0!==(g=f[d])&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)else do void 0!==(g=f[d])&&(b.push(f.time),c.push(g)),f=a[e++];while(void 0!==f)},subclip:function(a,b,c,d,e=30){const f=a.clone();f.name=b;const g=[];for(let h=0;h<f.tracks.length;++h){const i=f.tracks[h],j=i.getValueSize(),k=[],l=[];for(let m=0;m<i.times.length;++m){const n=i.times[m]*e;if(!(n<c)&&!(n>=d)){k.push(i.times[m]);for(let o=0;o<j;++o)l.push(i.values[m*j+o])}}0!==k.length&&(i.times=Oba.convertArray(k,i.times.constructor),i.values=Oba.convertArray(l,i.values.constructor),g.push(i))}f.tracks=g;let p=1/0;for(let q=0;q<f.tracks.length;++q)p>f.tracks[q].times[0]&&(p=f.tracks[q].times[0]);for(let r=0;r<f.tracks.length;++r)f.tracks[r].shift(-1*p);return f.resetDuration(),f},makeClipAdditive:function(a,b=0,c=a,d=30){d<=0&&(d=30);const e=c.tracks.length,f=b/d;for(let g=0;g<e;++g){const h=c.tracks[g],i=h.ValueTypeName;if("bool"===i||"string"===i)continue;const j=a.tracks.find(function(a){return a.name===h.name&&a.ValueTypeName===i});if(void 0===j)continue;let k=0;const l=h.getValueSize();h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(k=l/3);let m=0;const n=j.getValueSize();j.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(m=n/3);const o=h.times.length-1;let p;if(f<=h.times[0]){const q=k,r=l-k;p=Oba.arraySlice(h.values,q,r)}else if(f>=h.times[o]){const s=o*l+k,t=s+l-k;p=Oba.arraySlice(h.values,s,t)}else{const u=h.createInterpolant(),v=k,w=l-k;u.evaluate(f),p=Oba.arraySlice(u.resultBuffer,v,w)}if("quaternion"===i){const x=new Lh().fromArray(p).normalize().conjugate();x.toArray(p)}const y=j.times.length;for(let z=0;z<y;++z){const A=z*n+m;if("quaternion"===i)Lh.multiplyQuaternionsFlat(j.values,A,p,0,j.values,A);else{const B=n-2*m;for(let C=0;C<B;++C)j.values[A+C]-=p[C]}}}return a.blendMode=2501,a}};class Pba{constructor(Qba,Rba,Sba,Tba){this.parameterPositions=Qba,this._cachedIndex=0,this.resultBuffer=void 0!==Tba?Tba:new Rba.constructor(Sba),this.sampleValues=Rba,this.valueSize=Sba,this.settings=null,this.DefaultSettings_={}}evaluate(Uba){const Vba=this.parameterPositions;let Wba=this._cachedIndex,Xba=Vba[Wba],Yba=Vba[Wba-1];validate_interval:{seek:{let Zba;linear_scan:{forward_scan:if(!(Uba<Xba)){for(let $ba=Wba+2;;){if(void 0===Xba){if(Uba<Yba)break forward_scan;return Wba=Vba.length,this._cachedIndex=Wba,this.afterEnd_(Wba-1,Uba,Yba)}if(Wba===$ba)break;if(Yba=Xba,Uba<(Xba=Vba[++Wba]))break seek}Zba=Vba.length;break linear_scan}if(!(Uba>=Yba)){const _ba=Vba[1];Uba<_ba&&(Wba=2,Yba=_ba);for(let aca=Wba-2;;){if(void 0===Yba)return this._cachedIndex=0,this.beforeStart_(0,Uba,Xba);if(Wba===aca)break;if(Xba=Yba,Uba>=(Yba=Vba[--Wba-1]))break seek}Zba=Wba,Wba=0;break linear_scan}break validate_interval}for(;Wba<Zba;){const bca=Wba+Zba>>>1;Uba<Vba[bca]?Zba=bca:Wba=bca+1}if(Xba=Vba[Wba],Yba=Vba[Wba-1],void 0===Yba)return this._cachedIndex=0,this.beforeStart_(0,Uba,Xba);if(void 0===Xba)return Wba=Vba.length,this._cachedIndex=Wba,this.afterEnd_(Wba-1,Yba,Uba)}this._cachedIndex=Wba,this.intervalChanged_(Wba,Yba,Xba)}return this.interpolate_(Wba,Yba,Uba,Xba)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(cca){const dca=this.resultBuffer,eca=this.sampleValues,fca=this.valueSize,gca=cca*fca;for(let hca=0;hca!==fca;++hca)dca[hca]=eca[gca+hca];return dca}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Pba.prototype.beforeStart_=Pba.prototype.copySampleValue_,Pba.prototype.afterEnd_=Pba.prototype.copySampleValue_;class ica extends Pba{constructor(jca,kca,lca,mca){super(jca,kca,lca,mca),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(nca,oca,pca){const qca=this.parameterPositions;let rca=nca-2,sca=nca+1,tca=qca[rca],uca=qca[sca];if(void 0===tca)switch(this.getSettings_().endingStart){case 2401:rca=nca,tca=2*oca-pca;break;case 2402:rca=qca.length-2,tca=oca+qca[rca]-qca[rca+1];break;default:rca=nca,tca=pca}if(void 0===uca)switch(this.getSettings_().endingEnd){case 2401:sca=nca,uca=2*pca-oca;break;case 2402:sca=1,uca=pca+qca[1]-qca[0];break;default:sca=nca-1,uca=oca}const vca=(pca-oca)*0.5,wca=this.valueSize;this._weightPrev=vca/(oca-tca),this._weightNext=vca/(uca-pca),this._offsetPrev=rca*wca,this._offsetNext=sca*wca}interpolate_(xca,yca,zca,Aca){const Bca=this.resultBuffer,Cca=this.sampleValues,Dca=this.valueSize,Eca=xca*Dca,Fca=Eca-Dca,Gca=this._offsetPrev,Hca=this._offsetNext,Ica=this._weightPrev,Jca=this._weightNext,Kca=(zca-yca)/(Aca-yca),Lca=Kca*Kca,Mca=Lca*Kca,Nca=-Ica*Mca+2*Ica*Lca-Ica*Kca,Oca=(1+Ica)*Mca+(-1.5-2*Ica)*Lca+(-0.5+Ica)*Kca+1,Pca=(-1-Jca)*Mca+(1.5+Jca)*Lca+0.5*Kca,Qca=Jca*Mca-Jca*Lca;for(let Rca=0;Rca!==Dca;++Rca)Bca[Rca]=Nca*Cca[Gca+Rca]+Oca*Cca[Fca+Rca]+Pca*Cca[Eca+Rca]+Qca*Cca[Hca+Rca];return Bca}}class Sca extends Pba{constructor(Tca,Uca,Vca,Wca){super(Tca,Uca,Vca,Wca)}interpolate_(Xca,Yca,Zca,$ca){const _ca=this.resultBuffer,ada=this.sampleValues,bda=this.valueSize,cda=Xca*bda,dda=cda-bda,eda=(Zca-Yca)/($ca-Yca),fda=1-eda;for(let gda=0;gda!==bda;++gda)_ca[gda]=ada[dda+gda]*fda+ada[cda+gda]*eda;return _ca}}class hda extends Pba{constructor(ida,jda,kda,lda){super(ida,jda,kda,lda)}interpolate_(mda){return this.copySampleValue_(mda-1)}}class nda{constructor(oda,pda,qda,rda){if(void 0===oda)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===pda||0===pda.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+oda);this.name=oda,this.times=Oba.convertArray(pda,this.TimeBufferType),this.values=Oba.convertArray(qda,this.ValueBufferType),this.setInterpolation(rda||this.DefaultInterpolation)}static toJSON(sda){const tda=sda.constructor;let uda;if(tda.toJSON!==this.toJSON)uda=tda.toJSON(sda);else{uda={name:sda.name,times:Oba.convertArray(sda.times,Array),values:Oba.convertArray(sda.values,Array)};const vda=sda.getInterpolation();vda!==sda.DefaultInterpolation&&(uda.interpolation=vda)}return uda.type=sda.ValueTypeName,uda}InterpolantFactoryMethodDiscrete(wda){return new hda(this.times,this.values,this.getValueSize(),wda)}InterpolantFactoryMethodLinear(xda){return new Sca(this.times,this.values,this.getValueSize(),xda)}InterpolantFactoryMethodSmooth(yda){return new ica(this.times,this.values,this.getValueSize(),yda)}setInterpolation(zda){let Ada;switch(zda){case 2300:Ada=this.InterpolantFactoryMethodDiscrete;break;case 2301:Ada=this.InterpolantFactoryMethodLinear;break;case 2302:Ada=this.InterpolantFactoryMethodSmooth;break}if(void 0===Ada){const Bda="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant)if(zda!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(Bda);return console.warn("THREE.KeyframeTrack:",Bda),this}return this.createInterpolant=Ada,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}}getValueSize(){return this.values.length/this.times.length}shift(Cda){if(0!==Cda){const Dda=this.times;for(let Eda=0,Fda=Dda.length;Eda!==Fda;++Eda)Dda[Eda]+=Cda}return this}scale(Gda){if(1!==Gda){const Hda=this.times;for(let Ida=0,Jda=Hda.length;Ida!==Jda;++Ida)Hda[Ida]*=Gda}return this}trim(Kda,Lda){const Mda=this.times,Nda=Mda.length;let Oda=0,Pda=Nda-1;for(;Oda!==Nda&&Mda[Oda]<Kda;)++Oda;for(;-1!==Pda&&Mda[Pda]>Lda;)--Pda;if(++Pda,0!==Oda||Pda!==Nda){Oda>=Pda&&(Oda=(Pda=Math.max(Pda,1))-1);const Qda=this.getValueSize();this.times=Oba.arraySlice(Mda,Oda,Pda),this.values=Oba.arraySlice(this.values,Oda*Qda,Pda*Qda)}return this}validate(){let Rda=!0;const Sda=this.getValueSize();Sda-Math.floor(Sda)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),Rda=!1);const Tda=this.times,Uda=this.values,Vda=Tda.length;0===Vda&&(console.error("THREE.KeyframeTrack: Track is empty.",this),Rda=!1);let Wda=null;for(let Xda=0;Xda!==Vda;Xda++){const Yda=Tda[Xda];if("number"==typeof Yda&&isNaN(Yda)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,Xda,Yda),Rda=!1;break}if(null!==Wda&&Wda>Yda){console.error("THREE.KeyframeTrack: Out of order keys.",this,Xda,Yda,Wda),Rda=!1;break}Wda=Yda}if(void 0!==Uda&&Oba.isTypedArray(Uda))for(let Zda=0,$da=Uda.length;Zda!==$da;++Zda){const _da=Uda[Zda];if(isNaN(_da)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,Zda,_da),Rda=!1;break}}return Rda}optimize(){const aea=Oba.arraySlice(this.times),bea=Oba.arraySlice(this.values),cea=this.getValueSize(),dea=2302===this.getInterpolation(),eea=aea.length-1;let fea=1;for(let gea=1;gea<eea;++gea){let hea=!1;const iea=aea[gea],jea=aea[gea+1];if(iea!==jea&&(1!==gea||iea!==aea[0]))if(dea)hea=!0;else{const kea=gea*cea,lea=kea-cea,mea=kea+cea;for(let nea=0;nea!==cea;++nea){const oea=bea[kea+nea];if(oea!==bea[lea+nea]||oea!==bea[mea+nea]){hea=!0;break}}}if(hea){if(gea!==fea){aea[fea]=aea[gea];const pea=gea*cea,qea=fea*cea;for(let rea=0;rea!==cea;++rea)bea[qea+rea]=bea[pea+rea]}++fea}}if(eea>0){aea[fea]=aea[eea];for(let sea=eea*cea,tea=fea*cea,uea=0;uea!==cea;++uea)bea[tea+uea]=bea[sea+uea];++fea}return fea!==aea.length?(this.times=Oba.arraySlice(aea,0,fea),this.values=Oba.arraySlice(bea,0,fea*cea)):(this.times=aea,this.values=bea),this}clone(){const vea=Oba.arraySlice(this.times,0),wea=Oba.arraySlice(this.values,0),xea=this.constructor,yea=new xea(this.name,vea,wea);return yea.createInterpolant=this.createInterpolant,yea}}nda.prototype.TimeBufferType=Float32Array,nda.prototype.ValueBufferType=Float32Array,nda.prototype.DefaultInterpolation=2301;class zea extends nda{}zea.prototype.ValueTypeName="bool",zea.prototype.ValueBufferType=Array,zea.prototype.DefaultInterpolation=2300,zea.prototype.InterpolantFactoryMethodLinear=void 0,zea.prototype.InterpolantFactoryMethodSmooth=void 0;class Aea extends nda{}Aea.prototype.ValueTypeName="color";class Bea extends nda{}Bea.prototype.ValueTypeName="number";class Cea extends Pba{constructor(Dea,Eea,Fea,Gea){super(Dea,Eea,Fea,Gea)}interpolate_(Hea,Iea,Jea,Kea){const Lea=this.resultBuffer,Mea=this.sampleValues,Nea=this.valueSize,Oea=(Jea-Iea)/(Kea-Iea);let Pea=Hea*Nea;for(let Qea=Pea+Nea;Pea!==Qea;Pea+=4)Lh.slerpFlat(Lea,0,Mea,Pea-Nea,Mea,Pea,Oea);return Lea}}class Rea extends nda{InterpolantFactoryMethodLinear(Sea){return new Cea(this.times,this.values,this.getValueSize(),Sea)}}Rea.prototype.ValueTypeName="quaternion",Rea.prototype.DefaultInterpolation=2301,Rea.prototype.InterpolantFactoryMethodSmooth=void 0;class Tea extends nda{}Tea.prototype.ValueTypeName="string",Tea.prototype.ValueBufferType=Array,Tea.prototype.DefaultInterpolation=2300,Tea.prototype.InterpolantFactoryMethodLinear=void 0,Tea.prototype.InterpolantFactoryMethodSmooth=void 0;class Uea extends nda{}Uea.prototype.ValueTypeName="vector";class Vea{constructor(Wea,Xea=-1,Yea,Zea=2500){this.name=Wea,this.tracks=Yea,this.duration=Xea,this.blendMode=Zea,this.uuid=Z(),this.duration<0&&this.resetDuration()}static parse($ea){const _ea=[],afa=$ea.tracks,bfa=1/($ea.fps||1);for(let cfa=0,dfa=afa.length;cfa!==dfa;++cfa)_ea.push(rga(afa[cfa]).scale(bfa));const efa=new this($ea.name,$ea.duration,_ea,$ea.blendMode);return efa.uuid=$ea.uuid,efa}static toJSON(ffa){const gfa=[],hfa=ffa.tracks,ifa={name:ffa.name,duration:ffa.duration,tracks:gfa,uuid:ffa.uuid,blendMode:ffa.blendMode};for(let jfa=0,kfa=hfa.length;jfa!==kfa;++jfa)gfa.push(nda.toJSON(hfa[jfa]));return ifa}static CreateFromMorphTargetSequence(lfa,mfa,nfa,ofa){const pfa=mfa.length,qfa=[];for(let rfa=0;rfa<pfa;rfa++){let sfa=[],tfa=[];sfa.push((rfa+pfa-1)%pfa,rfa,(rfa+1)%pfa),tfa.push(0,1,0);const ufa=Oba.getKeyframeOrder(sfa);sfa=Oba.sortedArray(sfa,1,ufa),tfa=Oba.sortedArray(tfa,1,ufa),ofa||0!==sfa[0]||(sfa.push(pfa),tfa.push(tfa[0])),qfa.push(new Bea(".morphTargetInfluences["+mfa[rfa].name+"]",sfa,tfa).scale(1/nfa))}return new this(lfa,-1,qfa)}static findByName(vfa,wfa){let xfa=vfa;if(!Array.isArray(vfa)){const yfa=vfa;xfa=yfa.geometry&&yfa.geometry.animations||yfa.animations}for(let zfa=0;zfa<xfa.length;zfa++)if(xfa[zfa].name===wfa)return xfa[zfa];return null}static CreateClipsFromMorphTargetSequences(Afa,Bfa,Cfa){const Dfa={},Efa=/^([\w-]*?)([\d]+)$/;for(let Ffa=0,Gfa=Afa.length;Ffa<Gfa;Ffa++){const Hfa=Afa[Ffa],Ifa=Hfa.name.match(Efa);if(Ifa&&Ifa.length>1){const Jfa=Ifa[1];let Kfa=Dfa[Jfa];Kfa||(Dfa[Jfa]=Kfa=[]),Kfa.push(Hfa)}}const Lfa=[];for(const Mfa in Dfa)Lfa.push(this.CreateFromMorphTargetSequence(Mfa,Dfa[Mfa],Bfa,Cfa));return Lfa}static parseAnimation(Nfa,Ofa){if(!Nfa)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const Pfa=function(a,b,c,d,e){if(0!==c.length){const f=[],g=[];Oba.flattenJSON(c,f,g,d),0!==f.length&&e.push(new a(b,f,g))}},Qfa=[],Rfa=Nfa.name||"default",Sfa=Nfa.fps||30,Tfa=Nfa.blendMode;let Ufa=Nfa.length|| -1;const Vfa=Nfa.hierarchy||[];for(let Wfa=0;Wfa<Vfa.length;Wfa++){const Xfa=Vfa[Wfa].keys;if(Xfa&&0!==Xfa.length)if(Xfa[0].morphTargets){const Yfa={};let Zfa;for(Zfa=0;Zfa<Xfa.length;Zfa++)if(Xfa[Zfa].morphTargets)for(let $fa=0;$fa<Xfa[Zfa].morphTargets.length;$fa++)Yfa[Xfa[Zfa].morphTargets[$fa]]=-1;for(const _fa in Yfa){const aga=[],bga=[];for(let cga=0;cga!==Xfa[Zfa].morphTargets.length;++cga){const dga=Xfa[Zfa];aga.push(dga.time),bga.push(dga.morphTarget===_fa?1:0)}Qfa.push(new Bea(".morphTargetInfluence["+_fa+"]",aga,bga))}Ufa=Yfa.length*(Sfa||1)}else{const ega=".bones["+Ofa[Wfa].name+"]";Pfa(Uea,ega+".position",Xfa,"pos",Qfa),Pfa(Rea,ega+".quaternion",Xfa,"rot",Qfa),Pfa(Uea,ega+".scale",Xfa,"scl",Qfa)}}if(0===Qfa.length)return null;const fga=new this(Rfa,Ufa,Qfa,Tfa);return fga}resetDuration(){const gga=this.tracks;let hga=0;for(let iga=0,jga=gga.length;iga!==jga;++iga){const kga=this.tracks[iga];hga=Math.max(hga,kga.times[kga.times.length-1])}return this.duration=hga,this}trim(){for(let lga=0;lga<this.tracks.length;lga++)this.tracks[lga].trim(0,this.duration);return this}validate(){let mga=!0;for(let nga=0;nga<this.tracks.length;nga++)mga=mga&&this.tracks[nga].validate();return mga}optimize(){for(let oga=0;oga<this.tracks.length;oga++)this.tracks[oga].optimize();return this}clone(){const pga=[];for(let qga=0;qga<this.tracks.length;qga++)pga.push(this.tracks[qga].clone());return new this.constructor(this.name,this.duration,pga,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function rga(a){if(void 0===a.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const b=function(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Bea;case"vector":case"vector2":case"vector3":case"vector4":return Uea;case"color":return Aea;case"quaternion":return Rea;case"bool":case"boolean":return zea;case"string":return Tea}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+a)}(a.type);if(void 0===a.times){const c=[],d=[];Oba.flattenJSON(a.keys,c,d,"value"),a.times=c,a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)}const sga={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};class tga{constructor(uga,vga,wga){const xga=this;let yga=!1,zga=0,Aga=0,Bga;const Cga=[];this.onStart=void 0,this.onLoad=uga,this.onProgress=vga,this.onError=wga,this.itemStart=function(a){Aga++,!1===yga&& void 0!==xga.onStart&&xga.onStart(a,zga,Aga),yga=!0},this.itemEnd=function(a){zga++,void 0!==xga.onProgress&&xga.onProgress(a,zga,Aga),zga===Aga&&(yga=!1,void 0!==xga.onLoad&&xga.onLoad())},this.itemError=function(a){void 0!==xga.onError&&xga.onError(a)},this.resolveURL=function(a){return Bga?Bga(a):a},this.setURLModifier=function(a){return Bga=a,this},this.addHandler=function(a,b){return Cga.push(a,b),this},this.removeHandler=function(a){const b=Cga.indexOf(a);return -1!==b&&Cga.splice(b,2),this},this.getHandler=function(a){for(let b=0,c=Cga.length;b<c;b+=2){const d=Cga[b],e=Cga[b+1];if(d.global&&(d.lastIndex=0),d.test(a))return e}return null}}}const Dga=new tga();class Ega{constructor(Fga){this.manager=void 0!==Fga?Fga:Dga,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(Gga,Hga){const Iga=this;return new Promise(function(a,b){Iga.load(Gga,a,Hga,b)})}parse(){}setCrossOrigin(Jga){return this.crossOrigin=Jga,this}setWithCredentials(Kga){return this.withCredentials=Kga,this}setPath(Lga){return this.path=Lga,this}setResourcePath(Mga){return this.resourcePath=Mga,this}setRequestHeader(Nga){return this.requestHeader=Nga,this}}const Oga={};class Pga extends Ega{constructor(Qga){super(Qga)}load(Rga,Sga,Tga,Uga){void 0===Rga&&(Rga=""),void 0!==this.path&&(Rga=this.path+Rga),Rga=this.manager.resolveURL(Rga);const Vga=sga.get(Rga);if(void 0!==Vga)return this.manager.itemStart(Rga),setTimeout(()=>{Sga&&Sga(Vga),this.manager.itemEnd(Rga)},0),Vga;if(void 0!==Oga[Rga]){Oga[Rga].push({onLoad:Sga,onProgress:Tga,onError:Uga});return}Oga[Rga]=[],Oga[Rga].push({onLoad:Sga,onProgress:Tga,onError:Uga});const Wga=new Request(Rga,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),Xga=this.mimeType,Yga=this.responseType;fetch(Wga).then(a=>{if(200===a.status||0===a.status){if(0===a.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream|| void 0===a.body.getReader)return a;const b=Oga[Rga],c=a.body.getReader(),d=a.headers.get("Content-Length"),e=d?parseInt(d):0,f=0!==e;let g=0;const h=new ReadableStream({start(a){d();function d(){c.read().then(({done:c,value:h})=>{if(c)a.close();else{g+=h.byteLength;const i=new ProgressEvent("progress",{lengthComputable:f,loaded:g,total:e});for(let j=0,k=b.length;j<k;j++){const l=b[j];l.onProgress&&l.onProgress(i)}a.enqueue(h),d()}})}}});return new Response(h)}throw Error(`fetch for "${a.url}" responded with ${a.status}: ${a.statusText}`)}).then(a=>{switch(Yga){case"arraybuffer":return a.arrayBuffer();case"blob":return a.blob();case"document":return a.text().then(a=>{const b=new DOMParser();return b.parseFromString(a,Xga)});case"json":return a.json();default:if(void 0===Xga)return a.text();{const b=/charset="?([^;"\s]*)"?/i,c=b.exec(Xga),d=c&&c[1]?c[1].toLowerCase():void 0,e=new TextDecoder(d);return a.arrayBuffer().then(a=>e.decode(a))}}}).then(a=>{sga.add(Rga,a);const b=Oga[Rga];delete Oga[Rga];for(let c=0,d=b.length;c<d;c++){const e=b[c];e.onLoad&&e.onLoad(a)}}).catch(a=>{const b=Oga[Rga];if(void 0===b)throw this.manager.itemError(Rga),a;delete Oga[Rga];for(let c=0,d=b.length;c<d;c++){const e=b[c];e.onError&&e.onError(a)}this.manager.itemError(Rga)}).finally(()=>{this.manager.itemEnd(Rga)}),this.manager.itemStart(Rga)}setResponseType(Zga){return this.responseType=Zga,this}setMimeType($ga){return this.mimeType=$ga,this}}class _ga extends Ega{constructor(aha){super(aha)}load(bha,cha,dha,eha){const fha=this,gha=[],hha=new PY(),iha=new Pga(this.manager);iha.setPath(this.path),iha.setResponseType("arraybuffer"),iha.setRequestHeader(this.requestHeader),iha.setWithCredentials(fha.withCredentials);let jha=0;function kha(a){iha.load(bha[a],function(b){const c=fha.parse(b,!0);gha[a]={width:c.width,height:c.height,format:c.format,mipmaps:c.mipmaps},6===(jha+=1)&&(1===c.mipmapCount&&(hha.minFilter=1006),hha.image=gha,hha.format=c.format,hha.needsUpdate=!0,cha&&cha(hha))},dha,eha)}if(Array.isArray(bha))for(let lha=0,mha=bha.length;lha<mha;++lha)kha(lha);else iha.load(bha,function(a){const b=fha.parse(a,!0);if(b.isCubemap){const c=b.mipmaps.length/b.mipmapCount;for(let d=0;d<c;d++){gha[d]={mipmaps:[]};for(let e=0;e<b.mipmapCount;e++)gha[d].mipmaps.push(b.mipmaps[d*b.mipmapCount+e]),gha[d].format=b.format,gha[d].width=b.width,gha[d].height=b.height}hha.image=gha}else hha.image.width=b.width,hha.image.height=b.height,hha.mipmaps=b.mipmaps;1===b.mipmapCount&&(hha.minFilter=1006),hha.format=b.format,hha.needsUpdate=!0,cha&&cha(hha)},dha,eha);return hha}}class nha extends Ega{constructor(oha){super(oha)}load(pha,qha,rha,sha){void 0!==this.path&&(pha=this.path+pha),pha=this.manager.resolveURL(pha);const tha=this,uha=sga.get(pha);if(void 0!==uha)return tha.manager.itemStart(pha),setTimeout(function(){qha&&qha(uha),tha.manager.itemEnd(pha)},0),uha;const vha=zd("img");function wha(){yha(),sga.add(pha,this),qha&&qha(this),tha.manager.itemEnd(pha)}function xha(a){yha(),sha&&sha(a),tha.manager.itemError(pha),tha.manager.itemEnd(pha)}function yha(){vha.removeEventListener("load",wha,!1),vha.removeEventListener("error",xha,!1)}return vha.addEventListener("load",wha,!1),vha.addEventListener("error",xha,!1),"data:"!==pha.substr(0,5)&& void 0!==this.crossOrigin&&(vha.crossOrigin=this.crossOrigin),tha.manager.itemStart(pha),vha.src=pha,vha}}class zha extends Ega{constructor(Aha){super(Aha)}load(Bha,Cha,Dha,Eha){const Fha=new lJ(),Gha=new nha(this.manager);Gha.setCrossOrigin(this.crossOrigin),Gha.setPath(this.path);let Hha=0;function Iha(a){Gha.load(Bha[a],function(b){Fha.images[a]=b,Hha++,6===Hha&&(Fha.needsUpdate=!0,Cha&&Cha(Fha))},void 0,Eha)}for(let Jha=0;Jha<Bha.length;++Jha)Iha(Jha);return Fha}}class Kha extends Ega{constructor(Lha){super(Lha)}load(Mha,Nha,Oha,Pha){const Qha=this,Rha=new VU(),Sha=new Pga(this.manager);return Sha.setResponseType("arraybuffer"),Sha.setRequestHeader(this.requestHeader),Sha.setPath(this.path),Sha.setWithCredentials(Qha.withCredentials),Sha.load(Mha,function(a){const b=Qha.parse(a);!!b&&(void 0!==b.image?Rha.image=b.image:void 0!==b.data&&(Rha.image.width=b.width,Rha.image.height=b.height,Rha.image.data=b.data),Rha.wrapS=void 0!==b.wrapS?b.wrapS:1001,Rha.wrapT=void 0!==b.wrapT?b.wrapT:1001,Rha.magFilter=void 0!==b.magFilter?b.magFilter:1006,Rha.minFilter=void 0!==b.minFilter?b.minFilter:1006,Rha.anisotropy=void 0!==b.anisotropy?b.anisotropy:1,void 0!==b.encoding&&(Rha.encoding=b.encoding),void 0!==b.flipY&&(Rha.flipY=b.flipY),void 0!==b.format&&(Rha.format=b.format),void 0!==b.type&&(Rha.type=b.type),void 0!==b.mipmaps&&(Rha.mipmaps=b.mipmaps,Rha.minFilter=r),1===b.mipmapCount&&(Rha.minFilter=1006),void 0!==b.generateMipmaps&&(Rha.generateMipmaps=b.generateMipmaps),Rha.needsUpdate=!0,Nha&&Nha(Rha,b))},Oha,Pha),Rha}}class Tha extends Ega{constructor(Uha){super(Uha)}load(Vha,Wha,Xha,Yha){const Zha=new gf(),$ha=new nha(this.manager);return $ha.setCrossOrigin(this.crossOrigin),$ha.setPath(this.path),$ha.load(Vha,function(a){Zha.image=a,Zha.needsUpdate=!0,void 0!==Wha&&Wha(Zha)},Xha,Yha),Zha}}class _ha extends Vw{constructor(aia,bia=1){super(),this.type="Light",this.color=new Gd(aia),this.intensity=bia}dispose(){}copy(cia){return super.copy(cia),this.color.copy(cia.color),this.intensity=cia.intensity,this}toJSON(dia){const eia=super.toJSON(dia);return eia.object.color=this.color.getHex(),eia.object.intensity=this.intensity,void 0!==this.groundColor&&(eia.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(eia.object.distance=this.distance),void 0!==this.angle&&(eia.object.angle=this.angle),void 0!==this.decay&&(eia.object.decay=this.decay),void 0!==this.penumbra&&(eia.object.penumbra=this.penumbra),void 0!==this.shadow&&(eia.object.shadow=this.shadow.toJSON()),eia}}_ha.prototype.isLight=!0,(class extends _ha{constructor(fia,gia,hia){super(fia,hia),this.type="HemisphereLight",this.position.copy(Vw.DefaultUp),this.updateMatrix(),this.groundColor=new Gd(gia)}copy(iia){return _ha.prototype.copy.call(this,iia),this.groundColor.copy(iia.groundColor),this}}).prototype.isHemisphereLight=!0;const jia=new Kq(),kia=new qk(),lia=new qk();class mia{constructor(nia){this.camera=nia,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new ea(512,512),this.map=null,this.mapPass=null,this.matrix=new Kq(),this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new FK(),this._frameExtents=new ea(1,1),this._viewportCount=1,this._viewports=[new Df(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(oia){const pia=this.camera,qia=this.matrix;kia.setFromMatrixPosition(oia.matrixWorld),pia.position.copy(kia),lia.setFromMatrixPosition(oia.target.matrixWorld),pia.lookAt(lia),pia.updateMatrixWorld(),jia.multiplyMatrices(pia.projectionMatrix,pia.matrixWorldInverse),this._frustum.setFromProjectionMatrix(jia),qia.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1),qia.multiply(pia.projectionMatrix),qia.multiply(pia.matrixWorldInverse)}getViewport(ria){return this._viewports[ria]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(sia){return this.camera=sia.camera.clone(),this.bias=sia.bias,this.radius=sia.radius,this.mapSize.copy(sia.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const tia={};return 0!==this.bias&&(tia.bias=this.bias),0!==this.normalBias&&(tia.normalBias=this.normalBias),1!==this.radius&&(tia.radius=this.radius),(512!==this.mapSize.x||512!==this.mapSize.y)&&(tia.mapSize=this.mapSize.toArray()),tia.camera=this.camera.toJSON(!1).object,delete tia.camera.matrix,tia}}class uia extends mia{constructor(){super(new qI(50,1,0.5,500)),this.focus=1}updateMatrices(via){const wia=this.camera,xia=2*Y*via.angle*this.focus,yia=this.mapSize.width/this.mapSize.height,zia=via.distance||wia.far;(xia!==wia.fov||yia!==wia.aspect||zia!==wia.far)&&(wia.fov=xia,wia.aspect=yia,wia.far=zia,wia.updateProjectionMatrix()),super.updateMatrices(via)}copy(Aia){return super.copy(Aia),this.focus=Aia.focus,this}}uia.prototype.isSpotLightShadow=!0,(class extends _ha{constructor(Bia,Cia,Dia=0,Eia=Math.PI/3,Fia=0,Gia=1){super(Bia,Cia),this.type="SpotLight",this.position.copy(Vw.DefaultUp),this.updateMatrix(),this.target=new Vw(),this.distance=Dia,this.angle=Eia,this.penumbra=Fia,this.decay=Gia,this.shadow=new uia()}get power(){return this.intensity*Math.PI}set power(Hia){this.intensity=Hia/Math.PI}dispose(){this.shadow.dispose()}copy(Iia){return super.copy(Iia),this.distance=Iia.distance,this.angle=Iia.angle,this.penumbra=Iia.penumbra,this.decay=Iia.decay,this.target=Iia.target.clone(),this.shadow=Iia.shadow.clone(),this}}).prototype.isSpotLight=!0;const Jia=new Kq(),Kia=new qk(),Lia=new qk();class Mia extends mia{constructor(){super(new qI(90,1,0.5,500)),this._frameExtents=new ea(4,2),this._viewportCount=6,this._viewports=[new Df(2,1,1,1),new Df(0,1,1,1),new Df(3,1,1,1),new Df(1,1,1,1),new Df(3,0,1,1),new Df(1,0,1,1)],this._cubeDirections=[new qk(1,0,0),new qk(-1,0,0),new qk(0,0,1),new qk(0,0,-1),new qk(0,1,0),new qk(0,-1,0)],this._cubeUps=[new qk(0,1,0),new qk(0,1,0),new qk(0,1,0),new qk(0,1,0),new qk(0,0,1),new qk(0,0,-1)]}updateMatrices(Nia,Oia=0){const Pia=this.camera,Qia=this.matrix,Ria=Nia.distance||Pia.far;Ria!==Pia.far&&(Pia.far=Ria,Pia.updateProjectionMatrix()),Kia.setFromMatrixPosition(Nia.matrixWorld),Pia.position.copy(Kia),Lia.copy(Pia.position),Lia.add(this._cubeDirections[Oia]),Pia.up.copy(this._cubeUps[Oia]),Pia.lookAt(Lia),Pia.updateMatrixWorld(),Qia.makeTranslation(-Kia.x,-Kia.y,-Kia.z),Jia.multiplyMatrices(Pia.projectionMatrix,Pia.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Jia)}}Mia.prototype.isPointLightShadow=!0,(class extends _ha{constructor(Sia,Tia,Uia=0,Via=1){super(Sia,Tia),this.type="PointLight",this.distance=Uia,this.decay=Via,this.shadow=new Mia()}get power(){return 4*this.intensity*Math.PI}set power(Wia){this.intensity=Wia/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(Xia){return super.copy(Xia),this.distance=Xia.distance,this.decay=Xia.decay,this.shadow=Xia.shadow.clone(),this}}).prototype.isPointLight=!0;class Yia extends mia{constructor(){super(new oM(-5,5,5,-5,0.5,500))}}Yia.prototype.isDirectionalLightShadow=!0;class Zia extends _ha{constructor($ia,_ia){super($ia,_ia),this.type="DirectionalLight",this.position.copy(Vw.DefaultUp),this.updateMatrix(),this.target=new Vw(),this.shadow=new Yia()}dispose(){this.shadow.dispose()}copy(aja){return super.copy(aja),this.target=aja.target.clone(),this.shadow=aja.shadow.clone(),this}}Zia.prototype.isDirectionalLight=!0,(class extends _ha{constructor(bja,cja){super(bja,cja),this.type="AmbientLight"}}).prototype.isAmbientLight=!0,(class extends _ha{constructor(dja,eja,fja=10,gja=10){super(dja,eja),this.type="RectAreaLight",this.width=fja,this.height=gja}get power(){return this.intensity*this.width*this.height*Math.PI}set power(hja){this.intensity=hja/(this.width*this.height*Math.PI)}copy(ija){return super.copy(ija),this.width=ija.width,this.height=ija.height,this}toJSON(jja){const kja=super.toJSON(jja);return kja.object.width=this.width,kja.object.height=this.height,kja}}).prototype.isRectAreaLight=!0;class lja{constructor(){this.coefficients=[];for(let mja=0;mja<9;mja++)this.coefficients.push(new qk())}set(nja){for(let oja=0;oja<9;oja++)this.coefficients[oja].copy(nja[oja]);return this}zero(){for(let pja=0;pja<9;pja++)this.coefficients[pja].set(0,0,0);return this}getAt(qja,rja){const sja=qja.x,tja=qja.y,uja=qja.z,vja=this.coefficients;return rja.copy(vja[0]).multiplyScalar(0.282095),rja.addScaledVector(vja[1],0.488603*tja),rja.addScaledVector(vja[2],0.488603*uja),rja.addScaledVector(vja[3],0.488603*sja),rja.addScaledVector(vja[4],1.092548*(sja*tja)),rja.addScaledVector(vja[5],1.092548*(tja*uja)),rja.addScaledVector(vja[6],0.315392*(3*uja*uja-1)),rja.addScaledVector(vja[7],1.092548*(sja*uja)),rja.addScaledVector(vja[8],0.546274*(sja*sja-tja*tja)),rja}getIrradianceAt(wja,xja){const yja=wja.x,zja=wja.y,Aja=wja.z,Bja=this.coefficients;return xja.copy(Bja[0]).multiplyScalar(0.886227),xja.addScaledVector(Bja[1],1.023328*zja),xja.addScaledVector(Bja[2],1.023328*Aja),xja.addScaledVector(Bja[3],1.023328*yja),xja.addScaledVector(Bja[4],0.858086*yja*zja),xja.addScaledVector(Bja[5],0.858086*zja*Aja),xja.addScaledVector(Bja[6],0.743125*Aja*Aja-0.247708),xja.addScaledVector(Bja[7],0.858086*yja*Aja),xja.addScaledVector(Bja[8],0.429043*(yja*yja-zja*zja)),xja}add(Cja){for(let Dja=0;Dja<9;Dja++)this.coefficients[Dja].add(Cja.coefficients[Dja]);return this}addScaledSH(Eja,Fja){for(let Gja=0;Gja<9;Gja++)this.coefficients[Gja].addScaledVector(Eja.coefficients[Gja],Fja);return this}scale(Hja){for(let Ija=0;Ija<9;Ija++)this.coefficients[Ija].multiplyScalar(Hja);return this}lerp(Jja,Kja){for(let Lja=0;Lja<9;Lja++)this.coefficients[Lja].lerp(Jja.coefficients[Lja],Kja);return this}equals(Mja){for(let Nja=0;Nja<9;Nja++)if(!this.coefficients[Nja].equals(Mja.coefficients[Nja]))return!1;return!0}copy(Oja){return this.set(Oja.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(Pja,Qja=0){const Rja=this.coefficients;for(let Sja=0;Sja<9;Sja++)Rja[Sja].fromArray(Pja,Qja+3*Sja);return this}toArray(Tja=[],Uja=0){const Vja=this.coefficients;for(let Wja=0;Wja<9;Wja++)Vja[Wja].toArray(Tja,Uja+3*Wja);return Tja}static getBasisAt(Xja,Yja){const Zja=Xja.x,$ja=Xja.y,_ja=Xja.z;Yja[0]=0.282095,Yja[1]=0.488603*$ja,Yja[2]=0.488603*_ja,Yja[3]=0.488603*Zja,Yja[4]=1.092548*Zja*$ja,Yja[5]=1.092548*$ja*_ja,Yja[6]=0.315392*(3*_ja*_ja-1),Yja[7]=1.092548*Zja*_ja,Yja[8]=0.546274*(Zja*Zja-$ja*$ja)}}lja.prototype.isSphericalHarmonics3=!0;class aka extends _ha{constructor(bka=new lja(),cka=1){super(void 0,cka),this.sh=bka}copy(dka){return super.copy(dka),this.sh.copy(dka.sh),this}fromJSON(eka){return this.intensity=eka.intensity,this.sh.fromArray(eka.sh),this}toJSON(fka){const gka=super.toJSON(fka);return gka.object.sh=this.sh.toArray(),gka}}aka.prototype.isLightProbe=!0;class hka{static decodeText(ika){if("undefined"!=typeof TextDecoder)return new TextDecoder().decode(ika);let jka="";for(let kka=0,lka=ika.length;kka<lka;kka++)jka+=String.fromCharCode(ika[kka]);try{return decodeURIComponent(escape(jka))}catch(mka){return jka}}static extractUrlBase(nka){const oka=nka.lastIndexOf("/");return -1===oka?"./":nka.substr(0,oka+1)}static resolveURL(pka,qka){return"string"!=typeof pka||""===pka?"":(/^https?:\/\//i.test(qka)&&/^\//.test(pka)&&(qka=qka.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(pka))?pka:/^data:.*,.*$/i.test(pka)?pka:/^blob:.*$/i.test(pka)?pka:qka+pka}}(class extends PC{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(rka){return super.copy(rka),this.instanceCount=rka.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const ska=super.toJSON(this);return ska.instanceCount=this.instanceCount,ska.isInstancedBufferGeometry=!0,ska}}).prototype.isInstancedBufferGeometry=!0,(class extends Ega{constructor(tka){super(tka),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(uka){return this.options=uka,this}load(vka,wka,xka,yka){void 0===vka&&(vka=""),void 0!==this.path&&(vka=this.path+vka),vka=this.manager.resolveURL(vka);const zka=this,Aka=sga.get(vka);if(void 0!==Aka)return zka.manager.itemStart(vka),setTimeout(function(){wka&&wka(Aka),zka.manager.itemEnd(vka)},0),Aka;const Bka={};Bka.credentials="anonymous"===this.crossOrigin?"same-origin":"include",Bka.headers=this.requestHeader,fetch(vka,Bka).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,Object.assign(zka.options,{colorSpaceConversion:"none"}))}).then(function(a){sga.add(vka,a),wka&&wka(a),zka.manager.itemEnd(vka)}).catch(function(a){yka&&yka(a),zka.manager.itemError(vka),zka.manager.itemEnd(vka)}),zka.manager.itemStart(vka)}}).prototype.isImageBitmapLoader=!0;let Cka;const Dka={getContext:function(){return void 0===Cka&&(Cka=new(window.AudioContext||window.webkitAudioContext)()),Cka},setContext:function(a){Cka=a}};class Eka extends Ega{constructor(Fka){super(Fka)}load(Gka,Hka,Ika,Jka){const Kka=this,Lka=new Pga(this.manager);Lka.setResponseType("arraybuffer"),Lka.setPath(this.path),Lka.setRequestHeader(this.requestHeader),Lka.setWithCredentials(this.withCredentials),Lka.load(Gka,function(a){try{const b=a.slice(0),c=Dka.getContext();c.decodeAudioData(b,function(a){Hka(a)})}catch(d){Jka?Jka(d):console.error(d),Kka.manager.itemError(Gka)}},Ika,Jka)}}(class extends aka{constructor(Mka,Nka,Oka=1){super(void 0,Oka);const Pka=new Gd().set(Mka),Qka=new Gd().set(Nka),Rka=new qk(Pka.r,Pka.g,Pka.b),Ska=new qk(Qka.r,Qka.g,Qka.b),Tka=Math.sqrt(Math.PI);this.sh.coefficients[0].copy(Rka).add(Ska).multiplyScalar(Tka),this.sh.coefficients[1].copy(Rka).sub(Ska).multiplyScalar(Tka*Math.sqrt(0.75))}}).prototype.isHemisphereLightProbe=!0,(class extends aka{constructor(Uka,Vka=1){super(void 0,Vka);const Wka=new Gd().set(Uka);this.sh.coefficients[0].set(Wka.r,Wka.g,Wka.b).multiplyScalar(2*Math.sqrt(Math.PI))}}).prototype.isAmbientLightProbe=!0,new Kq(),new Kq(),new Kq();class Xka{constructor(Yka=!0){this.autoStart=Yka,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=_ka(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let Zka=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const $ka=_ka();Zka=($ka-this.oldTime)/1000,this.oldTime=$ka,this.elapsedTime+=Zka}return Zka}}function _ka(){return("undefined"==typeof performance?Date:performance).now()}new qk(),new Lh(),new qk(),new qk(),new qk(),new Lh(),new qk(),new qk();class ala{constructor(bla,cla,dla){this.binding=bla,this.valueSize=dla;let ela,fla,gla;switch(cla){case"quaternion":ela=this._slerp,fla=this._slerpAdditive,gla=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*dla),this._workIndex=5;break;case"string":case"bool":ela=this._select,fla=this._select,gla=this._setAdditiveIdentityOther,this.buffer=new Array(5*dla);break;default:ela=this._lerp,fla=this._lerpAdditive,gla=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*dla)}this._mixBufferRegion=ela,this._mixBufferRegionAdditive=fla,this._setIdentity=gla,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(hla,ila){const jla=this.buffer,kla=this.valueSize,lla=hla*kla+kla;let mla=this.cumulativeWeight;if(0===mla){for(let nla=0;nla!==kla;++nla)jla[lla+nla]=jla[nla];mla=ila}else{mla+=ila;const ola=ila/mla;this._mixBufferRegion(jla,lla,0,ola,kla)}this.cumulativeWeight=mla}accumulateAdditive(pla){const qla=this.buffer,rla=this.valueSize,sla=rla*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(qla,sla,0,pla,rla),this.cumulativeWeightAdditive+=pla}apply(tla){const ula=this.valueSize,vla=this.buffer,wla=tla*ula+ula,xla=this.cumulativeWeight,yla=this.cumulativeWeightAdditive,zla=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,xla<1){const Ala=ula*this._origIndex;this._mixBufferRegion(vla,wla,Ala,1-xla,ula)}yla>0&&this._mixBufferRegionAdditive(vla,wla,this._addIndex*ula,1,ula);for(let Bla=ula,Cla=ula+ula;Bla!==Cla;++Bla)if(vla[Bla]!==vla[Bla+ula]){zla.setValue(vla,wla);break}}saveOriginalState(){const Dla=this.binding,Ela=this.buffer,Fla=this.valueSize,Gla=Fla*this._origIndex;Dla.getValue(Ela,Gla);for(let Hla=Fla,Ila=Gla;Hla!==Ila;++Hla)Ela[Hla]=Ela[Gla+Hla%Fla];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const Jla=3*this.valueSize;this.binding.setValue(this.buffer,Jla)}_setAdditiveIdentityNumeric(){const Kla=this._addIndex*this.valueSize,Lla=Kla+this.valueSize;for(let Mla=Kla;Mla<Lla;Mla++)this.buffer[Mla]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const Nla=this._origIndex*this.valueSize,Ola=this._addIndex*this.valueSize;for(let Pla=0;Pla<this.valueSize;Pla++)this.buffer[Ola+Pla]=this.buffer[Nla+Pla]}_select(Qla,Rla,Sla,Tla,Ula){if(Tla>=0.5)for(let Vla=0;Vla!==Ula;++Vla)Qla[Rla+Vla]=Qla[Sla+Vla]}_slerp(Wla,Xla,Yla,Zla){Lh.slerpFlat(Wla,Xla,Wla,Xla,Wla,Yla,Zla)}_slerpAdditive($la,_la,ama,bma,cma){const dma=this._workIndex*cma;Lh.multiplyQuaternionsFlat($la,dma,$la,_la,$la,ama),Lh.slerpFlat($la,_la,$la,_la,$la,dma,bma)}_lerp(ema,fma,gma,hma,ima){const jma=1-hma;for(let kma=0;kma!==ima;++kma){const lma=fma+kma;ema[lma]=ema[lma]*jma+ema[gma+kma]*hma}}_lerpAdditive(mma,nma,oma,pma,qma){for(let rma=0;rma!==qma;++rma){const sma=nma+rma;mma[sma]=mma[sma]+mma[oma+rma]*pma}}}const tma="\\[\\]\\.:\\/",uma=new RegExp("["+tma+"]","g"),vma="[^"+tma+"]",wma="[^"+tma.replace("\\.","")+"]",xma=/((?:WC+[\/:])*)/.source.replace("WC",vma),yma=/(WCOD+)?/.source.replace("WCOD",wma),zma=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",vma),Ama=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",vma),Bma=new RegExp("^"+xma+yma+zma+Ama+"$"),Cma=["material","materials","bones"];class Dma{constructor(Ema,Fma,Gma){this.path=Fma,this.parsedPath=Gma||Dma.parseTrackName(Fma),this.node=Dma.findNode(Ema,this.parsedPath.nodeName)||Ema,this.rootNode=Ema,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(Hma,Ima,Jma){return Hma&&Hma.isAnimationObjectGroup?new Dma.Composite(Hma,Ima,Jma):new Dma(Hma,Ima,Jma)}static sanitizeNodeName(Kma){return Kma.replace(/\s/g,"_").replace(uma,"")}static parseTrackName(Lma){const Mma=Bma.exec(Lma);if(!Mma)throw new Error("PropertyBinding: Cannot parse trackName: "+Lma);const Nma={nodeName:Mma[2],objectName:Mma[3],objectIndex:Mma[4],propertyName:Mma[5],propertyIndex:Mma[6]},Oma=Nma.nodeName&&Nma.nodeName.lastIndexOf(".");if(void 0!==Oma&& -1!==Oma){const Pma=Nma.nodeName.substring(Oma+1);-1!==Cma.indexOf(Pma)&&(Nma.nodeName=Nma.nodeName.substring(0,Oma),Nma.objectName=Pma)}if(null===Nma.propertyName||0===Nma.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+Lma);return Nma}static findNode(Qma,Rma){if(!Rma||""===Rma||"."===Rma|| -1===Rma||Rma===Qma.name||Rma===Qma.uuid)return Qma;if(Qma.skeleton){const Sma=Qma.skeleton.getBoneByName(Rma);if(void 0!==Sma)return Sma}if(Qma.children){const Tma=function(a){for(let b=0;b<a.length;b++){const c=a[b];if(c.name===Rma||c.uuid===Rma)return c;const d=Tma(c.children);if(d)return d}return null},Uma=Tma(Qma.children);if(Uma)return Uma}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(Vma,Wma){Vma[Wma]=this.targetObject[this.propertyName]}_getValue_array(Xma,Yma){const Zma=this.resolvedProperty;for(let $ma=0,_ma=Zma.length;$ma!==_ma;++$ma)Xma[Yma++]=Zma[$ma]}_getValue_arrayElement(ana,bna){ana[bna]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(cna,dna){this.resolvedProperty.toArray(cna,dna)}_setValue_direct(ena,fna){this.targetObject[this.propertyName]=ena[fna]}_setValue_direct_setNeedsUpdate(gna,hna){this.targetObject[this.propertyName]=gna[hna],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(ina,jna){this.targetObject[this.propertyName]=ina[jna],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(kna,lna){const mna=this.resolvedProperty;for(let nna=0,ona=mna.length;nna!==ona;++nna)mna[nna]=kna[lna++]}_setValue_array_setNeedsUpdate(pna,qna){const rna=this.resolvedProperty;for(let sna=0,tna=rna.length;sna!==tna;++sna)rna[sna]=pna[qna++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(una,vna){const wna=this.resolvedProperty;for(let xna=0,yna=wna.length;xna!==yna;++xna)wna[xna]=una[vna++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(zna,Ana){this.resolvedProperty[this.propertyIndex]=zna[Ana]}_setValue_arrayElement_setNeedsUpdate(Bna,Cna){this.resolvedProperty[this.propertyIndex]=Bna[Cna],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(Dna,Ena){this.resolvedProperty[this.propertyIndex]=Dna[Ena],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(Fna,Gna){this.resolvedProperty.fromArray(Fna,Gna)}_setValue_fromArray_setNeedsUpdate(Hna,Ina){this.resolvedProperty.fromArray(Hna,Ina),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(Jna,Kna){this.resolvedProperty.fromArray(Jna,Kna),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(Lna,Mna){this.bind(),this.getValue(Lna,Mna)}_setValue_unbound(Nna,Ona){this.bind(),this.setValue(Nna,Ona)}bind(){let Pna=this.node;const Qna=this.parsedPath,Rna=Qna.objectName,Sna=Qna.propertyName;let Tna=Qna.propertyIndex;if(Pna||(Pna=Dma.findNode(this.rootNode,Qna.nodeName)||this.rootNode,this.node=Pna),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!Pna){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(Rna){let Una=Qna.objectIndex;switch(Rna){case"materials":if(!Pna.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!Pna.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}Pna=Pna.material.materials;break;case"bones":if(!Pna.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}Pna=Pna.skeleton.bones;for(let Vna=0;Vna<Pna.length;Vna++)if(Pna[Vna].name===Una){Una=Vna;break}break;default:if(void 0===Pna[Rna]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}Pna=Pna[Rna]}if(void 0!==Una){if(void 0===Pna[Una]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,Pna);return}Pna=Pna[Una]}}const Wna=Pna[Sna];if(void 0===Wna){const Xna=Qna.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+Xna+"."+Sna+" but it wasn't found.",Pna);return}let Yna=this.Versioning.None;this.targetObject=Pna,void 0!==Pna.needsUpdate?Yna=this.Versioning.NeedsUpdate:void 0!==Pna.matrixWorldNeedsUpdate&&(Yna=this.Versioning.MatrixWorldNeedsUpdate);let Zna=this.BindingType.Direct;if(void 0!==Tna){if("morphTargetInfluences"===Sna){if(!Pna.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(Pna.geometry.isBufferGeometry){if(!Pna.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}void 0!==Pna.morphTargetDictionary[Tna]&&(Tna=Pna.morphTargetDictionary[Tna])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}Zna=this.BindingType.ArrayElement,this.resolvedProperty=Wna,this.propertyIndex=Tna}else void 0!==Wna.fromArray&& void 0!==Wna.toArray?(Zna=this.BindingType.HasFromToArray,this.resolvedProperty=Wna):Array.isArray(Wna)?(Zna=this.BindingType.EntireArray,this.resolvedProperty=Wna):this.propertyName=Sna;this.getValue=this.GetterByBindingType[Zna],this.setValue=this.SetterByBindingTypeAndVersioning[Zna][Yna]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Dma.Composite=class{constructor($na,_na,aoa){const boa=aoa||Dma.parseTrackName(_na);this._targetGroup=$na,this._bindings=$na.subscribe_(_na,boa)}getValue(coa,doa){this.bind();const eoa=this._targetGroup.nCachedObjects_,foa=this._bindings[eoa];void 0!==foa&&foa.getValue(coa,doa)}setValue(goa,hoa){const ioa=this._bindings;for(let joa=this._targetGroup.nCachedObjects_,koa=ioa.length;joa!==koa;++joa)ioa[joa].setValue(goa,hoa)}bind(){const loa=this._bindings;for(let moa=this._targetGroup.nCachedObjects_,noa=loa.length;moa!==noa;++moa)loa[moa].bind()}unbind(){const ooa=this._bindings;for(let poa=this._targetGroup.nCachedObjects_,qoa=ooa.length;poa!==qoa;++poa)ooa[poa].unbind()}},Dma.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Dma.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Dma.prototype.GetterByBindingType=[Dma.prototype._getValue_direct,Dma.prototype._getValue_array,Dma.prototype._getValue_arrayElement,Dma.prototype._getValue_toArray,],Dma.prototype.SetterByBindingTypeAndVersioning=[[Dma.prototype._setValue_direct,Dma.prototype._setValue_direct_setNeedsUpdate,Dma.prototype._setValue_direct_setMatrixWorldNeedsUpdate,],[Dma.prototype._setValue_array,Dma.prototype._setValue_array_setNeedsUpdate,Dma.prototype._setValue_array_setMatrixWorldNeedsUpdate,],[Dma.prototype._setValue_arrayElement,Dma.prototype._setValue_arrayElement_setNeedsUpdate,Dma.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,],[Dma.prototype._setValue_fromArray,Dma.prototype._setValue_fromArray_setNeedsUpdate,Dma.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,]],(class{constructor(){this.uuid=Z(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const roa={};this._indicesByUUID=roa;for(let soa=0,toa=arguments.length;soa!==toa;++soa)roa[arguments[soa].uuid]=soa;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={},this.stats={objects:{get total(){return this._objects.length},get inUse(){return this.total-this.nCachedObjects_}},get bindingsPerObject(){return this._bindings.length}}}add(){const uoa=this._objects,voa=this._indicesByUUID,woa=this._paths,xoa=this._parsedPaths,yoa=this._bindings,zoa=yoa.length;let Aoa,Boa=uoa.length,Coa=this.nCachedObjects_;for(let Doa=0,Eoa=arguments.length;Doa!==Eoa;++Doa){const Foa=arguments[Doa],Goa=Foa.uuid;let Hoa=voa[Goa];if(void 0===Hoa){Hoa=Boa++,voa[Goa]=Hoa,uoa.push(Foa);for(let Ioa=0,Joa=zoa;Ioa!==Joa;++Ioa)yoa[Ioa].push(new Dma(Foa,woa[Ioa],xoa[Ioa]))}else if(Hoa<Coa){Aoa=uoa[Hoa];const Koa=--Coa,Loa=uoa[Koa];voa[Loa.uuid]=Hoa,uoa[Hoa]=Loa,voa[Goa]=Koa,uoa[Koa]=Foa;for(let Moa=0,Noa=zoa;Moa!==Noa;++Moa){const Ooa=yoa[Moa],Poa=Ooa[Koa];let Qoa=Ooa[Hoa];Ooa[Hoa]=Poa,void 0===Qoa&&(Qoa=new Dma(Foa,woa[Moa],xoa[Moa])),Ooa[Koa]=Qoa}}else uoa[Hoa]!==Aoa&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=Coa}remove(){const Roa=this._objects,Soa=this._indicesByUUID,Toa=this._bindings,Uoa=Toa.length;let Voa=this.nCachedObjects_;for(let Woa=0,Xoa=arguments.length;Woa!==Xoa;++Woa){const Yoa=arguments[Woa],Zoa=Yoa.uuid,$oa=Soa[Zoa];if(void 0!==$oa&&$oa>=Voa){const _oa=Voa++,apa=Roa[_oa];Soa[apa.uuid]=$oa,Roa[$oa]=apa,Soa[Zoa]=_oa,Roa[_oa]=Yoa;for(let bpa=0,cpa=Uoa;bpa!==cpa;++bpa){const dpa=Toa[bpa],epa=dpa[_oa],fpa=dpa[$oa];dpa[$oa]=epa,dpa[_oa]=fpa}}}this.nCachedObjects_=Voa}uncache(){const gpa=this._objects,hpa=this._indicesByUUID,ipa=this._bindings,jpa=ipa.length;let kpa=this.nCachedObjects_,lpa=gpa.length;for(let mpa=0,npa=arguments.length;mpa!==npa;++mpa){const opa=arguments[mpa],ppa=opa.uuid,qpa=hpa[ppa];if(void 0!==qpa)if(delete hpa[ppa],qpa<kpa){const rpa=--kpa,spa=gpa[rpa],tpa=--lpa,upa=gpa[tpa];hpa[spa.uuid]=qpa,gpa[qpa]=spa,hpa[upa.uuid]=rpa,gpa[rpa]=upa,gpa.pop();for(let vpa=0,wpa=jpa;vpa!==wpa;++vpa){const xpa=ipa[vpa],ypa=xpa[rpa],zpa=xpa[tpa];xpa[qpa]=ypa,xpa[rpa]=zpa,xpa.pop()}}else{const Apa=--lpa,Bpa=gpa[Apa];Apa>0&&(hpa[Bpa.uuid]=qpa),gpa[qpa]=Bpa,gpa.pop();for(let Cpa=0,Dpa=jpa;Cpa!==Dpa;++Cpa){const Epa=ipa[Cpa];Epa[qpa]=Epa[Apa],Epa.pop()}}}this.nCachedObjects_=kpa}subscribe_(Fpa,Gpa){const Hpa=this._bindingsIndicesByPath;let Ipa=Hpa[Fpa];const Jpa=this._bindings;if(void 0!==Ipa)return Jpa[Ipa];const Kpa=this._paths,Lpa=this._parsedPaths,Mpa=this._objects,Npa=Mpa.length,Opa=this.nCachedObjects_,Ppa=new Array(Npa);Ipa=Jpa.length,Hpa[Fpa]=Ipa,Kpa.push(Fpa),Lpa.push(Gpa),Jpa.push(Ppa);for(let Qpa=Opa,Rpa=Mpa.length;Qpa!==Rpa;++Qpa){const Spa=Mpa[Qpa];Ppa[Qpa]=new Dma(Spa,Fpa,Gpa)}return Ppa}unsubscribe_(Tpa){const Upa=this._bindingsIndicesByPath,Vpa=Upa[Tpa];if(void 0!==Vpa){const Wpa=this._paths,Xpa=this._parsedPaths,Ypa=this._bindings,Zpa=Ypa.length-1,$pa=Ypa[Zpa],_pa=Tpa[Zpa];Upa[_pa]=Vpa,Ypa[Vpa]=$pa,Ypa.pop(),Xpa[Vpa]=Xpa[Zpa],Xpa.pop(),Wpa[Vpa]=Wpa[Zpa],Wpa.pop()}}}).prototype.isAnimationObjectGroup=!0;class aqa{constructor(bqa,cqa,dqa=null,eqa=cqa.blendMode){this._mixer=bqa,this._clip=cqa,this._localRoot=dqa,this.blendMode=eqa;const fqa=cqa.tracks,gqa=fqa.length,hqa=new Array(gqa),iqa={endingStart:2400,endingEnd:2400};for(let jqa=0;jqa!==gqa;++jqa){const kqa=fqa[jqa].createInterpolant(null);hqa[jqa]=kqa,kqa.settings=iqa}this._interpolantSettings=iqa,this._interpolants=hqa,this._propertyBindings=new Array(gqa),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(lqa){return this._startTime=lqa,this}setLoop(mqa,nqa){return this.loop=mqa,this.repetitions=nqa,this}setEffectiveWeight(oqa){return this.weight=oqa,this._effectiveWeight=this.enabled?oqa:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(pqa){return this._scheduleFading(pqa,0,1)}fadeOut(qqa){return this._scheduleFading(qqa,1,0)}crossFadeFrom(rqa,sqa,tqa){if(rqa.fadeOut(sqa),this.fadeIn(sqa),tqa){const uqa=this._clip.duration,vqa=rqa._clip.duration,wqa=vqa/uqa,xqa=uqa/vqa;rqa.warp(1,wqa,sqa),this.warp(xqa,1,sqa)}return this}crossFadeTo(yqa,zqa,Aqa){return yqa.crossFadeFrom(this,zqa,Aqa)}stopFading(){const Bqa=this._weightInterpolant;return null!==Bqa&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(Bqa)),this}setEffectiveTimeScale(Cqa){return this.timeScale=Cqa,this._effectiveTimeScale=this.paused?0:Cqa,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(Dqa){return this.timeScale=this._clip.duration/Dqa,this.stopWarping()}syncWith(Eqa){return this.time=Eqa.time,this.timeScale=Eqa.timeScale,this.stopWarping()}halt(Fqa){return this.warp(this._effectiveTimeScale,0,Fqa)}warp(Gqa,Hqa,Iqa){const Jqa=this._mixer,Kqa=Jqa.time,Lqa=this.timeScale;let Mqa=this._timeScaleInterpolant;null===Mqa&&(Mqa=Jqa._lendControlInterpolant(),this._timeScaleInterpolant=Mqa);const Nqa=Mqa.parameterPositions,Oqa=Mqa.sampleValues;return Nqa[0]=Kqa,Nqa[1]=Kqa+Iqa,Oqa[0]=Gqa/Lqa,Oqa[1]=Hqa/Lqa,this}stopWarping(){const Pqa=this._timeScaleInterpolant;return null!==Pqa&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(Pqa)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(Qqa,Rqa,Sqa,Tqa){if(!this.enabled){this._updateWeight(Qqa);return}const Uqa=this._startTime;if(null!==Uqa){const Vqa=(Qqa-Uqa)*Sqa;if(Vqa<0||0===Sqa)return;this._startTime=null,Rqa=Sqa*Vqa}Rqa*=this._updateTimeScale(Qqa);const Wqa=this._updateTime(Rqa),Xqa=this._updateWeight(Qqa);if(Xqa>0){const Yqa=this._interpolants,Zqa=this._propertyBindings;switch(this.blendMode){case 2501:for(let $qa=0,_qa=Yqa.length;$qa!==_qa;++$qa)Yqa[$qa].evaluate(Wqa),Zqa[$qa].accumulateAdditive(Xqa);break;case 2500:default:for(let ara=0,bra=Yqa.length;ara!==bra;++ara)Yqa[ara].evaluate(Wqa),Zqa[ara].accumulate(Tqa,Xqa)}}}_updateWeight(cra){let dra=0;if(this.enabled){dra=this.weight;const era=this._weightInterpolant;if(null!==era){const fra=era.evaluate(cra)[0];dra*=fra,cra>era.parameterPositions[1]&&(this.stopFading(),0===fra&&(this.enabled=!1))}}return this._effectiveWeight=dra,dra}_updateTimeScale(gra){let hra=0;if(!this.paused){hra=this.timeScale;const ira=this._timeScaleInterpolant;if(null!==ira){const jra=ira.evaluate(gra)[0];hra*=jra,gra>ira.parameterPositions[1]&&(this.stopWarping(),0===hra?this.paused=!0:this.timeScale=hra)}}return this._effectiveTimeScale=hra,hra}_updateTime(kra){const lra=this._clip.duration,mra=this.loop;let nra=this.time+kra,ora=this._loopCount;const pra=2202===mra;if(0===kra)return -1===ora?nra:pra&&(1&ora)==1?lra-nra:nra;if(2200===mra){-1===ora&&(this._loopCount=0,this._setEndings(!0,!0,!1));handle_stop:{if(nra>=lra)nra=lra;else if(nra<0)nra=0;else{this.time=nra;break handle_stop}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=nra,this._mixer.dispatchEvent({type:"finished",action:this,direction:kra<0?-1:1})}}else{if(-1===ora&&(kra>=0?(ora=0,this._setEndings(!0,0===this.repetitions,pra)):this._setEndings(0===this.repetitions,!0,pra)),nra>=lra||nra<0){const qra=Math.floor(nra/lra);nra-=lra*qra,ora+=Math.abs(qra);const rra=this.repetitions-ora;if(rra<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,nra=kra>0?lra:0,this.time=nra,this._mixer.dispatchEvent({type:"finished",action:this,direction:kra>0?1:-1});else{if(1===rra){const sra=kra<0;this._setEndings(sra,!sra,pra)}else this._setEndings(!1,!1,pra);this._loopCount=ora,this.time=nra,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:qra})}}else this.time=nra;if(pra&&(1&ora)==1)return lra-nra}return nra}_setEndings(tra,ura,vra){const wra=this._interpolantSettings;vra?(wra.endingStart=2401,wra.endingEnd=2401):(tra?wra.endingStart=this.zeroSlopeAtStart?2401:2400:wra.endingStart=2402,ura?wra.endingEnd=this.zeroSlopeAtEnd?2401:2400:wra.endingEnd=2402)}_scheduleFading(xra,yra,zra){const Ara=this._mixer,Bra=Ara.time;let Cra=this._weightInterpolant;null===Cra&&(Cra=Ara._lendControlInterpolant(),this._weightInterpolant=Cra);const Dra=Cra.parameterPositions,Era=Cra.sampleValues;return Dra[0]=Bra,Era[0]=yra,Dra[1]=Bra+xra,Era[1]=zra,this}}class Fra extends C{constructor(Gra){super(),this._root=Gra,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(Hra,Ira){const Jra=Hra._localRoot||this._root,Kra=Hra._clip.tracks,Lra=Kra.length,Mra=Hra._propertyBindings,Nra=Hra._interpolants,Ora=Jra.uuid,Pra=this._bindingsByRootAndName;let Qra=Pra[Ora];void 0===Qra&&(Qra={},Pra[Ora]=Qra);for(let Rra=0;Rra!==Lra;++Rra){const Sra=Kra[Rra],Tra=Sra.name;let Ura=Qra[Tra];if(void 0!==Ura)++Ura.referenceCount,Mra[Rra]=Ura;else{if(void 0!==(Ura=Mra[Rra])){null===Ura._cacheIndex&&(++Ura.referenceCount,this._addInactiveBinding(Ura,Ora,Tra));continue}const Vra=Ira&&Ira._propertyBindings[Rra].binding.parsedPath;Ura=new ala(Dma.create(Jra,Tra,Vra),Sra.ValueTypeName,Sra.getValueSize()),++Ura.referenceCount,this._addInactiveBinding(Ura,Ora,Tra),Mra[Rra]=Ura}Nra[Rra].resultBuffer=Ura.buffer}}_activateAction(Wra){if(!this._isActiveAction(Wra)){if(null===Wra._cacheIndex){const Xra=(Wra._localRoot||this._root).uuid,Yra=Wra._clip.uuid,Zra=this._actionsByClip[Yra];this._bindAction(Wra,Zra&&Zra.knownActions[0]),this._addInactiveAction(Wra,Yra,Xra)}const $ra=Wra._propertyBindings;for(let _ra=0,asa=$ra.length;_ra!==asa;++_ra){const bsa=$ra[_ra];0==bsa.useCount++&&(this._lendBinding(bsa),bsa.saveOriginalState())}this._lendAction(Wra)}}_deactivateAction(csa){if(this._isActiveAction(csa)){const dsa=csa._propertyBindings;for(let esa=0,fsa=dsa.length;esa!==fsa;++esa){const gsa=dsa[esa];0== --gsa.useCount&&(gsa.restoreOriginalState(),this._takeBackBinding(gsa))}this._takeBackAction(csa)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0,this.stats={actions:{get total(){return this._actions.length},get inUse(){return this._nActiveActions}},bindings:{get total(){return this._bindings.length},get inUse(){return this._nActiveBindings}},controlInterpolants:{get total(){return this._controlInterpolants.length},get inUse(){return this._nActiveControlInterpolants}}}}_isActiveAction(hsa){const isa=hsa._cacheIndex;return null!==isa&&isa<this._nActiveActions}_addInactiveAction(jsa,ksa,lsa){const msa=this._actions,nsa=this._actionsByClip;let osa=nsa[ksa];if(void 0===osa)osa={knownActions:[jsa],actionByRoot:{}},jsa._byClipCacheIndex=0,nsa[ksa]=osa;else{const psa=osa.knownActions;jsa._byClipCacheIndex=psa.length,psa.push(jsa)}jsa._cacheIndex=msa.length,msa.push(jsa),osa.actionByRoot[lsa]=jsa}_removeInactiveAction(qsa){const rsa=this._actions,ssa=rsa[rsa.length-1],tsa=qsa._cacheIndex;ssa._cacheIndex=tsa,rsa[tsa]=ssa,rsa.pop(),qsa._cacheIndex=null;const usa=qsa._clip.uuid,vsa=this._actionsByClip,wsa=vsa[usa],xsa=wsa.knownActions,ysa=xsa[xsa.length-1],zsa=qsa._byClipCacheIndex;ysa._byClipCacheIndex=zsa,xsa[zsa]=ysa,xsa.pop(),qsa._byClipCacheIndex=null;const Asa=wsa.actionByRoot,Bsa=(qsa._localRoot||this._root).uuid;delete Asa[Bsa],0===xsa.length&&delete vsa[usa],this._removeInactiveBindingsForAction(qsa)}_removeInactiveBindingsForAction(Csa){const Dsa=Csa._propertyBindings;for(let Esa=0,Fsa=Dsa.length;Esa!==Fsa;++Esa){const Gsa=Dsa[Esa];0== --Gsa.referenceCount&&this._removeInactiveBinding(Gsa)}}_lendAction(Hsa){const Isa=this._actions,Jsa=Hsa._cacheIndex,Ksa=this._nActiveActions++,Lsa=Isa[Ksa];Hsa._cacheIndex=Ksa,Isa[Ksa]=Hsa,Lsa._cacheIndex=Jsa,Isa[Jsa]=Lsa}_takeBackAction(Msa){const Nsa=this._actions,Osa=Msa._cacheIndex,Psa=--this._nActiveActions,Qsa=Nsa[Psa];Msa._cacheIndex=Psa,Nsa[Psa]=Msa,Qsa._cacheIndex=Osa,Nsa[Osa]=Qsa}_addInactiveBinding(Rsa,Ssa,Tsa){const Usa=this._bindingsByRootAndName,Vsa=this._bindings;let Wsa=Usa[Ssa];void 0===Wsa&&(Wsa={},Usa[Ssa]=Wsa),Wsa[Tsa]=Rsa,Rsa._cacheIndex=Vsa.length,Vsa.push(Rsa)}_removeInactiveBinding(Xsa){const Ysa=this._bindings,Zsa=Xsa.binding,$sa=Zsa.rootNode.uuid,_sa=Zsa.path,ata=this._bindingsByRootAndName,bta=ata[$sa],cta=Ysa[Ysa.length-1],dta=Xsa._cacheIndex;cta._cacheIndex=dta,Ysa[dta]=cta,Ysa.pop(),delete bta[_sa],0===Object.keys(bta).length&&delete ata[$sa]}_lendBinding(eta){const fta=this._bindings,gta=eta._cacheIndex,hta=this._nActiveBindings++,ita=fta[hta];eta._cacheIndex=hta,fta[hta]=eta,ita._cacheIndex=gta,fta[gta]=ita}_takeBackBinding(jta){const kta=this._bindings,lta=jta._cacheIndex,mta=--this._nActiveBindings,nta=kta[mta];jta._cacheIndex=mta,kta[mta]=jta,nta._cacheIndex=lta,kta[lta]=nta}_lendControlInterpolant(){const ota=this._controlInterpolants,pta=this._nActiveControlInterpolants++;let qta=ota[pta];return void 0===qta&&((qta=new Sca(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=pta,ota[pta]=qta),qta}_takeBackControlInterpolant(rta){const sta=this._controlInterpolants,tta=rta.__cacheIndex,uta=--this._nActiveControlInterpolants,vta=sta[uta];rta.__cacheIndex=uta,sta[uta]=rta,vta.__cacheIndex=tta,sta[tta]=vta}clipAction(wta,xta,yta){const zta=xta||this._root,Ata=zta.uuid;let Bta="string"==typeof wta?Vea.findByName(zta,wta):wta;const Cta=null!==Bta?Bta.uuid:wta,Dta=this._actionsByClip[Cta];let Eta=null;if(void 0===yta&&(yta=null!==Bta?Bta.blendMode:2500),void 0!==Dta){const Fta=Dta.actionByRoot[Ata];if(void 0!==Fta&&Fta.blendMode===yta)return Fta;Eta=Dta.knownActions[0],null===Bta&&(Bta=Eta._clip)}if(null===Bta)return null;const Gta=new aqa(this,Bta,xta,yta);return this._bindAction(Gta,Eta),this._addInactiveAction(Gta,Cta,Ata),Gta}existingAction(Hta,Ita){const Jta=Ita||this._root,Kta=Jta.uuid,Lta="string"==typeof Hta?Vea.findByName(Jta,Hta):Hta,Mta=Lta?Lta.uuid:Hta,Nta=this._actionsByClip[Mta];return void 0!==Nta?Nta.actionByRoot[Kta]||null:null}stopAllAction(){const Ota=this._actions,Pta=this._nActiveActions;for(let Qta=Pta-1;Qta>=0;--Qta)Ota[Qta].stop();return this}update(Rta){Rta*=this.timeScale;const Sta=this._actions,Tta=this._nActiveActions,Uta=this.time+=Rta,Vta=Math.sign(Rta),Wta=this._accuIndex^=1;for(let Xta=0;Xta!==Tta;++Xta){const Yta=Sta[Xta];Yta._update(Uta,Rta,Vta,Wta)}const Zta=this._bindings,$ta=this._nActiveBindings;for(let _ta=0;_ta!==$ta;++_ta)Zta[_ta].apply(Wta);return this}setTime(aua){this.time=0;for(let bua=0;bua<this._actions.length;bua++)this._actions[bua].time=0;return this.update(aua)}getRoot(){return this._root}uncacheClip(cua){const dua=this._actions,eua=cua.uuid,fua=this._actionsByClip,gua=fua[eua];if(void 0!==gua){const hua=gua.knownActions;for(let iua=0,jua=hua.length;iua!==jua;++iua){const kua=hua[iua];this._deactivateAction(kua);const lua=kua._cacheIndex,mua=dua[dua.length-1];kua._cacheIndex=null,kua._byClipCacheIndex=null,mua._cacheIndex=lua,dua[lua]=mua,dua.pop(),this._removeInactiveBindingsForAction(kua)}delete fua[eua]}}uncacheRoot(nua){const oua=nua.uuid,pua=this._actionsByClip;for(const qua in pua){const rua=pua[qua].actionByRoot,sua=rua[oua];void 0!==sua&&(this._deactivateAction(sua),this._removeInactiveAction(sua))}const tua=this._bindingsByRootAndName,uua=tua[oua];if(void 0!==uua)for(const vua in uua){const wua=uua[vua];wua.restoreOriginalState(),this._removeInactiveBinding(wua)}}uncacheAction(xua,yua){const zua=this.existingAction(xua,yua);null!==zua&&(this._deactivateAction(zua),this._removeInactiveAction(zua))}}Fra.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Aua{constructor(Bua){"string"==typeof Bua&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),Bua=arguments[1]),this.value=Bua}clone(){return new Aua(void 0===this.value.clone?this.value:this.value.clone())}}function Cua(a,b,c,d){if(a.layers.test(b.layers)&&a.raycast(b,c),!0===d){const e=a.children;for(let f=0,g=e.length;f<g;f++)Cua(e[f],b,c,!0)}}(class extends HS{constructor(Dua,Eua,Fua=1){super(Dua,Eua),this.meshPerAttribute=Fua}copy(Gua){return super.copy(Gua),this.meshPerAttribute=Gua.meshPerAttribute,this}clone(Hua){const Iua=super.clone(Hua);return Iua.meshPerAttribute=this.meshPerAttribute,Iua}toJSON(Jua){const Kua=super.toJSON(Jua);return Kua.isInstancedInterleavedBuffer=!0,Kua.meshPerAttribute=this.meshPerAttribute,Kua}}).prototype.isInstancedInterleavedBuffer=!0,(class{constructor(Lua,Mua,Nua,Oua,Pua){this.buffer=Lua,this.type=Mua,this.itemSize=Nua,this.elementSize=Oua,this.count=Pua,this.version=0}set needsUpdate(Qua){!0===Qua&&this.version++}setBuffer(Rua){return this.buffer=Rua,this}setType(Sua,Tua){return this.type=Sua,this.elementSize=Tua,this}setItemSize(Uua){return this.itemSize=Uua,this}setCount(Vua){return this.count=Vua,this}}).prototype.isGLBufferAttribute=!0;class Wua{constructor(Xua=1,Yua=0,Zua=0){return this.radius=Xua,this.phi=Yua,this.theta=Zua,this}set($ua,_ua,ava){return this.radius=$ua,this.phi=_ua,this.theta=ava,this}copy(bva){return this.radius=bva.radius,this.phi=bva.phi,this.theta=bva.theta,this}makeSafe(){return this.phi=Math.max(0.000001,Math.min(Math.PI-0.000001,this.phi)),this}setFromVector3(cva){return this.setFromCartesianCoords(cva.x,cva.y,cva.z)}setFromCartesianCoords(dva,eva,fva){return this.radius=Math.sqrt(dva*dva+eva*eva+fva*fva),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(dva,fva),this.phi=Math.acos($(eva/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const gva=new ea();class hva{constructor(iva=new ea(Infinity,Infinity),jva=new ea(-1/0,-1/0)){this.min=iva,this.max=jva}set(kva,lva){return this.min.copy(kva),this.max.copy(lva),this}setFromPoints(mva){this.makeEmpty();for(let nva=0,ova=mva.length;nva<ova;nva++)this.expandByPoint(mva[nva]);return this}setFromCenterAndSize(pva,qva){const rva=gva.copy(qva).multiplyScalar(0.5);return this.min.copy(pva).sub(rva),this.max.copy(pva).add(rva),this}clone(){return new this.constructor().copy(this)}copy(sva){return this.min.copy(sva.min),this.max.copy(sva.max),this}makeEmpty(){return this.min.x=this.min.y=Infinity,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(tva){return this.isEmpty()?tva.set(0,0):tva.addVectors(this.min,this.max).multiplyScalar(0.5)}getSize(uva){return this.isEmpty()?uva.set(0,0):uva.subVectors(this.max,this.min)}expandByPoint(vva){return this.min.min(vva),this.max.max(vva),this}expandByVector(wva){return this.min.sub(wva),this.max.add(wva),this}expandByScalar(xva){return this.min.addScalar(-xva),this.max.addScalar(xva),this}containsPoint(yva){return!(yva.x<this.min.x)&&!(yva.x>this.max.x)&&!(yva.y<this.min.y)&&!(yva.y>this.max.y)}containsBox(zva){return this.min.x<=zva.min.x&&zva.max.x<=this.max.x&&this.min.y<=zva.min.y&&zva.max.y<=this.max.y}getParameter(Ava,Bva){return Bva.set((Ava.x-this.min.x)/(this.max.x-this.min.x),(Ava.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(Cva){return!(Cva.max.x<this.min.x)&&!(Cva.min.x>this.max.x)&&!(Cva.max.y<this.min.y)&&!(Cva.min.y>this.max.y)}clampPoint(Dva,Eva){return Eva.copy(Dva).clamp(this.min,this.max)}distanceToPoint(Fva){const Gva=gva.copy(Fva).clamp(this.min,this.max);return Gva.sub(Fva).length()}intersect(Hva){return this.min.max(Hva.min),this.max.min(Hva.max),this}union(Iva){return this.min.min(Iva.min),this.max.max(Iva.max),this}translate(Jva){return this.min.add(Jva),this.max.add(Jva),this}equals(Kva){return Kva.min.equals(this.min)&&Kva.max.equals(this.max)}}hva.prototype.isBox2=!0;const Lva=new qk(),Mva=new qk(),Nva=new qk(),Ova=new qk(),Pva=new Kq(),Qva=new Kq();function Rva(a){const b=[];a&&a.isBone&&b.push(a);for(let c=0;c<a.children.length;c++)b.push.apply(b,Rva(a.children[c]));return b}new qk(),new Gd(),new Gd();const Sva=new qk(),Tva=new qk(),Uva=new qk();class Vva extends Vw{constructor(Wva,Xva,Yva){super(),this.light=Wva,this.light.updateMatrixWorld(),this.matrix=Wva.matrixWorld,this.matrixAutoUpdate=!1,this.color=Yva,void 0===Xva&&(Xva=1);let Zva=new PC();Zva.setAttribute("position",new EC([-Xva,Xva,0,Xva,Xva,0,Xva,-Xva,0,-Xva,-Xva,0,-Xva,Xva,0],3));const $va=new CW({fog:!1,toneMapped:!1});this.lightPlane=new KW(Zva,$va),this.add(this.lightPlane),(Zva=new PC()).setAttribute("position",new EC([0,0,0,0,0,1],3)),this.targetLine=new KW(Zva,$va),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){Sva.setFromMatrixPosition(this.light.matrixWorld),Tva.setFromMatrixPosition(this.light.target.matrixWorld),Uva.subVectors(Tva,Sva),this.lightPlane.lookAt(Tva),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Tva),this.targetLine.scale.z=Uva.length()}}const _va=new qk(),awa=new iI();class bwa extends FX{constructor(cwa){const dwa=new PC(),ewa=new CW({color:16777215,vertexColors:!0,toneMapped:!1}),fwa=[],gwa=[],hwa={},iwa=new Gd(16755200),jwa=new Gd(16711680),kwa=new Gd(43775),lwa=new Gd(16777215),mwa=new Gd(3355443);function nwa(a,b,c){owa(a,c),owa(b,c)}function owa(a,b){fwa.push(0,0,0),gwa.push(b.r,b.g,b.b),void 0===hwa[a]&&(hwa[a]=[]),hwa[a].push(fwa.length/3-1)}nwa("n1","n2",iwa),nwa("n2","n4",iwa),nwa("n4","n3",iwa),nwa("n3","n1",iwa),nwa("f1","f2",iwa),nwa("f2","f4",iwa),nwa("f4","f3",iwa),nwa("f3","f1",iwa),nwa("n1","f1",iwa),nwa("n2","f2",iwa),nwa("n3","f3",iwa),nwa("n4","f4",iwa),nwa("p","n1",jwa),nwa("p","n2",jwa),nwa("p","n3",jwa),nwa("p","n4",jwa),nwa("u1","u2",kwa),nwa("u2","u3",kwa),nwa("u3","u1",kwa),nwa("c","t",lwa),nwa("p","c",mwa),nwa("cn1","cn2",mwa),nwa("cn3","cn4",mwa),nwa("cf1","cf2",mwa),nwa("cf3","cf4",mwa),dwa.setAttribute("position",new EC(fwa,3)),dwa.setAttribute("color",new EC(gwa,3)),super(dwa,ewa),this.type="CameraHelper",this.camera=cwa,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=cwa.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=hwa,this.update()}update(){const pwa=this.geometry,qwa=this.pointMap;awa.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),rwa("c",qwa,pwa,awa,0,0,-1),rwa("t",qwa,pwa,awa,0,0,1),rwa("n1",qwa,pwa,awa,-1,-1,-1),rwa("n2",qwa,pwa,awa,1,-1,-1),rwa("n3",qwa,pwa,awa,-1,1,-1),rwa("n4",qwa,pwa,awa,1,1,-1),rwa("f1",qwa,pwa,awa,-1,-1,1),rwa("f2",qwa,pwa,awa,1,-1,1),rwa("f3",qwa,pwa,awa,-1,1,1),rwa("f4",qwa,pwa,awa,1,1,1),rwa("u1",qwa,pwa,awa,0.7,1.1,-1),rwa("u2",qwa,pwa,awa,-0.7,1.1,-1),rwa("u3",qwa,pwa,awa,0,2,-1),rwa("cf1",qwa,pwa,awa,-1,0,1),rwa("cf2",qwa,pwa,awa,1,0,1),rwa("cf3",qwa,pwa,awa,0,-1,1),rwa("cf4",qwa,pwa,awa,0,1,1),rwa("cn1",qwa,pwa,awa,-1,0,-1),rwa("cn2",qwa,pwa,awa,1,0,-1),rwa("cn3",qwa,pwa,awa,0,-1,-1),rwa("cn4",qwa,pwa,awa,0,1,-1),pwa.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function rwa(a,b,c,d,e,f,g){_va.set(e,f,g).unproject(d);const h=b[a];if(void 0!==h){const i=c.getAttribute("position");for(let j=0,k=h.length;j<k;j++)i.setXYZ(h[j],_va.x,_va.y,_va.z)}}new Wm(),new qk();class swa extends FX{constructor(twa=1){const uwa=new PC();uwa.setAttribute("position",new EC([0,0,0,twa,0,0,0,0,0,0,twa,0,0,0,0,0,0,twa],3)),uwa.setAttribute("color",new EC([1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1],3));const vwa=new CW({vertexColors:!0,toneMapped:!1});super(uwa,vwa),this.type="AxesHelper"}setColors(wwa,xwa,ywa){const zwa=new Gd(),Awa=this.geometry.attributes.color.array;return zwa.set(wwa),zwa.toArray(Awa,0),zwa.toArray(Awa,3),zwa.set(xwa),zwa.toArray(Awa,6),zwa.toArray(Awa,9),zwa.set(ywa),zwa.toArray(Awa,12),zwa.toArray(Awa,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}const Bwa=new Float32Array(1);new Int32Array(Bwa.buffer),y$.create=function(a,b){return console.log("THREE.Curve.create() has been deprecated"),a.prototype=Object.create(y$.prototype),a.prototype.constructor=a,a.prototype.getPoint=b,a},K3.prototype.fromPoints=function(a){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(a)},(class extends FX{constructor(Cwa=10,Dwa=10,Ewa=4473924,Fwa=8947848){Ewa=new Gd(Ewa),Fwa=new Gd(Fwa);const Gwa=Dwa/2,Hwa=Cwa/Dwa,Iwa=Cwa/2,Jwa=[],Kwa=[];for(let Lwa=0,Mwa=0,Nwa=-Iwa;Lwa<=Dwa;Lwa++,Nwa+=Hwa){Jwa.push(-Iwa,0,Nwa,Iwa,0,Nwa),Jwa.push(Nwa,0,-Iwa,Nwa,0,Iwa);const Owa=Lwa===Gwa?Ewa:Fwa;Owa.toArray(Kwa,Mwa),Mwa+=3,Owa.toArray(Kwa,Mwa),Mwa+=3,Owa.toArray(Kwa,Mwa),Mwa+=3,Owa.toArray(Kwa,Mwa),Mwa+=3}const Pwa=new PC();Pwa.setAttribute("position",new EC(Jwa,3)),Pwa.setAttribute("color",new EC(Kwa,3));const Qwa=new CW({vertexColors:!0,toneMapped:!1});super(Pwa,Qwa),this.type="GridHelper"}}).prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},(class extends FX{constructor(Rwa){const Swa=Rva(Rwa),Twa=new PC(),Uwa=[],Vwa=[],Wwa=new Gd(0,0,1),Xwa=new Gd(0,1,0);for(let Ywa=0;Ywa<Swa.length;Ywa++){const Zwa=Swa[Ywa];Zwa.parent&&Zwa.parent.isBone&&(Uwa.push(0,0,0),Uwa.push(0,0,0),Vwa.push(Wwa.r,Wwa.g,Wwa.b),Vwa.push(Xwa.r,Xwa.g,Xwa.b))}Twa.setAttribute("position",new EC(Uwa,3)),Twa.setAttribute("color",new EC(Vwa,3));const $wa=new CW({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(Twa,$wa),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=Rwa,this.bones=Swa,this.matrix=Rwa.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(_wa){const axa=this.bones,bxa=this.geometry,cxa=bxa.getAttribute("position");Qva.copy(this.root.matrixWorld).invert();for(let dxa=0,exa=0;dxa<axa.length;dxa++){const fxa=axa[dxa];fxa.parent&&fxa.parent.isBone&&(Pva.multiplyMatrices(Qva,fxa.matrixWorld),Ova.setFromMatrixPosition(Pva),cxa.setXYZ(exa,Ova.x,Ova.y,Ova.z),Pva.multiplyMatrices(Qva,fxa.parent.matrixWorld),Ova.setFromMatrixPosition(Pva),cxa.setXYZ(exa+1,Ova.x,Ova.y,Ova.z),exa+=2)}bxa.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(_wa)}}).prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Ega.prototype.extractUrlBase=function(a){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),hka.extractUrlBase(a)},Ega.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},hva.prototype.center=function(a){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(a)},hva.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},hva.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},hva.prototype.size=function(a){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(a)},Wm.prototype.center=function(a){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(a)},Wm.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Wm.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},Wm.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)},Wm.prototype.size=function(a){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(a)},Ho.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},FK.prototype.setFromMatrix=function(a){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(a)},(class{constructor(gxa=new qk(),hxa=new qk()){this.start=gxa,this.end=hxa}set(ixa,jxa){return this.start.copy(ixa),this.end.copy(jxa),this}copy(kxa){return this.start.copy(kxa.start),this.end.copy(kxa.end),this}getCenter(lxa){return lxa.addVectors(this.start,this.end).multiplyScalar(0.5)}delta(mxa){return mxa.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(nxa,oxa){return this.delta(oxa).multiplyScalar(nxa).add(this.start)}closestPointToPointParameter(pxa,qxa){Lva.subVectors(pxa,this.start),Mva.subVectors(this.end,this.start);const rxa=Mva.dot(Mva),sxa=Mva.dot(Lva);let txa=sxa/rxa;return qxa&&(txa=$(txa,0,1)),txa}closestPointToPoint(uxa,vxa,wxa){const xxa=this.closestPointToPointParameter(uxa,vxa);return this.delta(wxa).multiplyScalar(xxa).add(this.start)}applyMatrix4(yxa){return this.start.applyMatrix4(yxa),this.end.applyMatrix4(yxa),this}equals(zxa){return zxa.start.equals(this.start)&&zxa.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}).prototype.center=function(a){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(a)},vb.prototype.flattenToArrayOffset=function(a,b){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,b)},vb.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},vb.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},vb.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},vb.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},vb.prototype.getInverse=function(a){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()},Kq.prototype.extractPosition=function(a){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(a)},Kq.prototype.flattenToArrayOffset=function(a,b){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,b)},Kq.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new qk().setFromMatrixColumn(this,3)},Kq.prototype.setRotationFromQuaternion=function(a){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(a)},Kq.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Kq.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},Kq.prototype.multiplyVector4=function(a){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},Kq.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Kq.prototype.rotateAxis=function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),a.transformDirection(this)},Kq.prototype.crossVector=function(a){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},Kq.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Kq.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Kq.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Kq.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Kq.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Kq.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},Kq.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Kq.prototype.makeFrustum=function(a,b,c,d,e,f){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(a,b,d,c,e,f)},Kq.prototype.getInverse=function(a){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()},SJ.prototype.isIntersectionLine=function(a){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(a)},Lh.prototype.multiplyVector3=function(a){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),a.applyQuaternion(this)},Lh.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},qp.prototype.isIntersectionBox=function(a){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},qp.prototype.isIntersectionPlane=function(a){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(a)},qp.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)},Yy.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},Yy.prototype.barycoordFromPoint=function(a,b){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(a,b)},Yy.prototype.midpoint=function(a){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(a)},Yy.prototypenormal=function(a){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(a)},Yy.prototype.plane=function(a){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(a)},Yy.barycoordFromPoint=function(a,b,c,d,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Yy.getBarycoord(a,b,c,d,e)},Yy.normal=function(a,b,c,d){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Yy.getNormal(a,b,c,d)},T4.prototype.extractAllPoints=function(a){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(a)},T4.prototype.extrude=function(a){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new g6(this,a)},T4.prototype.makeGeometry=function(a){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new T7(this,a)},ea.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},ea.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)},ea.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},qk.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},qk.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},qk.prototype.getPositionFromMatrix=function(a){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(a)},qk.prototype.getScaleFromMatrix=function(a){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(a)},qk.prototype.getColumnFromMatrix=function(a,b){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(b,a)},qk.prototype.applyProjection=function(a){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(a)},qk.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},qk.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)},qk.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Df.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},Df.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Vw.prototype.getChildByName=function(a){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(a)},Vw.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},Vw.prototype.translate=function(a,b){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(b,a)},Vw.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},Vw.prototype.applyMatrix=function(a){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)},Object.defineProperties(Vw.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),yG.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(yG.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),BU.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},qI.prototype.setLens=function(a,b){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==b&&(this.filmGauge=b),this.setFocalLength(a)},Object.defineProperties(_ha.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=a}}}),Object.defineProperties(WA.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),35048===this.usage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(35048)}}}),WA.prototype.setDynamic=function(a){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===a?35048:35044),this},WA.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},WA.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},PC.prototype.addIndex=function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(a)},PC.prototype.addAttribute=function(a,b){return(console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),b&&b.isBufferAttribute||b&&b.isInterleavedBufferAttribute)?"index"===a?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(b),this):this.setAttribute(a,b):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(a,new WA(arguments[1],arguments[2])))},PC.prototype.addDrawCall=function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(a,b)},PC.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},PC.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},PC.prototype.removeAttribute=function(a){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(a)},PC.prototype.applyMatrix=function(a){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)},Object.defineProperties(PC.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),HS.prototype.setDynamic=function(a){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===a?35048:35044),this},HS.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},g6.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},g6.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},g6.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},CS.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},Aua.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(zA.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Gd()}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===a}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(a){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=a}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties($H.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=a}}}),tS.prototype.clearTarget=function(a,b,c,d){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(a),this.clear(b,c,d)},tS.prototype.animate=function(a){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(a)},tS.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},tS.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},tS.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},tS.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},tS.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},tS.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},tS.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},tS.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},tS.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},tS.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},tS.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},tS.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},tS.prototype.enableScissorTest=function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(a)},tS.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},tS.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},tS.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},tS.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},tS.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},tS.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},tS.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},tS.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},tS.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},tS.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(tS.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=a}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(a){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===a?3001:3000}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}}),Object.defineProperties($Q.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(kh.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=a}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=a}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=a}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=a}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=a}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=a}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=a}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=a}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=a}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=a}}}),(class extends Vw{constructor(Axa){super(),this.type="Audio",this.listener=Axa,this.context=Axa.context,this.gain=this.context.createGain(),this.gain.connect(Axa.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(Bxa){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=Bxa,this.connect(),this}setMediaElementSource(Cxa){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(Cxa),this.connect(),this}setMediaStreamSource(Dxa){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(Dxa),this.connect(),this}setBuffer(Exa){return this.buffer=Exa,this.sourceType="buffer",this.autoplay&&this.play(),this}play(Fxa=0){if(!0===this.isPlaying){console.warn("THREE.Audio: Audio is already playing.");return}if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+Fxa;const Gxa=this.context.createBufferSource();return Gxa.buffer=this.buffer,Gxa.loop=this.loop,Gxa.loopStart=this.loopStart,Gxa.loopEnd=this.loopEnd,Gxa.onended=this.onEnded.bind(this),Gxa.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=Gxa,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let Hxa=1,Ixa=this.filters.length;Hxa<Ixa;Hxa++)this.filters[Hxa-1].connect(this.filters[Hxa]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let Jxa=1,Kxa=this.filters.length;Jxa<Kxa;Jxa++)this.filters[Jxa-1].disconnect(this.filters[Jxa]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(Lxa){return Lxa||(Lxa=[]),!0===this._connected?(this.disconnect(),this.filters=Lxa.slice(),this.connect()):this.filters=Lxa.slice(),this}setDetune(Mxa){if(this.detune=Mxa,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(Nxa){return this.setFilters(Nxa?[Nxa]:[])}setPlaybackRate(Oxa){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=Oxa,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,0.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(Pxa){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=Pxa,!0===this.isPlaying&&(this.source.loop=this.loop),this}setLoopStart(Qxa){return this.loopStart=Qxa,this}setLoopEnd(Rxa){return this.loopEnd=Rxa,this}getVolume(){return this.gain.gain.value}setVolume(Sxa){return this.gain.gain.setTargetAtTime(Sxa,this.context.currentTime,0.01),this}}).prototype.load=function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const b=this,c=new Eka();return c.load(a,function(a){b.setBuffer(a)}),this},(class{constructor(Txa,Uxa=2048){this.analyser=Txa.context.createAnalyser(),this.analyser.fftSize=Uxa,this.data=new Uint8Array(this.analyser.frequencyBinCount),Txa.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let Vxa=0;const Wxa=this.getFrequencyData();for(let Xxa=0;Xxa<Wxa.length;Xxa++)Vxa+=Wxa[Xxa];return Vxa/Wxa.length}}).prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},RI.prototype.updateCubeMap=function(a,b){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(a,b)},RI.prototype.clear=function(a,b,c,d){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(a,b,c,d)},Ve.crossOrigin=void 0,Ve.loadTexture=function(a,b,c,d){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const e=new Tha();e.setCrossOrigin(this.crossOrigin);const f=e.load(a,c,void 0,d);return b&&(f.mapping=b),f},Ve.loadTextureCube=function(a,b,c,d){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const e=new zha();e.setCrossOrigin(this.crossOrigin);const f=e.load(a,c,void 0,d);return b&&(f.mapping=b),f},Ve.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Ve.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"137"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="137")}}])