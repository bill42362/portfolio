"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[737],{9477:function(a,b,c){c.d(b,{y8_:function(){return ava},Ox3:function(){return eia},cBI:function(){return Wua},pBf:function(){return h},RsA:function(){return d},cPb:function(){return XH},"_fP":function(){return qh},xsS:function(){return gS},"$V":function(){return Xta},QmN:function(){return e},FM8:function(){return L},Pa4:function(){return Xj},CP7:function(){return $R}});const d={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},e={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},f=1,g="300 es";class h{addEventListener(i,j){void 0===this._listeners&&(this._listeners={});const k=this._listeners;void 0===k[i]&&(k[i]=[]),-1===k[i].indexOf(j)&&k[i].push(j)}hasEventListener(l,m){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[l]&& -1!==n[l].indexOf(m)}removeEventListener(o,p){if(void 0===this._listeners)return;const q=this._listeners,r=q[o];if(void 0!==r){const s=r.indexOf(p);-1!==s&&r.splice(s,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const u=this._listeners,v=u[t.type];if(void 0!==v){t.target=this;const w=v.slice(0);for(let x=0,y=w.length;x<y;x++)w[x].call(this,t);t.target=null}}}const z=[];for(let A=0;A<256;A++)z[A]=(A<16?"0":"")+A.toString(16);let B=1234567;const C=Math.PI/180,D=180/Math.PI;function E(){const a=4294967295*Math.random()|0,b=4294967295*Math.random()|0,c=4294967295*Math.random()|0,d=4294967295*Math.random()|0,e=z[255&a]+z[a>>8&255]+z[a>>16&255]+z[a>>24&255]+"-"+z[255&b]+z[b>>8&255]+"-"+z[b>>16&15|64]+z[b>>24&255]+"-"+z[63&c|128]+z[c>>8&255]+"-"+z[c>>16&255]+z[c>>24&255]+z[255&d]+z[d>>8&255]+z[d>>16&255]+z[d>>24&255];return e.toUpperCase()}function F(a,b,c){return Math.max(b,Math.min(c,a))}function G(a,b){return(a%b+b)%b}function H(a,b,c){return(1-c)*a+c*b}function I(a){return(a&a-1)==0&&0!==a}function J(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))}function K(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}Object.freeze({__proto__:null,DEG2RAD:C,RAD2DEG:D,generateUUID:E,clamp:F,euclideanModulo:G,mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},inverseLerp:function(a,b,c){return a!==b?(c-a)/(b-a):0},lerp:H,damp:function(a,b,c,d){return H(a,b,1-Math.exp(-c*d))},pingpong:function(a,b=1){return b-Math.abs(G(a,2*b)-b)},smoothstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b))*a*(3-2*a)},smootherstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b))*a*a*(a*(6*a-15)+10)},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},seededRandom:function(a){return void 0!==a&&(B=a%2147483647),((B=16807*B%2147483647)-1)/2147483646},degToRad:function(a){return a*C},radToDeg:function(a){return a*D},isPowerOfTwo:I,ceilPowerOfTwo:J,floorPowerOfTwo:K,setQuaternionFromProperEuler:function(a,b,c,d,e){const f=Math.cos,g=Math.sin,h=f(c/2),i=g(c/2),j=f((b+d)/2),k=g((b+d)/2),l=f((b-d)/2),m=g((b-d)/2),n=f((d-b)/2),o=g((d-b)/2);switch(e){case"XYX":a.set(h*k,i*l,i*m,h*j);break;case"YZY":a.set(i*m,h*k,i*l,h*j);break;case"ZXZ":a.set(i*l,i*m,h*k,h*j);break;case"XZX":a.set(h*k,i*o,i*n,h*j);break;case"YXY":a.set(i*n,h*k,i*o,h*j);break;case"ZYZ":a.set(i*o,i*n,h*k,h*j);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+e)}}});class L{constructor(M=0,N=0){this.x=M,this.y=N}get width(){return this.x}set width(O){this.x=O}get height(){return this.y}set height(P){this.y=P}set(Q,R){return this.x=Q,this.y=R,this}setScalar(S){return this.x=S,this.y=S,this}setX(T){return this.x=T,this}setY(U){return this.y=U,this}setComponent(V,W){switch(V){case 0:this.x=W;break;case 1:this.y=W;break;default:throw new Error("index is out of range: "+V)}return this}getComponent(X){switch(X){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+X)}}clone(){return new this.constructor(this.x,this.y)}copy(Y){return this.x=Y.x,this.y=Y.y,this}add(Z,$){return void 0!==$?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(Z,$)):(this.x+=Z.x,this.y+=Z.y,this)}addScalar(_){return this.x+=_,this.y+=_,this}addVectors(aa,ba){return this.x=aa.x+ba.x,this.y=aa.y+ba.y,this}addScaledVector(ca,da){return this.x+=ca.x*da,this.y+=ca.y*da,this}sub(ea,fa){return void 0!==fa?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(ea,fa)):(this.x-=ea.x,this.y-=ea.y,this)}subScalar(ga){return this.x-=ga,this.y-=ga,this}subVectors(ha,ia){return this.x=ha.x-ia.x,this.y=ha.y-ia.y,this}multiply(ja){return this.x*=ja.x,this.y*=ja.y,this}multiplyScalar(ka){return this.x*=ka,this.y*=ka,this}divide(la){return this.x/=la.x,this.y/=la.y,this}divideScalar(ma){return this.multiplyScalar(1/ma)}applyMatrix3(na){const oa=this.x,pa=this.y,qa=na.elements;return this.x=qa[0]*oa+qa[3]*pa+qa[6],this.y=qa[1]*oa+qa[4]*pa+qa[7],this}min(ra){return this.x=Math.min(this.x,ra.x),this.y=Math.min(this.y,ra.y),this}max(sa){return this.x=Math.max(this.x,sa.x),this.y=Math.max(this.y,sa.y),this}clamp(ta,ua){return this.x=Math.max(ta.x,Math.min(ua.x,this.x)),this.y=Math.max(ta.y,Math.min(ua.y,this.y)),this}clampScalar(va,wa){return this.x=Math.max(va,Math.min(wa,this.x)),this.y=Math.max(va,Math.min(wa,this.y)),this}clampLength(xa,ya){const za=this.length();return this.divideScalar(za||1).multiplyScalar(Math.max(xa,Math.min(ya,za)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(Aa){return this.x*Aa.x+this.y*Aa.y}cross(Ba){return this.x*Ba.y-this.y*Ba.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const Ca=Math.atan2(-this.y,-this.x)+Math.PI;return Ca}distanceTo(Da){return Math.sqrt(this.distanceToSquared(Da))}distanceToSquared(Ea){const Fa=this.x-Ea.x,Ga=this.y-Ea.y;return Fa*Fa+Ga*Ga}manhattanDistanceTo(Ha){return Math.abs(this.x-Ha.x)+Math.abs(this.y-Ha.y)}setLength(Ia){return this.normalize().multiplyScalar(Ia)}lerp(Ja,Ka){return this.x+=(Ja.x-this.x)*Ka,this.y+=(Ja.y-this.y)*Ka,this}lerpVectors(La,Ma,Na){return this.x=La.x+(Ma.x-La.x)*Na,this.y=La.y+(Ma.y-La.y)*Na,this}equals(Oa){return Oa.x===this.x&&Oa.y===this.y}fromArray(Pa,Qa=0){return this.x=Pa[Qa],this.y=Pa[Qa+1],this}toArray(Ra=[],Sa=0){return Ra[Sa]=this.x,Ra[Sa+1]=this.y,Ra}fromBufferAttribute(Ta,Ua,Va){return void 0!==Va&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=Ta.getX(Ua),this.y=Ta.getY(Ua),this}rotateAround(Wa,Xa){const Ya=Math.cos(Xa),Za=Math.sin(Xa),$a=this.x-Wa.x,_a=this.y-Wa.y;return this.x=$a*Ya-_a*Za+Wa.x,this.y=$a*Za+_a*Ya+Wa.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}L.prototype.isVector2=!0;class ab{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(bb,cb,db,eb,fb,gb,hb,ib,jb){const kb=this.elements;return kb[0]=bb,kb[1]=eb,kb[2]=hb,kb[3]=cb,kb[4]=fb,kb[5]=ib,kb[6]=db,kb[7]=gb,kb[8]=jb,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(lb){const mb=this.elements,nb=lb.elements;return mb[0]=nb[0],mb[1]=nb[1],mb[2]=nb[2],mb[3]=nb[3],mb[4]=nb[4],mb[5]=nb[5],mb[6]=nb[6],mb[7]=nb[7],mb[8]=nb[8],this}extractBasis(ob,pb,qb){return ob.setFromMatrix3Column(this,0),pb.setFromMatrix3Column(this,1),qb.setFromMatrix3Column(this,2),this}setFromMatrix4(rb){const sb=rb.elements;return this.set(sb[0],sb[4],sb[8],sb[1],sb[5],sb[9],sb[2],sb[6],sb[10]),this}multiply(tb){return this.multiplyMatrices(this,tb)}premultiply(ub){return this.multiplyMatrices(ub,this)}multiplyMatrices(vb,wb){const xb=vb.elements,yb=wb.elements,zb=this.elements,Ab=xb[0],Bb=xb[3],Cb=xb[6],Db=xb[1],Eb=xb[4],Fb=xb[7],Gb=xb[2],Hb=xb[5],Ib=xb[8],Jb=yb[0],Kb=yb[3],Lb=yb[6],Mb=yb[1],Nb=yb[4],Ob=yb[7],Pb=yb[2],Qb=yb[5],Rb=yb[8];return zb[0]=Ab*Jb+Bb*Mb+Cb*Pb,zb[3]=Ab*Kb+Bb*Nb+Cb*Qb,zb[6]=Ab*Lb+Bb*Ob+Cb*Rb,zb[1]=Db*Jb+Eb*Mb+Fb*Pb,zb[4]=Db*Kb+Eb*Nb+Fb*Qb,zb[7]=Db*Lb+Eb*Ob+Fb*Rb,zb[2]=Gb*Jb+Hb*Mb+Ib*Pb,zb[5]=Gb*Kb+Hb*Nb+Ib*Qb,zb[8]=Gb*Lb+Hb*Ob+Ib*Rb,this}multiplyScalar(Sb){const Tb=this.elements;return Tb[0]*=Sb,Tb[3]*=Sb,Tb[6]*=Sb,Tb[1]*=Sb,Tb[4]*=Sb,Tb[7]*=Sb,Tb[2]*=Sb,Tb[5]*=Sb,Tb[8]*=Sb,this}determinant(){const Ub=this.elements,Vb=Ub[0],Wb=Ub[1],Xb=Ub[2],Yb=Ub[3],Zb=Ub[4],$b=Ub[5],_b=Ub[6],ac=Ub[7],bc=Ub[8];return Vb*Zb*bc-Vb*$b*ac-Wb*Yb*bc+Wb*$b*_b+Xb*Yb*ac-Xb*Zb*_b}invert(){const cc=this.elements,dc=cc[0],ec=cc[1],fc=cc[2],gc=cc[3],hc=cc[4],ic=cc[5],jc=cc[6],kc=cc[7],lc=cc[8],mc=lc*hc-ic*kc,nc=ic*jc-lc*gc,oc=kc*gc-hc*jc,pc=dc*mc+ec*nc+fc*oc;if(0===pc)return this.set(0,0,0,0,0,0,0,0,0);const qc=1/pc;return cc[0]=mc*qc,cc[1]=(fc*kc-lc*ec)*qc,cc[2]=(ic*ec-fc*hc)*qc,cc[3]=nc*qc,cc[4]=(lc*dc-fc*jc)*qc,cc[5]=(fc*gc-ic*dc)*qc,cc[6]=oc*qc,cc[7]=(ec*jc-kc*dc)*qc,cc[8]=(hc*dc-ec*gc)*qc,this}transpose(){let rc;const sc=this.elements;return rc=sc[1],sc[1]=sc[3],sc[3]=rc,rc=sc[2],sc[2]=sc[6],sc[6]=rc,rc=sc[5],sc[5]=sc[7],sc[7]=rc,this}getNormalMatrix(tc){return this.setFromMatrix4(tc).invert().transpose()}transposeIntoArray(uc){const vc=this.elements;return uc[0]=vc[0],uc[1]=vc[3],uc[2]=vc[6],uc[3]=vc[1],uc[4]=vc[4],uc[5]=vc[7],uc[6]=vc[2],uc[7]=vc[5],uc[8]=vc[8],this}setUvTransform(wc,xc,yc,zc,Ac,Bc,Cc){const Dc=Math.cos(Ac),Ec=Math.sin(Ac);return this.set(yc*Dc,yc*Ec,-yc*(Dc*Bc+Ec*Cc)+Bc+wc,-zc*Ec,zc*Dc,-zc*(-Ec*Bc+Dc*Cc)+Cc+xc,0,0,1),this}scale(Fc,Gc){const Hc=this.elements;return Hc[0]*=Fc,Hc[3]*=Fc,Hc[6]*=Fc,Hc[1]*=Gc,Hc[4]*=Gc,Hc[7]*=Gc,this}rotate(Ic){const Jc=Math.cos(Ic),Kc=Math.sin(Ic),Lc=this.elements,Mc=Lc[0],Nc=Lc[3],Oc=Lc[6],Pc=Lc[1],Qc=Lc[4],Rc=Lc[7];return Lc[0]=Jc*Mc+Kc*Pc,Lc[3]=Jc*Nc+Kc*Qc,Lc[6]=Jc*Oc+Kc*Rc,Lc[1]=-Kc*Mc+Jc*Pc,Lc[4]=-Kc*Nc+Jc*Qc,Lc[7]=-Kc*Oc+Jc*Rc,this}translate(Sc,Tc){const Uc=this.elements;return Uc[0]+=Sc*Uc[2],Uc[3]+=Sc*Uc[5],Uc[6]+=Sc*Uc[8],Uc[1]+=Tc*Uc[2],Uc[4]+=Tc*Uc[5],Uc[7]+=Tc*Uc[8],this}equals(Vc){const Wc=this.elements,Xc=Vc.elements;for(let Yc=0;Yc<9;Yc++)if(Wc[Yc]!==Xc[Yc])return!1;return!0}fromArray(Zc,$c=0){for(let _c=0;_c<9;_c++)this.elements[_c]=Zc[_c+$c];return this}toArray(ad=[],bd=0){const cd=this.elements;return ad[bd]=cd[0],ad[bd+1]=cd[1],ad[bd+2]=cd[2],ad[bd+3]=cd[3],ad[bd+4]=cd[4],ad[bd+5]=cd[5],ad[bd+6]=cd[6],ad[bd+7]=cd[7],ad[bd+8]=cd[8],ad}clone(){return new this.constructor().fromArray(this.elements)}}function dd(a){for(let b=a.length-1;b>=0;--b)if(a[b]>65535)return!0;return!1}function ed(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}ab.prototype.isMatrix3=!0;const fd={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},gd={h:0,s:0,l:0},hd={h:0,s:0,l:0};function id(a,b,c){return(c<0&&(c+=1),c>1&&(c-=1),c<1/6)?a+(b-a)*6*c:c<0.5?b:c<2/3?a+(b-a)*6*(2/3-c):a}function jd(a){return a<0.04045?0.0773993808*a:Math.pow(0.9478672986*a+0.0521327014,2.4)}function kd(a){return a<0.0031308?12.92*a:1.055*Math.pow(a,0.41666)-0.055}class ld{constructor(md,nd,od){if(void 0===nd&& void 0===od)return this.set(md);return this.setRGB(md,nd,od)}set(pd){return pd&&pd.isColor?this.copy(pd):"number"==typeof pd?this.setHex(pd):"string"==typeof pd&&this.setStyle(pd),this}setScalar(qd){return this.r=qd,this.g=qd,this.b=qd,this}setHex(rd){return rd=Math.floor(rd),this.r=(rd>>16&255)/255,this.g=(rd>>8&255)/255,this.b=(255&rd)/255,this}setRGB(sd,td,ud){return this.r=sd,this.g=td,this.b=ud,this}setHSL(vd,wd,xd){if(vd=G(vd,1),wd=F(wd,0,1),xd=F(xd,0,1),0===wd)this.r=this.g=this.b=xd;else{const yd=xd<=0.5?xd*(1+wd):xd+wd-xd*wd,zd=2*xd-yd;this.r=id(zd,yd,vd+1/3),this.g=id(zd,yd,vd),this.b=id(zd,yd,vd-1/3)}return this}setStyle(Ad){function Bd(a){void 0!==a&&1>parseFloat(a)&&console.warn("THREE.Color: Alpha component of "+Ad+" will be ignored.")}let Cd;if(Cd=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(Ad)){let Dd;const Ed=Cd[1],Fd=Cd[2];switch(Ed){case"rgb":case"rgba":if(Dd=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(Fd))return this.r=Math.min(255,parseInt(Dd[1],10))/255,this.g=Math.min(255,parseInt(Dd[2],10))/255,this.b=Math.min(255,parseInt(Dd[3],10))/255,Bd(Dd[4]),this;if(Dd=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(Fd))return this.r=Math.min(100,parseInt(Dd[1],10))/100,this.g=Math.min(100,parseInt(Dd[2],10))/100,this.b=Math.min(100,parseInt(Dd[3],10))/100,Bd(Dd[4]),this;break;case"hsl":case"hsla":if(Dd=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(Fd)){const Gd=parseFloat(Dd[1])/360,Hd=parseInt(Dd[2],10)/100,Id=parseInt(Dd[3],10)/100;return Bd(Dd[4]),this.setHSL(Gd,Hd,Id)}break}}else if(Cd=/^\#([A-Fa-f\d]+)$/.exec(Ad)){const Jd=Cd[1],Kd=Jd.length;if(3===Kd)return this.r=parseInt(Jd.charAt(0)+Jd.charAt(0),16)/255,this.g=parseInt(Jd.charAt(1)+Jd.charAt(1),16)/255,this.b=parseInt(Jd.charAt(2)+Jd.charAt(2),16)/255,this;if(6===Kd)return this.r=parseInt(Jd.charAt(0)+Jd.charAt(1),16)/255,this.g=parseInt(Jd.charAt(2)+Jd.charAt(3),16)/255,this.b=parseInt(Jd.charAt(4)+Jd.charAt(5),16)/255,this}return Ad&&Ad.length>0?this.setColorName(Ad):this}setColorName(Ld){const Md=fd[Ld.toLowerCase()];return void 0!==Md?this.setHex(Md):console.warn("THREE.Color: Unknown color "+Ld),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(Nd){return this.r=Nd.r,this.g=Nd.g,this.b=Nd.b,this}copySRGBToLinear(Od){return this.r=jd(Od.r),this.g=jd(Od.g),this.b=jd(Od.b),this}copyLinearToSRGB(Pd){return this.r=kd(Pd.r),this.g=kd(Pd.g),this.b=kd(Pd.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(Qd){const Rd=this.r,Sd=this.g,Td=this.b,Ud=Math.max(Rd,Sd,Td),Vd=Math.min(Rd,Sd,Td);let Wd,Xd;const Yd=(Vd+Ud)/2;if(Vd===Ud)Wd=0,Xd=0;else{const Zd=Ud-Vd;switch(Xd=Yd<=0.5?Zd/(Ud+Vd):Zd/(2-Ud-Vd),Ud){case Rd:Wd=(Sd-Td)/Zd+(Sd<Td?6:0);break;case Sd:Wd=(Td-Rd)/Zd+2;break;case Td:Wd=(Rd-Sd)/Zd+4;break}Wd/=6}return Qd.h=Wd,Qd.s=Xd,Qd.l=Yd,Qd}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL($d,_d,ae){return this.getHSL(gd),gd.h+=$d,gd.s+=_d,gd.l+=ae,this.setHSL(gd.h,gd.s,gd.l),this}add(be){return this.r+=be.r,this.g+=be.g,this.b+=be.b,this}addColors(ce,de){return this.r=ce.r+de.r,this.g=ce.g+de.g,this.b=ce.b+de.b,this}addScalar(ee){return this.r+=ee,this.g+=ee,this.b+=ee,this}sub(fe){return this.r=Math.max(0,this.r-fe.r),this.g=Math.max(0,this.g-fe.g),this.b=Math.max(0,this.b-fe.b),this}multiply(ge){return this.r*=ge.r,this.g*=ge.g,this.b*=ge.b,this}multiplyScalar(he){return this.r*=he,this.g*=he,this.b*=he,this}lerp(ie,je){return this.r+=(ie.r-this.r)*je,this.g+=(ie.g-this.g)*je,this.b+=(ie.b-this.b)*je,this}lerpColors(ke,le,me){return this.r=ke.r+(le.r-ke.r)*me,this.g=ke.g+(le.g-ke.g)*me,this.b=ke.b+(le.b-ke.b)*me,this}lerpHSL(ne,oe){this.getHSL(gd),ne.getHSL(hd);const pe=H(gd.h,hd.h,oe),qe=H(gd.s,hd.s,oe),re=H(gd.l,hd.l,oe);return this.setHSL(pe,qe,re),this}equals(se){return se.r===this.r&&se.g===this.g&&se.b===this.b}fromArray(te,ue=0){return this.r=te[ue],this.g=te[ue+1],this.b=te[ue+2],this}toArray(ve=[],we=0){return ve[we]=this.r,ve[we+1]=this.g,ve[we+2]=this.b,ve}fromBufferAttribute(xe,ye){return this.r=xe.getX(ye),this.g=xe.getY(ye),this.b=xe.getZ(ye),!0===xe.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}ld.NAMES=fd,ld.prototype.isColor=!0,ld.prototype.r=1,ld.prototype.g=1,ld.prototype.b=1;let ze;class Ae{static getDataURL(Be){if(/^data:/i.test(Be.src))return Be.src;if("undefined"==typeof HTMLCanvasElement)return Be.src;let Ce;if(Be instanceof HTMLCanvasElement)Ce=Be;else{void 0===ze&&(ze=ed("canvas")),ze.width=Be.width,ze.height=Be.height;const De=ze.getContext("2d");Be instanceof ImageData?De.putImageData(Be,0,0):De.drawImage(Be,0,0,Be.width,Be.height),Ce=ze}return Ce.width>2048||Ce.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",Be),Ce.toDataURL("image/jpeg",0.6)):Ce.toDataURL("image/png")}static sRGBToLinear(Ee){if("undefined"!=typeof HTMLImageElement&&Ee instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&Ee instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&Ee instanceof ImageBitmap){const Fe=ed("canvas");Fe.width=Ee.width,Fe.height=Ee.height;const Ge=Fe.getContext("2d");Ge.drawImage(Ee,0,0,Ee.width,Ee.height);const He=Ge.getImageData(0,0,Ee.width,Ee.height),Ie=He.data;for(let Je=0;Je<Ie.length;Je++)Ie[Je]=255*jd(Ie[Je]/255);return Ge.putImageData(He,0,0),Fe}{if(!Ee.data)return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),Ee;const Ke=Ee.data.slice(0);for(let Le=0;Le<Ke.length;Le++)Ke instanceof Uint8Array||Ke instanceof Uint8ClampedArray?Ke[Le]=Math.floor(255*jd(Ke[Le]/255)):Ke[Le]=jd(Ke[Le]);return{data:Ke,width:Ee.width,height:Ee.height}}}}let Me=0;class Ne extends h{constructor(Oe=Ne.DEFAULT_IMAGE,Pe=Ne.DEFAULT_MAPPING,Qe=1001,Re=1001,Se=1006,Te=1008,Ue=1023,Ve=1009,We=1,Xe=3000){super(),Object.defineProperty(this,"id",{value:Me++}),this.uuid=E(),this.name="",this.image=Oe,this.mipmaps=[],this.mapping=Pe,this.wrapS=Qe,this.wrapT=Re,this.magFilter=Se,this.minFilter=Te,this.anisotropy=We,this.format=Ue,this.internalFormat=null,this.type=Ve,this.offset=new L(0,0),this.repeat=new L(1,1),this.center=new L(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ab(),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=Xe,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(Ye){return this.name=Ye.name,this.image=Ye.image,this.mipmaps=Ye.mipmaps.slice(0),this.mapping=Ye.mapping,this.wrapS=Ye.wrapS,this.wrapT=Ye.wrapT,this.magFilter=Ye.magFilter,this.minFilter=Ye.minFilter,this.anisotropy=Ye.anisotropy,this.format=Ye.format,this.internalFormat=Ye.internalFormat,this.type=Ye.type,this.offset.copy(Ye.offset),this.repeat.copy(Ye.repeat),this.center.copy(Ye.center),this.rotation=Ye.rotation,this.matrixAutoUpdate=Ye.matrixAutoUpdate,this.matrix.copy(Ye.matrix),this.generateMipmaps=Ye.generateMipmaps,this.premultiplyAlpha=Ye.premultiplyAlpha,this.flipY=Ye.flipY,this.unpackAlignment=Ye.unpackAlignment,this.encoding=Ye.encoding,this.userData=JSON.parse(JSON.stringify(Ye.userData)),this}toJSON(Ze){const $e=void 0===Ze||"string"==typeof Ze;if(!$e&& void 0!==Ze.textures[this.uuid])return Ze.textures[this.uuid];const _e={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const af=this.image;if(void 0===af.uuid&&(af.uuid=E()),!$e&& void 0===Ze.images[af.uuid]){let bf;if(Array.isArray(af)){bf=[];for(let cf=0,df=af.length;cf<df;cf++)af[cf].isDataTexture?bf.push(gf(af[cf].image)):bf.push(gf(af[cf]))}else bf=gf(af);Ze.images[af.uuid]={uuid:af.uuid,url:bf}}_e.image=af.uuid}return"{}"!==JSON.stringify(this.userData)&&(_e.userData=this.userData),$e||(Ze.textures[this.uuid]=_e),_e}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(ef){if(300!==this.mapping)return ef;if(ef.applyMatrix3(this.matrix),ef.x<0||ef.x>1)switch(this.wrapS){case 1000:ef.x=ef.x-Math.floor(ef.x);break;case 1001:ef.x=ef.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(ef.x)%2)?ef.x=Math.ceil(ef.x)-ef.x:ef.x=ef.x-Math.floor(ef.x);break}if(ef.y<0||ef.y>1)switch(this.wrapT){case 1000:ef.y=ef.y-Math.floor(ef.y);break;case 1001:ef.y=ef.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(ef.y)%2)?ef.y=Math.ceil(ef.y)-ef.y:ef.y=ef.y-Math.floor(ef.y);break}return this.flipY&&(ef.y=1-ef.y),ef}set needsUpdate(ff){!0===ff&&this.version++}}function gf(a){return"undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&a instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&a instanceof ImageBitmap?Ae.getDataURL(a):a.data?{data:Array.prototype.slice.call(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}Ne.DEFAULT_IMAGE=void 0,Ne.DEFAULT_MAPPING=300,Ne.prototype.isTexture=!0;class hf{constructor(jf=0,kf=0,lf=0,mf=1){this.x=jf,this.y=kf,this.z=lf,this.w=mf}get width(){return this.z}set width(nf){this.z=nf}get height(){return this.w}set height(of){this.w=of}set(pf,qf,rf,sf){return this.x=pf,this.y=qf,this.z=rf,this.w=sf,this}setScalar(tf){return this.x=tf,this.y=tf,this.z=tf,this.w=tf,this}setX(uf){return this.x=uf,this}setY(vf){return this.y=vf,this}setZ(wf){return this.z=wf,this}setW(xf){return this.w=xf,this}setComponent(yf,zf){switch(yf){case 0:this.x=zf;break;case 1:this.y=zf;break;case 2:this.z=zf;break;case 3:this.w=zf;break;default:throw new Error("index is out of range: "+yf)}return this}getComponent(Af){switch(Af){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+Af)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(Bf){return this.x=Bf.x,this.y=Bf.y,this.z=Bf.z,this.w=void 0!==Bf.w?Bf.w:1,this}add(Cf,Df){return void 0!==Df?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(Cf,Df)):(this.x+=Cf.x,this.y+=Cf.y,this.z+=Cf.z,this.w+=Cf.w,this)}addScalar(Ef){return this.x+=Ef,this.y+=Ef,this.z+=Ef,this.w+=Ef,this}addVectors(Ff,Gf){return this.x=Ff.x+Gf.x,this.y=Ff.y+Gf.y,this.z=Ff.z+Gf.z,this.w=Ff.w+Gf.w,this}addScaledVector(Hf,If){return this.x+=Hf.x*If,this.y+=Hf.y*If,this.z+=Hf.z*If,this.w+=Hf.w*If,this}sub(Jf,Kf){return void 0!==Kf?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(Jf,Kf)):(this.x-=Jf.x,this.y-=Jf.y,this.z-=Jf.z,this.w-=Jf.w,this)}subScalar(Lf){return this.x-=Lf,this.y-=Lf,this.z-=Lf,this.w-=Lf,this}subVectors(Mf,Nf){return this.x=Mf.x-Nf.x,this.y=Mf.y-Nf.y,this.z=Mf.z-Nf.z,this.w=Mf.w-Nf.w,this}multiply(Of){return this.x*=Of.x,this.y*=Of.y,this.z*=Of.z,this.w*=Of.w,this}multiplyScalar(Pf){return this.x*=Pf,this.y*=Pf,this.z*=Pf,this.w*=Pf,this}applyMatrix4(Qf){const Rf=this.x,Sf=this.y,Tf=this.z,Uf=this.w,Vf=Qf.elements;return this.x=Vf[0]*Rf+Vf[4]*Sf+Vf[8]*Tf+Vf[12]*Uf,this.y=Vf[1]*Rf+Vf[5]*Sf+Vf[9]*Tf+Vf[13]*Uf,this.z=Vf[2]*Rf+Vf[6]*Sf+Vf[10]*Tf+Vf[14]*Uf,this.w=Vf[3]*Rf+Vf[7]*Sf+Vf[11]*Tf+Vf[15]*Uf,this}divideScalar(Wf){return this.multiplyScalar(1/Wf)}setAxisAngleFromQuaternion(Xf){this.w=2*Math.acos(Xf.w);const Yf=Math.sqrt(1-Xf.w*Xf.w);return Yf<0.0001?(this.x=1,this.y=0,this.z=0):(this.x=Xf.x/Yf,this.y=Xf.y/Yf,this.z=Xf.z/Yf),this}setAxisAngleFromRotationMatrix(Zf){let $f,_f,ag,bg;const cg=Zf.elements,dg=cg[0],eg=cg[4],fg=cg[8],gg=cg[1],hg=cg[5],ig=cg[9],jg=cg[2],kg=cg[6],lg=cg[10];if(0.01>Math.abs(eg-gg)&&0.01>Math.abs(fg-jg)&&0.01>Math.abs(ig-kg)){if(0.1>Math.abs(eg+gg)&&0.1>Math.abs(fg+jg)&&0.1>Math.abs(ig+kg)&&0.1>Math.abs(dg+hg+lg-3))return this.set(1,0,0,0),this;$f=Math.PI;const mg=(dg+1)/2,ng=(hg+1)/2,og=(lg+1)/2,pg=(eg+gg)/4,qg=(fg+jg)/4,rg=(ig+kg)/4;return mg>ng&&mg>og?mg<0.01?(_f=0,ag=0.707106781,bg=0.707106781):(ag=pg/(_f=Math.sqrt(mg)),bg=qg/_f):ng>og?ng<0.01?(_f=0.707106781,ag=0,bg=0.707106781):(_f=pg/(ag=Math.sqrt(ng)),bg=rg/ag):og<0.01?(_f=0.707106781,ag=0.707106781,bg=0):(_f=qg/(bg=Math.sqrt(og)),ag=rg/bg),this.set(_f,ag,bg,$f),this}let sg=Math.sqrt((kg-ig)*(kg-ig)+(fg-jg)*(fg-jg)+(gg-eg)*(gg-eg));return 0.001>Math.abs(sg)&&(sg=1),this.x=(kg-ig)/sg,this.y=(fg-jg)/sg,this.z=(gg-eg)/sg,this.w=Math.acos((dg+hg+lg-1)/2),this}min(tg){return this.x=Math.min(this.x,tg.x),this.y=Math.min(this.y,tg.y),this.z=Math.min(this.z,tg.z),this.w=Math.min(this.w,tg.w),this}max(ug){return this.x=Math.max(this.x,ug.x),this.y=Math.max(this.y,ug.y),this.z=Math.max(this.z,ug.z),this.w=Math.max(this.w,ug.w),this}clamp(vg,wg){return this.x=Math.max(vg.x,Math.min(wg.x,this.x)),this.y=Math.max(vg.y,Math.min(wg.y,this.y)),this.z=Math.max(vg.z,Math.min(wg.z,this.z)),this.w=Math.max(vg.w,Math.min(wg.w,this.w)),this}clampScalar(xg,yg){return this.x=Math.max(xg,Math.min(yg,this.x)),this.y=Math.max(xg,Math.min(yg,this.y)),this.z=Math.max(xg,Math.min(yg,this.z)),this.w=Math.max(xg,Math.min(yg,this.w)),this}clampLength(zg,Ag){const Bg=this.length();return this.divideScalar(Bg||1).multiplyScalar(Math.max(zg,Math.min(Ag,Bg)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(Cg){return this.x*Cg.x+this.y*Cg.y+this.z*Cg.z+this.w*Cg.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(Dg){return this.normalize().multiplyScalar(Dg)}lerp(Eg,Fg){return this.x+=(Eg.x-this.x)*Fg,this.y+=(Eg.y-this.y)*Fg,this.z+=(Eg.z-this.z)*Fg,this.w+=(Eg.w-this.w)*Fg,this}lerpVectors(Gg,Hg,Ig){return this.x=Gg.x+(Hg.x-Gg.x)*Ig,this.y=Gg.y+(Hg.y-Gg.y)*Ig,this.z=Gg.z+(Hg.z-Gg.z)*Ig,this.w=Gg.w+(Hg.w-Gg.w)*Ig,this}equals(Jg){return Jg.x===this.x&&Jg.y===this.y&&Jg.z===this.z&&Jg.w===this.w}fromArray(Kg,Lg=0){return this.x=Kg[Lg],this.y=Kg[Lg+1],this.z=Kg[Lg+2],this.w=Kg[Lg+3],this}toArray(Mg=[],Ng=0){return Mg[Ng]=this.x,Mg[Ng+1]=this.y,Mg[Ng+2]=this.z,Mg[Ng+3]=this.w,Mg}fromBufferAttribute(Og,Pg,Qg){return void 0!==Qg&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=Og.getX(Pg),this.y=Og.getY(Pg),this.z=Og.getZ(Pg),this.w=Og.getW(Pg),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}hf.prototype.isVector4=!0;class Rg extends h{constructor(Sg,Tg,Ug={}){super(),this.width=Sg,this.height=Tg,this.depth=1,this.scissor=new hf(0,0,Sg,Tg),this.scissorTest=!1,this.viewport=new hf(0,0,Sg,Tg),this.texture=new Ne(void 0,Ug.mapping,Ug.wrapS,Ug.wrapT,Ug.magFilter,Ug.minFilter,Ug.format,Ug.type,Ug.anisotropy,Ug.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:Sg,height:Tg,depth:1},this.texture.generateMipmaps=void 0!==Ug.generateMipmaps&&Ug.generateMipmaps,this.texture.internalFormat=void 0!==Ug.internalFormat?Ug.internalFormat:null,this.texture.minFilter=void 0!==Ug.minFilter?Ug.minFilter:1006,this.depthBuffer=void 0===Ug.depthBuffer||Ug.depthBuffer,this.stencilBuffer=void 0!==Ug.stencilBuffer&&Ug.stencilBuffer,this.depthTexture=void 0!==Ug.depthTexture?Ug.depthTexture:null}setTexture(Vg){Vg.image={width:this.width,height:this.height,depth:this.depth},this.texture=Vg}setSize(Wg,Xg,Yg=1){(this.width!==Wg||this.height!==Xg||this.depth!==Yg)&&(this.width=Wg,this.height=Xg,this.depth=Yg,this.texture.image.width=Wg,this.texture.image.height=Xg,this.texture.image.depth=Yg,this.dispose()),this.viewport.set(0,0,Wg,Xg),this.scissor.set(0,0,Wg,Xg)}clone(){return new this.constructor().copy(this)}copy(Zg){return this.width=Zg.width,this.height=Zg.height,this.depth=Zg.depth,this.viewport.copy(Zg.viewport),this.texture=Zg.texture.clone(),this.texture.image=Object.assign({},Zg.texture.image),this.depthBuffer=Zg.depthBuffer,this.stencilBuffer=Zg.stencilBuffer,this.depthTexture=Zg.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}Rg.prototype.isWebGLRenderTarget=!0,(class extends Rg{constructor($g,_g,ah){super($g,_g);const bh=this.texture;this.texture=[];for(let ch=0;ch<ah;ch++)this.texture[ch]=bh.clone()}setSize(dh,eh,fh=1){if(this.width!==dh||this.height!==eh||this.depth!==fh){this.width=dh,this.height=eh,this.depth=fh;for(let gh=0,hh=this.texture.length;gh<hh;gh++)this.texture[gh].image.width=dh,this.texture[gh].image.height=eh,this.texture[gh].image.depth=fh;this.dispose()}return this.viewport.set(0,0,dh,eh),this.scissor.set(0,0,dh,eh),this}copy(ih){this.dispose(),this.width=ih.width,this.height=ih.height,this.depth=ih.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=ih.depthBuffer,this.stencilBuffer=ih.stencilBuffer,this.depthTexture=ih.depthTexture,this.texture.length=0;for(let jh=0,kh=ih.texture.length;jh<kh;jh++)this.texture[jh]=ih.texture[jh].clone();return this}}).prototype.isWebGLMultipleRenderTargets=!0;class lh extends Rg{constructor(mh,nh,oh={}){super(mh,nh,oh),this.samples=4,this.ignoreDepthForMultisampleCopy=void 0===oh.ignoreDepth||oh.ignoreDepth,this.useRenderToTexture=void 0!==oh.useRenderToTexture&&oh.useRenderToTexture,this.useRenderbuffer=!1===this.useRenderToTexture}copy(ph){return super.copy.call(this,ph),this.samples=ph.samples,this.useRenderToTexture=ph.useRenderToTexture,this.useRenderbuffer=ph.useRenderbuffer,this}}lh.prototype.isWebGLMultisampleRenderTarget=!0;class qh{constructor(rh=0,sh=0,th=0,uh=1){this._x=rh,this._y=sh,this._z=th,this._w=uh}static slerp(vh,wh,xh,yh){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),xh.slerpQuaternions(vh,wh,yh)}static slerpFlat(zh,Ah,Bh,Ch,Dh,Eh,Fh){let Gh=Bh[Ch+0],Hh=Bh[Ch+1],Ih=Bh[Ch+2],Jh=Bh[Ch+3];const Kh=Dh[Eh+0],Lh=Dh[Eh+1],Mh=Dh[Eh+2],Nh=Dh[Eh+3];if(0===Fh){zh[Ah+0]=Gh,zh[Ah+1]=Hh,zh[Ah+2]=Ih,zh[Ah+3]=Jh;return}if(1===Fh){zh[Ah+0]=Kh,zh[Ah+1]=Lh,zh[Ah+2]=Mh,zh[Ah+3]=Nh;return}if(Jh!==Nh||Gh!==Kh||Hh!==Lh||Ih!==Mh){let Oh=1-Fh;const Ph=Gh*Kh+Hh*Lh+Ih*Mh+Jh*Nh,Qh=Ph>=0?1:-1,Rh=1-Ph*Ph;if(Rh>Number.EPSILON){const Sh=Math.sqrt(Rh),Th=Math.atan2(Sh,Ph*Qh);Oh=Math.sin(Oh*Th)/Sh,Fh=Math.sin(Fh*Th)/Sh}const Uh=Fh*Qh;if(Gh=Gh*Oh+Kh*Uh,Hh=Hh*Oh+Lh*Uh,Ih=Ih*Oh+Mh*Uh,Jh=Jh*Oh+Nh*Uh,Oh===1-Fh){const Vh=1/Math.sqrt(Gh*Gh+Hh*Hh+Ih*Ih+Jh*Jh);Gh*=Vh,Hh*=Vh,Ih*=Vh,Jh*=Vh}}zh[Ah]=Gh,zh[Ah+1]=Hh,zh[Ah+2]=Ih,zh[Ah+3]=Jh}static multiplyQuaternionsFlat(Wh,Xh,Yh,Zh,$h,_h){const ai=Yh[Zh],bi=Yh[Zh+1],ci=Yh[Zh+2],di=Yh[Zh+3],ei=$h[_h],fi=$h[_h+1],gi=$h[_h+2],hi=$h[_h+3];return Wh[Xh]=ai*hi+di*ei+bi*gi-ci*fi,Wh[Xh+1]=bi*hi+di*fi+ci*ei-ai*gi,Wh[Xh+2]=ci*hi+di*gi+ai*fi-bi*ei,Wh[Xh+3]=di*hi-ai*ei-bi*fi-ci*gi,Wh}get x(){return this._x}set x(ii){this._x=ii,this._onChangeCallback()}get y(){return this._y}set y(ji){this._y=ji,this._onChangeCallback()}get z(){return this._z}set z(ki){this._z=ki,this._onChangeCallback()}get w(){return this._w}set w(li){this._w=li,this._onChangeCallback()}set(mi,ni,oi,pi){return this._x=mi,this._y=ni,this._z=oi,this._w=pi,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(qi){return this._x=qi.x,this._y=qi.y,this._z=qi.z,this._w=qi.w,this._onChangeCallback(),this}setFromEuler(ri,si){if(!(ri&&ri.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const ti=ri._x,ui=ri._y,vi=ri._z,wi=ri._order,xi=Math.cos,yi=Math.sin,zi=xi(ti/2),Ai=xi(ui/2),Bi=xi(vi/2),Ci=yi(ti/2),Di=yi(ui/2),Ei=yi(vi/2);switch(wi){case"XYZ":this._x=Ci*Ai*Bi+zi*Di*Ei,this._y=zi*Di*Bi-Ci*Ai*Ei,this._z=zi*Ai*Ei+Ci*Di*Bi,this._w=zi*Ai*Bi-Ci*Di*Ei;break;case"YXZ":this._x=Ci*Ai*Bi+zi*Di*Ei,this._y=zi*Di*Bi-Ci*Ai*Ei,this._z=zi*Ai*Ei-Ci*Di*Bi,this._w=zi*Ai*Bi+Ci*Di*Ei;break;case"ZXY":this._x=Ci*Ai*Bi-zi*Di*Ei,this._y=zi*Di*Bi+Ci*Ai*Ei,this._z=zi*Ai*Ei+Ci*Di*Bi,this._w=zi*Ai*Bi-Ci*Di*Ei;break;case"ZYX":this._x=Ci*Ai*Bi-zi*Di*Ei,this._y=zi*Di*Bi+Ci*Ai*Ei,this._z=zi*Ai*Ei-Ci*Di*Bi,this._w=zi*Ai*Bi+Ci*Di*Ei;break;case"YZX":this._x=Ci*Ai*Bi+zi*Di*Ei,this._y=zi*Di*Bi+Ci*Ai*Ei,this._z=zi*Ai*Ei-Ci*Di*Bi,this._w=zi*Ai*Bi-Ci*Di*Ei;break;case"XZY":this._x=Ci*Ai*Bi-zi*Di*Ei,this._y=zi*Di*Bi-Ci*Ai*Ei,this._z=zi*Ai*Ei+Ci*Di*Bi,this._w=zi*Ai*Bi+Ci*Di*Ei;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+wi)}return!1!==si&&this._onChangeCallback(),this}setFromAxisAngle(Fi,Gi){const Hi=Gi/2,Ii=Math.sin(Hi);return this._x=Fi.x*Ii,this._y=Fi.y*Ii,this._z=Fi.z*Ii,this._w=Math.cos(Hi),this._onChangeCallback(),this}setFromRotationMatrix(Ji){const Ki=Ji.elements,Li=Ki[0],Mi=Ki[4],Ni=Ki[8],Oi=Ki[1],Pi=Ki[5],Qi=Ki[9],Ri=Ki[2],Si=Ki[6],Ti=Ki[10],Ui=Li+Pi+Ti;if(Ui>0){const Vi=0.5/Math.sqrt(Ui+1);this._w=0.25/Vi,this._x=(Si-Qi)*Vi,this._y=(Ni-Ri)*Vi,this._z=(Oi-Mi)*Vi}else if(Li>Pi&&Li>Ti){const Wi=2*Math.sqrt(1+Li-Pi-Ti);this._w=(Si-Qi)/Wi,this._x=0.25*Wi,this._y=(Mi+Oi)/Wi,this._z=(Ni+Ri)/Wi}else if(Pi>Ti){const Xi=2*Math.sqrt(1+Pi-Li-Ti);this._w=(Ni-Ri)/Xi,this._x=(Mi+Oi)/Xi,this._y=0.25*Xi,this._z=(Qi+Si)/Xi}else{const Yi=2*Math.sqrt(1+Ti-Li-Pi);this._w=(Oi-Mi)/Yi,this._x=(Ni+Ri)/Yi,this._y=(Qi+Si)/Yi,this._z=0.25*Yi}return this._onChangeCallback(),this}setFromUnitVectors(Zi,$i){let _i=Zi.dot($i)+1;return _i<Number.EPSILON?(_i=0,Math.abs(Zi.x)>Math.abs(Zi.z)?(this._x=-Zi.y,this._y=Zi.x,this._z=0,this._w=_i):(this._x=0,this._y=-Zi.z,this._z=Zi.y,this._w=_i)):(this._x=Zi.y*$i.z-Zi.z*$i.y,this._y=Zi.z*$i.x-Zi.x*$i.z,this._z=Zi.x*$i.y-Zi.y*$i.x,this._w=_i),this.normalize()}angleTo(aj){return 2*Math.acos(Math.abs(F(this.dot(aj),-1,1)))}rotateTowards(bj,cj){const dj=this.angleTo(bj);if(0===dj)return this;const ej=Math.min(1,cj/dj);return this.slerp(bj,ej),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(fj){return this._x*fj._x+this._y*fj._y+this._z*fj._z+this._w*fj._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let gj=this.length();return 0===gj?(this._x=0,this._y=0,this._z=0,this._w=1):(gj=1/gj,this._x=this._x*gj,this._y=this._y*gj,this._z=this._z*gj,this._w=this._w*gj),this._onChangeCallback(),this}multiply(hj,ij){return void 0!==ij?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(hj,ij)):this.multiplyQuaternions(this,hj)}premultiply(jj){return this.multiplyQuaternions(jj,this)}multiplyQuaternions(kj,lj){const mj=kj._x,nj=kj._y,oj=kj._z,pj=kj._w,qj=lj._x,rj=lj._y,sj=lj._z,tj=lj._w;return this._x=mj*tj+pj*qj+nj*sj-oj*rj,this._y=nj*tj+pj*rj+oj*qj-mj*sj,this._z=oj*tj+pj*sj+mj*rj-nj*qj,this._w=pj*tj-mj*qj-nj*rj-oj*sj,this._onChangeCallback(),this}slerp(uj,vj){if(0===vj)return this;if(1===vj)return this.copy(uj);const wj=this._x,xj=this._y,yj=this._z,zj=this._w;let Aj=zj*uj._w+wj*uj._x+xj*uj._y+yj*uj._z;if(Aj<0?(this._w=-uj._w,this._x=-uj._x,this._y=-uj._y,this._z=-uj._z,Aj=-Aj):this.copy(uj),Aj>=1)return this._w=zj,this._x=wj,this._y=xj,this._z=yj,this;const Bj=1-Aj*Aj;if(Bj<=Number.EPSILON){const Cj=1-vj;return this._w=Cj*zj+vj*this._w,this._x=Cj*wj+vj*this._x,this._y=Cj*xj+vj*this._y,this._z=Cj*yj+vj*this._z,this.normalize(),this._onChangeCallback(),this}const Dj=Math.sqrt(Bj),Ej=Math.atan2(Dj,Aj),Fj=Math.sin((1-vj)*Ej)/Dj,Gj=Math.sin(vj*Ej)/Dj;return this._w=zj*Fj+this._w*Gj,this._x=wj*Fj+this._x*Gj,this._y=xj*Fj+this._y*Gj,this._z=yj*Fj+this._z*Gj,this._onChangeCallback(),this}slerpQuaternions(Hj,Ij,Jj){return this.copy(Hj).slerp(Ij,Jj)}random(){const Kj=Math.random(),Lj=Math.sqrt(1-Kj),Mj=Math.sqrt(Kj),Nj=2*Math.PI*Math.random(),Oj=2*Math.PI*Math.random();return this.set(Lj*Math.cos(Nj),Mj*Math.sin(Oj),Mj*Math.cos(Oj),Lj*Math.sin(Nj))}equals(Pj){return Pj._x===this._x&&Pj._y===this._y&&Pj._z===this._z&&Pj._w===this._w}fromArray(Qj,Rj=0){return this._x=Qj[Rj],this._y=Qj[Rj+1],this._z=Qj[Rj+2],this._w=Qj[Rj+3],this._onChangeCallback(),this}toArray(Sj=[],Tj=0){return Sj[Tj]=this._x,Sj[Tj+1]=this._y,Sj[Tj+2]=this._z,Sj[Tj+3]=this._w,Sj}fromBufferAttribute(Uj,Vj){return this._x=Uj.getX(Vj),this._y=Uj.getY(Vj),this._z=Uj.getZ(Vj),this._w=Uj.getW(Vj),this}_onChange(Wj){return this._onChangeCallback=Wj,this}_onChangeCallback(){}}qh.prototype.isQuaternion=!0;class Xj{constructor(Yj=0,Zj=0,$j=0){this.x=Yj,this.y=Zj,this.z=$j}set(_j,ak,bk){return void 0===bk&&(bk=this.z),this.x=_j,this.y=ak,this.z=bk,this}setScalar(ck){return this.x=ck,this.y=ck,this.z=ck,this}setX(dk){return this.x=dk,this}setY(ek){return this.y=ek,this}setZ(fk){return this.z=fk,this}setComponent(gk,hk){switch(gk){case 0:this.x=hk;break;case 1:this.y=hk;break;case 2:this.z=hk;break;default:throw new Error("index is out of range: "+gk)}return this}getComponent(ik){switch(ik){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+ik)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(jk){return this.x=jk.x,this.y=jk.y,this.z=jk.z,this}add(kk,lk){return void 0!==lk?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(kk,lk)):(this.x+=kk.x,this.y+=kk.y,this.z+=kk.z,this)}addScalar(mk){return this.x+=mk,this.y+=mk,this.z+=mk,this}addVectors(nk,ok){return this.x=nk.x+ok.x,this.y=nk.y+ok.y,this.z=nk.z+ok.z,this}addScaledVector(pk,qk){return this.x+=pk.x*qk,this.y+=pk.y*qk,this.z+=pk.z*qk,this}sub(rk,sk){return void 0!==sk?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(rk,sk)):(this.x-=rk.x,this.y-=rk.y,this.z-=rk.z,this)}subScalar(tk){return this.x-=tk,this.y-=tk,this.z-=tk,this}subVectors(uk,vk){return this.x=uk.x-vk.x,this.y=uk.y-vk.y,this.z=uk.z-vk.z,this}multiply(wk,xk){return void 0!==xk?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(wk,xk)):(this.x*=wk.x,this.y*=wk.y,this.z*=wk.z,this)}multiplyScalar(yk){return this.x*=yk,this.y*=yk,this.z*=yk,this}multiplyVectors(zk,Ak){return this.x=zk.x*Ak.x,this.y=zk.y*Ak.y,this.z=zk.z*Ak.z,this}applyEuler(Bk){return Bk&&Bk.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Am.setFromEuler(Bk))}applyAxisAngle(Ck,Dk){return this.applyQuaternion(Am.setFromAxisAngle(Ck,Dk))}applyMatrix3(Ek){const Fk=this.x,Gk=this.y,Hk=this.z,Ik=Ek.elements;return this.x=Ik[0]*Fk+Ik[3]*Gk+Ik[6]*Hk,this.y=Ik[1]*Fk+Ik[4]*Gk+Ik[7]*Hk,this.z=Ik[2]*Fk+Ik[5]*Gk+Ik[8]*Hk,this}applyNormalMatrix(Jk){return this.applyMatrix3(Jk).normalize()}applyMatrix4(Kk){const Lk=this.x,Mk=this.y,Nk=this.z,Ok=Kk.elements,Pk=1/(Ok[3]*Lk+Ok[7]*Mk+Ok[11]*Nk+Ok[15]);return this.x=(Ok[0]*Lk+Ok[4]*Mk+Ok[8]*Nk+Ok[12])*Pk,this.y=(Ok[1]*Lk+Ok[5]*Mk+Ok[9]*Nk+Ok[13])*Pk,this.z=(Ok[2]*Lk+Ok[6]*Mk+Ok[10]*Nk+Ok[14])*Pk,this}applyQuaternion(Qk){const Rk=this.x,Sk=this.y,Tk=this.z,Uk=Qk.x,Vk=Qk.y,Wk=Qk.z,Xk=Qk.w,Yk=Xk*Rk+Vk*Tk-Wk*Sk,Zk=Xk*Sk+Wk*Rk-Uk*Tk,$k=Xk*Tk+Uk*Sk-Vk*Rk,_k=-Uk*Rk-Vk*Sk-Wk*Tk;return this.x=Yk*Xk+ -(_k*Uk)+ -(Zk*Wk)- -($k*Vk),this.y=Zk*Xk+ -(_k*Vk)+ -($k*Uk)- -(Yk*Wk),this.z=$k*Xk+ -(_k*Wk)+ -(Yk*Vk)- -(Zk*Uk),this}project(al){return this.applyMatrix4(al.matrixWorldInverse).applyMatrix4(al.projectionMatrix)}unproject(bl){return this.applyMatrix4(bl.projectionMatrixInverse).applyMatrix4(bl.matrixWorld)}transformDirection(cl){const dl=this.x,el=this.y,fl=this.z,gl=cl.elements;return this.x=gl[0]*dl+gl[4]*el+gl[8]*fl,this.y=gl[1]*dl+gl[5]*el+gl[9]*fl,this.z=gl[2]*dl+gl[6]*el+gl[10]*fl,this.normalize()}divide(hl){return this.x/=hl.x,this.y/=hl.y,this.z/=hl.z,this}divideScalar(il){return this.multiplyScalar(1/il)}min(jl){return this.x=Math.min(this.x,jl.x),this.y=Math.min(this.y,jl.y),this.z=Math.min(this.z,jl.z),this}max(kl){return this.x=Math.max(this.x,kl.x),this.y=Math.max(this.y,kl.y),this.z=Math.max(this.z,kl.z),this}clamp(ll,ml){return this.x=Math.max(ll.x,Math.min(ml.x,this.x)),this.y=Math.max(ll.y,Math.min(ml.y,this.y)),this.z=Math.max(ll.z,Math.min(ml.z,this.z)),this}clampScalar(nl,ol){return this.x=Math.max(nl,Math.min(ol,this.x)),this.y=Math.max(nl,Math.min(ol,this.y)),this.z=Math.max(nl,Math.min(ol,this.z)),this}clampLength(pl,ql){const rl=this.length();return this.divideScalar(rl||1).multiplyScalar(Math.max(pl,Math.min(ql,rl)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(sl){return this.x*sl.x+this.y*sl.y+this.z*sl.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(tl){return this.normalize().multiplyScalar(tl)}lerp(ul,vl){return this.x+=(ul.x-this.x)*vl,this.y+=(ul.y-this.y)*vl,this.z+=(ul.z-this.z)*vl,this}lerpVectors(wl,xl,yl){return this.x=wl.x+(xl.x-wl.x)*yl,this.y=wl.y+(xl.y-wl.y)*yl,this.z=wl.z+(xl.z-wl.z)*yl,this}cross(zl,Al){return void 0!==Al?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(zl,Al)):this.crossVectors(this,zl)}crossVectors(Bl,Cl){const Dl=Bl.x,El=Bl.y,Fl=Bl.z,Gl=Cl.x,Hl=Cl.y,Il=Cl.z;return this.x=El*Il-Fl*Hl,this.y=Fl*Gl-Dl*Il,this.z=Dl*Hl-El*Gl,this}projectOnVector(Jl){const Kl=Jl.lengthSq();if(0===Kl)return this.set(0,0,0);const Ll=Jl.dot(this)/Kl;return this.copy(Jl).multiplyScalar(Ll)}projectOnPlane(Ml){return zm.copy(this).projectOnVector(Ml),this.sub(zm)}reflect(Nl){return this.sub(zm.copy(Nl).multiplyScalar(2*this.dot(Nl)))}angleTo(Ol){const Pl=Math.sqrt(this.lengthSq()*Ol.lengthSq());if(0===Pl)return Math.PI/2;const Ql=this.dot(Ol)/Pl;return Math.acos(F(Ql,-1,1))}distanceTo(Rl){return Math.sqrt(this.distanceToSquared(Rl))}distanceToSquared(Sl){const Tl=this.x-Sl.x,Ul=this.y-Sl.y,Vl=this.z-Sl.z;return Tl*Tl+Ul*Ul+Vl*Vl}manhattanDistanceTo(Wl){return Math.abs(this.x-Wl.x)+Math.abs(this.y-Wl.y)+Math.abs(this.z-Wl.z)}setFromSpherical(Xl){return this.setFromSphericalCoords(Xl.radius,Xl.phi,Xl.theta)}setFromSphericalCoords(Yl,Zl,$l){const _l=Math.sin(Zl)*Yl;return this.x=_l*Math.sin($l),this.y=Math.cos(Zl)*Yl,this.z=_l*Math.cos($l),this}setFromCylindrical(am){return this.setFromCylindricalCoords(am.radius,am.theta,am.y)}setFromCylindricalCoords(bm,cm,dm){return this.x=bm*Math.sin(cm),this.y=dm,this.z=bm*Math.cos(cm),this}setFromMatrixPosition(em){const fm=em.elements;return this.x=fm[12],this.y=fm[13],this.z=fm[14],this}setFromMatrixScale(gm){const hm=this.setFromMatrixColumn(gm,0).length(),im=this.setFromMatrixColumn(gm,1).length(),jm=this.setFromMatrixColumn(gm,2).length();return this.x=hm,this.y=im,this.z=jm,this}setFromMatrixColumn(km,lm){return this.fromArray(km.elements,4*lm)}setFromMatrix3Column(mm,nm){return this.fromArray(mm.elements,3*nm)}equals(om){return om.x===this.x&&om.y===this.y&&om.z===this.z}fromArray(pm,qm=0){return this.x=pm[qm],this.y=pm[qm+1],this.z=pm[qm+2],this}toArray(rm=[],sm=0){return rm[sm]=this.x,rm[sm+1]=this.y,rm[sm+2]=this.z,rm}fromBufferAttribute(tm,um,vm){return void 0!==vm&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=tm.getX(um),this.y=tm.getY(um),this.z=tm.getZ(um),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const wm=(Math.random()-0.5)*2,xm=Math.random()*Math.PI*2,ym=Math.sqrt(1-wm**2);return this.x=ym*Math.cos(xm),this.y=ym*Math.sin(xm),this.z=wm,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}Xj.prototype.isVector3=!0;const zm=new Xj(),Am=new qh();class Bm{constructor(Cm=new Xj(Infinity,Infinity,Infinity),Dm=new Xj(-1/0,-1/0,-1/0)){this.min=Cm,this.max=Dm}set(Em,Fm){return this.min.copy(Em),this.max.copy(Fm),this}setFromArray(Gm){let Hm=Infinity,Im=Infinity,Jm=Infinity,Km=-1/0,Lm=-1/0,Mm=-1/0;for(let Nm=0,Om=Gm.length;Nm<Om;Nm+=3){const Pm=Gm[Nm],Qm=Gm[Nm+1],Rm=Gm[Nm+2];Pm<Hm&&(Hm=Pm),Qm<Im&&(Im=Qm),Rm<Jm&&(Jm=Rm),Pm>Km&&(Km=Pm),Qm>Lm&&(Lm=Qm),Rm>Mm&&(Mm=Rm)}return this.min.set(Hm,Im,Jm),this.max.set(Km,Lm,Mm),this}setFromBufferAttribute(Sm){let Tm=Infinity,Um=Infinity,Vm=Infinity,Wm=-1/0,Xm=-1/0,Ym=-1/0;for(let Zm=0,$m=Sm.count;Zm<$m;Zm++){const _m=Sm.getX(Zm),an=Sm.getY(Zm),bn=Sm.getZ(Zm);_m<Tm&&(Tm=_m),an<Um&&(Um=an),bn<Vm&&(Vm=bn),_m>Wm&&(Wm=_m),an>Xm&&(Xm=an),bn>Ym&&(Ym=bn)}return this.min.set(Tm,Um,Vm),this.max.set(Wm,Xm,Ym),this}setFromPoints(cn){this.makeEmpty();for(let dn=0,en=cn.length;dn<en;dn++)this.expandByPoint(cn[dn]);return this}setFromCenterAndSize(fn,gn){const hn=Wn.copy(gn).multiplyScalar(0.5);return this.min.copy(fn).sub(hn),this.max.copy(fn).add(hn),this}setFromObject(jn,kn=!1){return this.makeEmpty(),this.expandByObject(jn,kn)}clone(){return new this.constructor().copy(this)}copy(ln){return this.min.copy(ln.min),this.max.copy(ln.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=Infinity,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(mn){return this.isEmpty()?mn.set(0,0,0):mn.addVectors(this.min,this.max).multiplyScalar(0.5)}getSize(nn){return this.isEmpty()?nn.set(0,0,0):nn.subVectors(this.max,this.min)}expandByPoint(on){return this.min.min(on),this.max.max(on),this}expandByVector(pn){return this.min.sub(pn),this.max.add(pn),this}expandByScalar(qn){return this.min.addScalar(-qn),this.max.addScalar(qn),this}expandByObject(rn,sn=!1){rn.updateWorldMatrix(!1,!1);const tn=rn.geometry;if(void 0!==tn)if(sn&& void 0!=tn.attributes&& void 0!==tn.attributes.position){const un=tn.attributes.position;for(let vn=0,wn=un.count;vn<wn;vn++)Wn.fromBufferAttribute(un,vn).applyMatrix4(rn.matrixWorld),this.expandByPoint(Wn)}else null===tn.boundingBox&&tn.computeBoundingBox(),Xn.copy(tn.boundingBox),Xn.applyMatrix4(rn.matrixWorld),this.union(Xn);const xn=rn.children;for(let yn=0,zn=xn.length;yn<zn;yn++)this.expandByObject(xn[yn],sn);return this}containsPoint(An){return!(An.x<this.min.x)&&!(An.x>this.max.x)&&!(An.y<this.min.y)&&!(An.y>this.max.y)&&!(An.z<this.min.z)&&!(An.z>this.max.z)}containsBox(Bn){return this.min.x<=Bn.min.x&&Bn.max.x<=this.max.x&&this.min.y<=Bn.min.y&&Bn.max.y<=this.max.y&&this.min.z<=Bn.min.z&&Bn.max.z<=this.max.z}getParameter(Cn,Dn){return Dn.set((Cn.x-this.min.x)/(this.max.x-this.min.x),(Cn.y-this.min.y)/(this.max.y-this.min.y),(Cn.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(En){return!(En.max.x<this.min.x)&&!(En.min.x>this.max.x)&&!(En.max.y<this.min.y)&&!(En.min.y>this.max.y)&&!(En.max.z<this.min.z)&&!(En.min.z>this.max.z)}intersectsSphere(Fn){return this.clampPoint(Fn.center,Wn),Wn.distanceToSquared(Fn.center)<=Fn.radius*Fn.radius}intersectsPlane(Gn){let Hn,In;return Gn.normal.x>0?(Hn=Gn.normal.x*this.min.x,In=Gn.normal.x*this.max.x):(Hn=Gn.normal.x*this.max.x,In=Gn.normal.x*this.min.x),Gn.normal.y>0?(Hn+=Gn.normal.y*this.min.y,In+=Gn.normal.y*this.max.y):(Hn+=Gn.normal.y*this.max.y,In+=Gn.normal.y*this.min.y),Gn.normal.z>0?(Hn+=Gn.normal.z*this.min.z,In+=Gn.normal.z*this.max.z):(Hn+=Gn.normal.z*this.max.z,In+=Gn.normal.z*this.min.z),Hn<= -Gn.constant&&In>= -Gn.constant}intersectsTriangle(Jn){if(this.isEmpty())return!1;this.getCenter(co),eo.subVectors(this.max,co),Yn.subVectors(Jn.a,co),Zn.subVectors(Jn.b,co),$n.subVectors(Jn.c,co),_n.subVectors(Zn,Yn),ao.subVectors($n,Zn),bo.subVectors(Yn,$n);let Kn=[0,-_n.z,_n.y,0,-ao.z,ao.y,0,-bo.z,bo.y,_n.z,0,-_n.x,ao.z,0,-ao.x,bo.z,0,-bo.x,-_n.y,_n.x,0,-ao.y,ao.x,0,-bo.y,bo.x,0];return!!ho(Kn,Yn,Zn,$n,eo)&& !!ho(Kn=[1,0,0,0,1,0,0,0,1],Yn,Zn,$n,eo)&&(fo.crossVectors(_n,ao),ho(Kn=[fo.x,fo.y,fo.z],Yn,Zn,$n,eo))}clampPoint(Ln,Mn){return Mn.copy(Ln).clamp(this.min,this.max)}distanceToPoint(Nn){const On=Wn.copy(Nn).clamp(this.min,this.max);return On.sub(Nn).length()}getBoundingSphere(Pn){return this.getCenter(Pn.center),Pn.radius=0.5*this.getSize(Wn).length(),Pn}intersect(Qn){return this.min.max(Qn.min),this.max.min(Qn.max),this.isEmpty()&&this.makeEmpty(),this}union(Rn){return this.min.min(Rn.min),this.max.max(Rn.max),this}applyMatrix4(Sn){return this.isEmpty()||(Vn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(Sn),Vn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(Sn),Vn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(Sn),Vn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(Sn),Vn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(Sn),Vn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(Sn),Vn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(Sn),Vn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(Sn),this.setFromPoints(Vn)),this}translate(Tn){return this.min.add(Tn),this.max.add(Tn),this}equals(Un){return Un.min.equals(this.min)&&Un.max.equals(this.max)}}Bm.prototype.isBox3=!0;const Vn=[new Xj(),new Xj(),new Xj(),new Xj(),new Xj(),new Xj(),new Xj(),new Xj()],Wn=new Xj(),Xn=new Bm(),Yn=new Xj(),Zn=new Xj(),$n=new Xj(),_n=new Xj(),ao=new Xj(),bo=new Xj(),co=new Xj(),eo=new Xj(),fo=new Xj(),go=new Xj();function ho(a,b,c,d,e){for(let f=0,g=a.length-3;f<=g;f+=3){go.fromArray(a,f);const h=e.x*Math.abs(go.x)+e.y*Math.abs(go.y)+e.z*Math.abs(go.z),i=b.dot(go),j=c.dot(go),k=d.dot(go);if(Math.max(-Math.max(i,j,k),Math.min(i,j,k))>h)return!1}return!0}const io=new Bm(),jo=new Xj(),ko=new Xj(),lo=new Xj();class mo{constructor(no=new Xj(),oo=-1){this.center=no,this.radius=oo}set(po,qo){return this.center.copy(po),this.radius=qo,this}setFromPoints(ro,so){const to=this.center;void 0!==so?to.copy(so):io.setFromPoints(ro).getCenter(to);let uo=0;for(let vo=0,wo=ro.length;vo<wo;vo++)uo=Math.max(uo,to.distanceToSquared(ro[vo]));return this.radius=Math.sqrt(uo),this}copy(xo){return this.center.copy(xo.center),this.radius=xo.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(yo){return yo.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(zo){return zo.distanceTo(this.center)-this.radius}intersectsSphere(Ao){const Bo=this.radius+Ao.radius;return Ao.center.distanceToSquared(this.center)<=Bo*Bo}intersectsBox(Co){return Co.intersectsSphere(this)}intersectsPlane(Do){return Math.abs(Do.distanceToPoint(this.center))<=this.radius}clampPoint(Eo,Fo){const Go=this.center.distanceToSquared(Eo);return Fo.copy(Eo),Go>this.radius*this.radius&&(Fo.sub(this.center).normalize(),Fo.multiplyScalar(this.radius).add(this.center)),Fo}getBoundingBox(Ho){return this.isEmpty()?(Ho.makeEmpty(),Ho):(Ho.set(this.center,this.center),Ho.expandByScalar(this.radius),Ho)}applyMatrix4(Io){return this.center.applyMatrix4(Io),this.radius=this.radius*Io.getMaxScaleOnAxis(),this}translate(Jo){return this.center.add(Jo),this}expandByPoint(Ko){lo.subVectors(Ko,this.center);const Lo=lo.lengthSq();if(Lo>this.radius*this.radius){const Mo=Math.sqrt(Lo),No=(Mo-this.radius)*0.5;this.center.add(lo.multiplyScalar(No/Mo)),this.radius+=No}return this}union(Oo){return!0===this.center.equals(Oo.center)?ko.set(0,0,1).multiplyScalar(Oo.radius):ko.subVectors(Oo.center,this.center).normalize().multiplyScalar(Oo.radius),this.expandByPoint(jo.copy(Oo.center).add(ko)),this.expandByPoint(jo.copy(Oo.center).sub(ko)),this}equals(Po){return Po.center.equals(this.center)&&Po.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Qo=new Xj(),Ro=new Xj(),So=new Xj(),To=new Xj(),Uo=new Xj(),Vo=new Xj(),Wo=new Xj();class Xo{constructor(Yo=new Xj(),Zo=new Xj(0,0,-1)){this.origin=Yo,this.direction=Zo}set($o,_o){return this.origin.copy($o),this.direction.copy(_o),this}copy(ap){return this.origin.copy(ap.origin),this.direction.copy(ap.direction),this}at(bp,cp){return cp.copy(this.direction).multiplyScalar(bp).add(this.origin)}lookAt(dp){return this.direction.copy(dp).sub(this.origin).normalize(),this}recast(ep){return this.origin.copy(this.at(ep,Qo)),this}closestPointToPoint(fp,gp){gp.subVectors(fp,this.origin);const hp=gp.dot(this.direction);return hp<0?gp.copy(this.origin):gp.copy(this.direction).multiplyScalar(hp).add(this.origin)}distanceToPoint(ip){return Math.sqrt(this.distanceSqToPoint(ip))}distanceSqToPoint(jp){const kp=Qo.subVectors(jp,this.origin).dot(this.direction);return kp<0?this.origin.distanceToSquared(jp):(Qo.copy(this.direction).multiplyScalar(kp).add(this.origin),Qo.distanceToSquared(jp))}distanceSqToSegment(lp,mp,np,op){Ro.copy(lp).add(mp).multiplyScalar(0.5),So.copy(mp).sub(lp).normalize(),To.copy(this.origin).sub(Ro);const pp=0.5*lp.distanceTo(mp),qp=-this.direction.dot(So),rp=To.dot(this.direction),sp=-To.dot(So),tp=To.lengthSq(),up=Math.abs(1-qp*qp);let vp,wp,xp,yp;if(up>0)if(vp=qp*sp-rp,wp=qp*rp-sp,yp=pp*up,vp>=0)if(wp>= -yp)if(wp<=yp){const zp=1/up;vp*=zp,wp*=zp,xp=vp*(vp+qp*wp+2*rp)+wp*(qp*vp+wp+2*sp)+tp}else xp=-(vp=Math.max(0,-(qp*(wp=pp)+rp)))*vp+wp*(wp+2*sp)+tp;else xp=-(vp=Math.max(0,-(qp*(wp=-pp)+rp)))*vp+wp*(wp+2*sp)+tp;else wp<= -yp?(wp=(vp=Math.max(0,-(-qp*pp+rp)))>0?-pp:Math.min(Math.max(-pp,-sp),pp),xp=-vp*vp+wp*(wp+2*sp)+tp):wp<=yp?(vp=0,xp=(wp=Math.min(Math.max(-pp,-sp),pp))*(wp+2*sp)+tp):(wp=(vp=Math.max(0,-(qp*pp+rp)))>0?pp:Math.min(Math.max(-pp,-sp),pp),xp=-vp*vp+wp*(wp+2*sp)+tp);else wp=qp>0?-pp:pp,vp=Math.max(0,-(qp*wp+rp)),xp=-vp*vp+wp*(wp+2*sp)+tp;return np&&np.copy(this.direction).multiplyScalar(vp).add(this.origin),op&&op.copy(So).multiplyScalar(wp).add(Ro),xp}intersectSphere(Ap,Bp){Qo.subVectors(Ap.center,this.origin);const Cp=Qo.dot(this.direction),Dp=Qo.dot(Qo)-Cp*Cp,Ep=Ap.radius*Ap.radius;if(Dp>Ep)return null;const Fp=Math.sqrt(Ep-Dp),Gp=Cp-Fp,Hp=Cp+Fp;return Gp<0&&Hp<0?null:Gp<0?this.at(Hp,Bp):this.at(Gp,Bp)}intersectsSphere(Ip){return this.distanceSqToPoint(Ip.center)<=Ip.radius*Ip.radius}distanceToPlane(Jp){const Kp=Jp.normal.dot(this.direction);if(0===Kp)return 0===Jp.distanceToPoint(this.origin)?0:null;const Lp=-(this.origin.dot(Jp.normal)+Jp.constant)/Kp;return Lp>=0?Lp:null}intersectPlane(Mp,Np){const Op=this.distanceToPlane(Mp);return null===Op?null:this.at(Op,Np)}intersectsPlane(Pp){const Qp=Pp.distanceToPoint(this.origin);if(0===Qp)return!0;const Rp=Pp.normal.dot(this.direction);return Rp*Qp<0}intersectBox(Sp,Tp){let Up,Vp,Wp,Xp,Yp,Zp;const $p=1/this.direction.x,_p=1/this.direction.y,aq=1/this.direction.z,bq=this.origin;return($p>=0?(Up=(Sp.min.x-bq.x)*$p,Vp=(Sp.max.x-bq.x)*$p):(Up=(Sp.max.x-bq.x)*$p,Vp=(Sp.min.x-bq.x)*$p),_p>=0?(Wp=(Sp.min.y-bq.y)*_p,Xp=(Sp.max.y-bq.y)*_p):(Wp=(Sp.max.y-bq.y)*_p,Xp=(Sp.min.y-bq.y)*_p),Up>Xp||Wp>Vp)?null:((Wp>Up||Up!=Up)&&(Up=Wp),(Xp<Vp||Vp!=Vp)&&(Vp=Xp),aq>=0?(Yp=(Sp.min.z-bq.z)*aq,Zp=(Sp.max.z-bq.z)*aq):(Yp=(Sp.max.z-bq.z)*aq,Zp=(Sp.min.z-bq.z)*aq),Up>Zp||Yp>Vp)?null:((Yp>Up||Up!=Up)&&(Up=Yp),(Zp<Vp||Vp!=Vp)&&(Vp=Zp),Vp<0)?null:this.at(Up>=0?Up:Vp,Tp)}intersectsBox(cq){return null!==this.intersectBox(cq,Qo)}intersectTriangle(dq,eq,fq,gq,hq){Uo.subVectors(eq,dq),Vo.subVectors(fq,dq),Wo.crossVectors(Uo,Vo);let iq=this.direction.dot(Wo),jq;if(iq>0){if(gq)return null;jq=1}else{if(!(iq<0))return null;jq=-1,iq=-iq}To.subVectors(this.origin,dq);const kq=jq*this.direction.dot(Vo.crossVectors(To,Vo));if(kq<0)return null;const lq=jq*this.direction.dot(Uo.cross(To));if(lq<0)return null;if(kq+lq>iq)return null;const mq=-jq*To.dot(Wo);return mq<0?null:this.at(mq/iq,hq)}applyMatrix4(nq){return this.origin.applyMatrix4(nq),this.direction.transformDirection(nq),this}equals(oq){return oq.origin.equals(this.origin)&&oq.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class pq{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(qq,rq,sq,tq,uq,vq,wq,xq,yq,zq,Aq,Bq,Cq,Dq,Eq,Fq){const Gq=this.elements;return Gq[0]=qq,Gq[4]=rq,Gq[8]=sq,Gq[12]=tq,Gq[1]=uq,Gq[5]=vq,Gq[9]=wq,Gq[13]=xq,Gq[2]=yq,Gq[6]=zq,Gq[10]=Aq,Gq[14]=Bq,Gq[3]=Cq,Gq[7]=Dq,Gq[11]=Eq,Gq[15]=Fq,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new pq().fromArray(this.elements)}copy(Hq){const Iq=this.elements,Jq=Hq.elements;return Iq[0]=Jq[0],Iq[1]=Jq[1],Iq[2]=Jq[2],Iq[3]=Jq[3],Iq[4]=Jq[4],Iq[5]=Jq[5],Iq[6]=Jq[6],Iq[7]=Jq[7],Iq[8]=Jq[8],Iq[9]=Jq[9],Iq[10]=Jq[10],Iq[11]=Jq[11],Iq[12]=Jq[12],Iq[13]=Jq[13],Iq[14]=Jq[14],Iq[15]=Jq[15],this}copyPosition(Kq){const Lq=this.elements,Mq=Kq.elements;return Lq[12]=Mq[12],Lq[13]=Mq[13],Lq[14]=Mq[14],this}setFromMatrix3(Nq){const Oq=Nq.elements;return this.set(Oq[0],Oq[3],Oq[6],0,Oq[1],Oq[4],Oq[7],0,Oq[2],Oq[5],Oq[8],0,0,0,0,1),this}extractBasis(Pq,Qq,Rq){return Pq.setFromMatrixColumn(this,0),Qq.setFromMatrixColumn(this,1),Rq.setFromMatrixColumn(this,2),this}makeBasis(Sq,Tq,Uq){return this.set(Sq.x,Tq.x,Uq.x,0,Sq.y,Tq.y,Uq.y,0,Sq.z,Tq.z,Uq.z,0,0,0,0,1),this}extractRotation(Vq){const Wq=this.elements,Xq=Vq.elements,Yq=1/mv.setFromMatrixColumn(Vq,0).length(),Zq=1/mv.setFromMatrixColumn(Vq,1).length(),$q=1/mv.setFromMatrixColumn(Vq,2).length();return Wq[0]=Xq[0]*Yq,Wq[1]=Xq[1]*Yq,Wq[2]=Xq[2]*Yq,Wq[3]=0,Wq[4]=Xq[4]*Zq,Wq[5]=Xq[5]*Zq,Wq[6]=Xq[6]*Zq,Wq[7]=0,Wq[8]=Xq[8]*$q,Wq[9]=Xq[9]*$q,Wq[10]=Xq[10]*$q,Wq[11]=0,Wq[12]=0,Wq[13]=0,Wq[14]=0,Wq[15]=1,this}makeRotationFromEuler(_q){_q&&_q.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const ar=this.elements,br=_q.x,cr=_q.y,dr=_q.z,er=Math.cos(br),fr=Math.sin(br),gr=Math.cos(cr),hr=Math.sin(cr),ir=Math.cos(dr),jr=Math.sin(dr);if("XYZ"===_q.order){const kr=er*ir,lr=er*jr,mr=fr*ir,nr=fr*jr;ar[0]=gr*ir,ar[4]=-gr*jr,ar[8]=hr,ar[1]=lr+mr*hr,ar[5]=kr-nr*hr,ar[9]=-fr*gr,ar[2]=nr-kr*hr,ar[6]=mr+lr*hr,ar[10]=er*gr}else if("YXZ"===_q.order){const or=gr*ir,pr=gr*jr,qr=hr*ir,rr=hr*jr;ar[0]=or+rr*fr,ar[4]=qr*fr-pr,ar[8]=er*hr,ar[1]=er*jr,ar[5]=er*ir,ar[9]=-fr,ar[2]=pr*fr-qr,ar[6]=rr+or*fr,ar[10]=er*gr}else if("ZXY"===_q.order){const sr=gr*ir,tr=gr*jr,ur=hr*ir,vr=hr*jr;ar[0]=sr-vr*fr,ar[4]=-er*jr,ar[8]=ur+tr*fr,ar[1]=tr+ur*fr,ar[5]=er*ir,ar[9]=vr-sr*fr,ar[2]=-er*hr,ar[6]=fr,ar[10]=er*gr}else if("ZYX"===_q.order){const wr=er*ir,xr=er*jr,yr=fr*ir,zr=fr*jr;ar[0]=gr*ir,ar[4]=yr*hr-xr,ar[8]=wr*hr+zr,ar[1]=gr*jr,ar[5]=zr*hr+wr,ar[9]=xr*hr-yr,ar[2]=-hr,ar[6]=fr*gr,ar[10]=er*gr}else if("YZX"===_q.order){const Ar=er*gr,Br=er*hr,Cr=fr*gr,Dr=fr*hr;ar[0]=gr*ir,ar[4]=Dr-Ar*jr,ar[8]=Cr*jr+Br,ar[1]=jr,ar[5]=er*ir,ar[9]=-fr*ir,ar[2]=-hr*ir,ar[6]=Br*jr+Cr,ar[10]=Ar-Dr*jr}else if("XZY"===_q.order){const Er=er*gr,Fr=er*hr,Gr=fr*gr,Hr=fr*hr;ar[0]=gr*ir,ar[4]=-jr,ar[8]=hr*ir,ar[1]=Er*jr+Hr,ar[5]=er*ir,ar[9]=Fr*jr-Gr,ar[2]=Gr*jr-Fr,ar[6]=fr*ir,ar[10]=Hr*jr+Er}return ar[3]=0,ar[7]=0,ar[11]=0,ar[12]=0,ar[13]=0,ar[14]=0,ar[15]=1,this}makeRotationFromQuaternion(Ir){return this.compose(ov,Ir,pv)}lookAt(Jr,Kr,Lr){const Mr=this.elements;return sv.subVectors(Jr,Kr),0===sv.lengthSq()&&(sv.z=1),sv.normalize(),qv.crossVectors(Lr,sv),0===qv.lengthSq()&&(1===Math.abs(Lr.z)?sv.x+=0.0001:sv.z+=0.0001,sv.normalize(),qv.crossVectors(Lr,sv)),qv.normalize(),rv.crossVectors(sv,qv),Mr[0]=qv.x,Mr[4]=rv.x,Mr[8]=sv.x,Mr[1]=qv.y,Mr[5]=rv.y,Mr[9]=sv.y,Mr[2]=qv.z,Mr[6]=rv.z,Mr[10]=sv.z,this}multiply(Nr,Or){return void 0!==Or?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(Nr,Or)):this.multiplyMatrices(this,Nr)}premultiply(Pr){return this.multiplyMatrices(Pr,this)}multiplyMatrices(Qr,Rr){const Sr=Qr.elements,Tr=Rr.elements,Ur=this.elements,Vr=Sr[0],Wr=Sr[4],Xr=Sr[8],Yr=Sr[12],Zr=Sr[1],$r=Sr[5],_r=Sr[9],as=Sr[13],bs=Sr[2],cs=Sr[6],ds=Sr[10],es=Sr[14],fs=Sr[3],gs=Sr[7],hs=Sr[11],is=Sr[15],js=Tr[0],ks=Tr[4],ls=Tr[8],ms=Tr[12],ns=Tr[1],os=Tr[5],ps=Tr[9],qs=Tr[13],rs=Tr[2],ss=Tr[6],ts=Tr[10],us=Tr[14],vs=Tr[3],ws=Tr[7],xs=Tr[11],ys=Tr[15];return Ur[0]=Vr*js+Wr*ns+Xr*rs+Yr*vs,Ur[4]=Vr*ks+Wr*os+Xr*ss+Yr*ws,Ur[8]=Vr*ls+Wr*ps+Xr*ts+Yr*xs,Ur[12]=Vr*ms+Wr*qs+Xr*us+Yr*ys,Ur[1]=Zr*js+$r*ns+_r*rs+as*vs,Ur[5]=Zr*ks+$r*os+_r*ss+as*ws,Ur[9]=Zr*ls+$r*ps+_r*ts+as*xs,Ur[13]=Zr*ms+$r*qs+_r*us+as*ys,Ur[2]=bs*js+cs*ns+ds*rs+es*vs,Ur[6]=bs*ks+cs*os+ds*ss+es*ws,Ur[10]=bs*ls+cs*ps+ds*ts+es*xs,Ur[14]=bs*ms+cs*qs+ds*us+es*ys,Ur[3]=fs*js+gs*ns+hs*rs+is*vs,Ur[7]=fs*ks+gs*os+hs*ss+is*ws,Ur[11]=fs*ls+gs*ps+hs*ts+is*xs,Ur[15]=fs*ms+gs*qs+hs*us+is*ys,this}multiplyScalar(zs){const As=this.elements;return As[0]*=zs,As[4]*=zs,As[8]*=zs,As[12]*=zs,As[1]*=zs,As[5]*=zs,As[9]*=zs,As[13]*=zs,As[2]*=zs,As[6]*=zs,As[10]*=zs,As[14]*=zs,As[3]*=zs,As[7]*=zs,As[11]*=zs,As[15]*=zs,this}determinant(){const Bs=this.elements,Cs=Bs[0],Ds=Bs[4],Es=Bs[8],Fs=Bs[12],Gs=Bs[1],Hs=Bs[5],Is=Bs[9],Js=Bs[13],Ks=Bs[2],Ls=Bs[6],Ms=Bs[10],Ns=Bs[14],Os=Bs[3],Ps=Bs[7],Qs=Bs[11],Rs=Bs[15];return Os*(+Fs*Is*Ls-Es*Js*Ls-Fs*Hs*Ms+Ds*Js*Ms+Es*Hs*Ns-Ds*Is*Ns)+Ps*(+Cs*Is*Ns-Cs*Js*Ms+Fs*Gs*Ms-Es*Gs*Ns+Es*Js*Ks-Fs*Is*Ks)+Qs*(+Cs*Js*Ls-Cs*Hs*Ns-Fs*Gs*Ls+Ds*Gs*Ns+Fs*Hs*Ks-Ds*Js*Ks)+Rs*(-Es*Hs*Ks-Cs*Is*Ls+Cs*Hs*Ms+Es*Gs*Ls-Ds*Gs*Ms+Ds*Is*Ks)}transpose(){const Ss=this.elements;let Ts;return Ts=Ss[1],Ss[1]=Ss[4],Ss[4]=Ts,Ts=Ss[2],Ss[2]=Ss[8],Ss[8]=Ts,Ts=Ss[6],Ss[6]=Ss[9],Ss[9]=Ts,Ts=Ss[3],Ss[3]=Ss[12],Ss[12]=Ts,Ts=Ss[7],Ss[7]=Ss[13],Ss[13]=Ts,Ts=Ss[11],Ss[11]=Ss[14],Ss[14]=Ts,this}setPosition(Us,Vs,Ws){const Xs=this.elements;return Us.isVector3?(Xs[12]=Us.x,Xs[13]=Us.y,Xs[14]=Us.z):(Xs[12]=Us,Xs[13]=Vs,Xs[14]=Ws),this}invert(){const Ys=this.elements,Zs=Ys[0],$s=Ys[1],_s=Ys[2],at=Ys[3],bt=Ys[4],ct=Ys[5],dt=Ys[6],et=Ys[7],ft=Ys[8],gt=Ys[9],ht=Ys[10],it=Ys[11],jt=Ys[12],kt=Ys[13],lt=Ys[14],mt=Ys[15],nt=gt*lt*et-kt*ht*et+kt*dt*it-ct*lt*it-gt*dt*mt+ct*ht*mt,ot=jt*ht*et-ft*lt*et-jt*dt*it+bt*lt*it+ft*dt*mt-bt*ht*mt,pt=ft*kt*et-jt*gt*et+jt*ct*it-bt*kt*it-ft*ct*mt+bt*gt*mt,qt=jt*gt*dt-ft*kt*dt-jt*ct*ht+bt*kt*ht+ft*ct*lt-bt*gt*lt,rt=Zs*nt+$s*ot+_s*pt+at*qt;if(0===rt)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const st=1/rt;return Ys[0]=nt*st,Ys[1]=(kt*ht*at-gt*lt*at-kt*_s*it+$s*lt*it+gt*_s*mt-$s*ht*mt)*st,Ys[2]=(ct*lt*at-kt*dt*at+kt*_s*et-$s*lt*et-ct*_s*mt+$s*dt*mt)*st,Ys[3]=(gt*dt*at-ct*ht*at-gt*_s*et+$s*ht*et+ct*_s*it-$s*dt*it)*st,Ys[4]=ot*st,Ys[5]=(ft*lt*at-jt*ht*at+jt*_s*it-Zs*lt*it-ft*_s*mt+Zs*ht*mt)*st,Ys[6]=(jt*dt*at-bt*lt*at-jt*_s*et+Zs*lt*et+bt*_s*mt-Zs*dt*mt)*st,Ys[7]=(bt*ht*at-ft*dt*at+ft*_s*et-Zs*ht*et-bt*_s*it+Zs*dt*it)*st,Ys[8]=pt*st,Ys[9]=(jt*gt*at-ft*kt*at-jt*$s*it+Zs*kt*it+ft*$s*mt-Zs*gt*mt)*st,Ys[10]=(bt*kt*at-jt*ct*at+jt*$s*et-Zs*kt*et-bt*$s*mt+Zs*ct*mt)*st,Ys[11]=(ft*ct*at-bt*gt*at-ft*$s*et+Zs*gt*et+bt*$s*it-Zs*ct*it)*st,Ys[12]=qt*st,Ys[13]=(ft*kt*_s-jt*gt*_s+jt*$s*ht-Zs*kt*ht-ft*$s*lt+Zs*gt*lt)*st,Ys[14]=(jt*ct*_s-bt*kt*_s-jt*$s*dt+Zs*kt*dt+bt*$s*lt-Zs*ct*lt)*st,Ys[15]=(bt*gt*_s-ft*ct*_s+ft*$s*dt-Zs*gt*dt-bt*$s*ht+Zs*ct*ht)*st,this}scale(tt){const ut=this.elements,vt=tt.x,wt=tt.y,xt=tt.z;return ut[0]*=vt,ut[4]*=wt,ut[8]*=xt,ut[1]*=vt,ut[5]*=wt,ut[9]*=xt,ut[2]*=vt,ut[6]*=wt,ut[10]*=xt,ut[3]*=vt,ut[7]*=wt,ut[11]*=xt,this}getMaxScaleOnAxis(){const yt=this.elements,zt=yt[0]*yt[0]+yt[1]*yt[1]+yt[2]*yt[2],At=yt[4]*yt[4]+yt[5]*yt[5]+yt[6]*yt[6],Bt=yt[8]*yt[8]+yt[9]*yt[9]+yt[10]*yt[10];return Math.sqrt(Math.max(zt,At,Bt))}makeTranslation(Ct,Dt,Et){return this.set(1,0,0,Ct,0,1,0,Dt,0,0,1,Et,0,0,0,1),this}makeRotationX(Ft){const Gt=Math.cos(Ft),Ht=Math.sin(Ft);return this.set(1,0,0,0,0,Gt,-Ht,0,0,Ht,Gt,0,0,0,0,1),this}makeRotationY(It){const Jt=Math.cos(It),Kt=Math.sin(It);return this.set(Jt,0,Kt,0,0,1,0,0,-Kt,0,Jt,0,0,0,0,1),this}makeRotationZ(Lt){const Mt=Math.cos(Lt),Nt=Math.sin(Lt);return this.set(Mt,-Nt,0,0,Nt,Mt,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(Ot,Pt){const Qt=Math.cos(Pt),Rt=Math.sin(Pt),St=1-Qt,Tt=Ot.x,Ut=Ot.y,Vt=Ot.z,Wt=St*Tt,Xt=St*Ut;return this.set(Wt*Tt+Qt,Wt*Ut-Rt*Vt,Wt*Vt+Rt*Ut,0,Wt*Ut+Rt*Vt,Xt*Ut+Qt,Xt*Vt-Rt*Tt,0,Wt*Vt-Rt*Ut,Xt*Vt+Rt*Tt,St*Vt*Vt+Qt,0,0,0,0,1),this}makeScale(Yt,Zt,$t){return this.set(Yt,0,0,0,0,Zt,0,0,0,0,$t,0,0,0,0,1),this}makeShear(_t,au,bu,cu,du,eu){return this.set(1,bu,du,0,_t,1,eu,0,au,cu,1,0,0,0,0,1),this}compose(fu,gu,hu){const iu=this.elements,ju=gu._x,ku=gu._y,lu=gu._z,mu=gu._w,nu=ju+ju,ou=ku+ku,pu=lu+lu,qu=ju*nu,ru=ju*ou,su=ju*pu,tu=ku*ou,uu=ku*pu,vu=lu*pu,wu=mu*nu,xu=mu*ou,yu=mu*pu,zu=hu.x,Au=hu.y,Bu=hu.z;return iu[0]=(1-(tu+vu))*zu,iu[1]=(ru+yu)*zu,iu[2]=(su-xu)*zu,iu[3]=0,iu[4]=(ru-yu)*Au,iu[5]=(1-(qu+vu))*Au,iu[6]=(uu+wu)*Au,iu[7]=0,iu[8]=(su+xu)*Bu,iu[9]=(uu-wu)*Bu,iu[10]=(1-(qu+tu))*Bu,iu[11]=0,iu[12]=fu.x,iu[13]=fu.y,iu[14]=fu.z,iu[15]=1,this}decompose(Cu,Du,Eu){const Fu=this.elements;let Gu=mv.set(Fu[0],Fu[1],Fu[2]).length();const Hu=mv.set(Fu[4],Fu[5],Fu[6]).length(),Iu=mv.set(Fu[8],Fu[9],Fu[10]).length(),Ju=this.determinant();Ju<0&&(Gu=-Gu),Cu.x=Fu[12],Cu.y=Fu[13],Cu.z=Fu[14],nv.copy(this);const Ku=1/Gu,Lu=1/Hu,Mu=1/Iu;return nv.elements[0]*=Ku,nv.elements[1]*=Ku,nv.elements[2]*=Ku,nv.elements[4]*=Lu,nv.elements[5]*=Lu,nv.elements[6]*=Lu,nv.elements[8]*=Mu,nv.elements[9]*=Mu,nv.elements[10]*=Mu,Du.setFromRotationMatrix(nv),Eu.x=Gu,Eu.y=Hu,Eu.z=Iu,this}makePerspective(Nu,Ou,Pu,Qu,Ru,Su){void 0===Su&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const Tu=this.elements;return Tu[0]=2*Ru/(Ou-Nu),Tu[4]=0,Tu[8]=(Ou+Nu)/(Ou-Nu),Tu[12]=0,Tu[1]=0,Tu[5]=2*Ru/(Pu-Qu),Tu[9]=(Pu+Qu)/(Pu-Qu),Tu[13]=0,Tu[2]=0,Tu[6]=0,Tu[10]=-(Su+Ru)/(Su-Ru),Tu[14]=-2*Su*Ru/(Su-Ru),Tu[3]=0,Tu[7]=0,Tu[11]=-1,Tu[15]=0,this}makeOrthographic(Uu,Vu,Wu,Xu,Yu,Zu){const $u=this.elements,_u=1/(Vu-Uu),av=1/(Wu-Xu),bv=1/(Zu-Yu);return $u[0]=2*_u,$u[4]=0,$u[8]=0,$u[12]=-((Vu+Uu)*_u),$u[1]=0,$u[5]=2*av,$u[9]=0,$u[13]=-((Wu+Xu)*av),$u[2]=0,$u[6]=0,$u[10]=-2*bv,$u[14]=-((Zu+Yu)*bv),$u[3]=0,$u[7]=0,$u[11]=0,$u[15]=1,this}equals(cv){const dv=this.elements,ev=cv.elements;for(let fv=0;fv<16;fv++)if(dv[fv]!==ev[fv])return!1;return!0}fromArray(gv,hv=0){for(let iv=0;iv<16;iv++)this.elements[iv]=gv[iv+hv];return this}toArray(jv=[],kv=0){const lv=this.elements;return jv[kv]=lv[0],jv[kv+1]=lv[1],jv[kv+2]=lv[2],jv[kv+3]=lv[3],jv[kv+4]=lv[4],jv[kv+5]=lv[5],jv[kv+6]=lv[6],jv[kv+7]=lv[7],jv[kv+8]=lv[8],jv[kv+9]=lv[9],jv[kv+10]=lv[10],jv[kv+11]=lv[11],jv[kv+12]=lv[12],jv[kv+13]=lv[13],jv[kv+14]=lv[14],jv[kv+15]=lv[15],jv}}pq.prototype.isMatrix4=!0;const mv=new Xj(),nv=new pq(),ov=new Xj(0,0,0),pv=new Xj(1,1,1),qv=new Xj(),rv=new Xj(),sv=new Xj(),tv=new pq(),uv=new qh();class vv{constructor(wv=0,xv=0,yv=0,zv=vv.DefaultOrder){this._x=wv,this._y=xv,this._z=yv,this._order=zv}get x(){return this._x}set x(Av){this._x=Av,this._onChangeCallback()}get y(){return this._y}set y(Bv){this._y=Bv,this._onChangeCallback()}get z(){return this._z}set z(Cv){this._z=Cv,this._onChangeCallback()}get order(){return this._order}set order(Dv){this._order=Dv,this._onChangeCallback()}set(Ev,Fv,Gv,Hv=this._order){return this._x=Ev,this._y=Fv,this._z=Gv,this._order=Hv,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(Iv){return this._x=Iv._x,this._y=Iv._y,this._z=Iv._z,this._order=Iv._order,this._onChangeCallback(),this}setFromRotationMatrix(Jv,Kv=this._order,Lv=!0){const Mv=Jv.elements,Nv=Mv[0],Ov=Mv[4],Pv=Mv[8],Qv=Mv[1],Rv=Mv[5],Sv=Mv[9],Tv=Mv[2],Uv=Mv[6],Vv=Mv[10];switch(Kv){case"XYZ":this._y=Math.asin(F(Pv,-1,1)),0.9999999>Math.abs(Pv)?(this._x=Math.atan2(-Sv,Vv),this._z=Math.atan2(-Ov,Nv)):(this._x=Math.atan2(Uv,Rv),this._z=0);break;case"YXZ":this._x=Math.asin(-F(Sv,-1,1)),0.9999999>Math.abs(Sv)?(this._y=Math.atan2(Pv,Vv),this._z=Math.atan2(Qv,Rv)):(this._y=Math.atan2(-Tv,Nv),this._z=0);break;case"ZXY":this._x=Math.asin(F(Uv,-1,1)),0.9999999>Math.abs(Uv)?(this._y=Math.atan2(-Tv,Vv),this._z=Math.atan2(-Ov,Rv)):(this._y=0,this._z=Math.atan2(Qv,Nv));break;case"ZYX":this._y=Math.asin(-F(Tv,-1,1)),0.9999999>Math.abs(Tv)?(this._x=Math.atan2(Uv,Vv),this._z=Math.atan2(Qv,Nv)):(this._x=0,this._z=Math.atan2(-Ov,Rv));break;case"YZX":this._z=Math.asin(F(Qv,-1,1)),0.9999999>Math.abs(Qv)?(this._x=Math.atan2(-Sv,Rv),this._y=Math.atan2(-Tv,Nv)):(this._x=0,this._y=Math.atan2(Pv,Vv));break;case"XZY":this._z=Math.asin(-F(Ov,-1,1)),0.9999999>Math.abs(Ov)?(this._x=Math.atan2(Uv,Rv),this._y=Math.atan2(Pv,Nv)):(this._x=Math.atan2(-Sv,Vv),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+Kv)}return this._order=Kv,!0===Lv&&this._onChangeCallback(),this}setFromQuaternion(Wv,Xv,Yv){return tv.makeRotationFromQuaternion(Wv),this.setFromRotationMatrix(tv,Xv,Yv)}setFromVector3(Zv,$v=this._order){return this.set(Zv.x,Zv.y,Zv.z,$v)}reorder(_v){return uv.setFromEuler(this),this.setFromQuaternion(uv,_v)}equals(aw){return aw._x===this._x&&aw._y===this._y&&aw._z===this._z&&aw._order===this._order}fromArray(bw){return this._x=bw[0],this._y=bw[1],this._z=bw[2],void 0!==bw[3]&&(this._order=bw[3]),this._onChangeCallback(),this}toArray(cw=[],dw=0){return cw[dw]=this._x,cw[dw+1]=this._y,cw[dw+2]=this._z,cw[dw+3]=this._order,cw}toVector3(ew){return ew?ew.set(this._x,this._y,this._z):new Xj(this._x,this._y,this._z)}_onChange(fw){return this._onChangeCallback=fw,this}_onChangeCallback(){}}vv.prototype.isEuler=!0,vv.DefaultOrder="XYZ",vv.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class gw{constructor(){this.mask=1}set(hw){this.mask=(1<<hw|0)>>>0}enable(iw){this.mask|=1<<iw|0}enableAll(){this.mask=-1}toggle(jw){this.mask^=1<<jw|0}disable(kw){this.mask&=~(1<<kw|0)}disableAll(){this.mask=0}test(lw){return(this.mask&lw.mask)!=0}isEnabled(mw){return(this.mask&(1<<mw|0))!=0}}let nw=0;const ow=new Xj(),pw=new qh(),qw=new pq(),rw=new Xj(),sw=new Xj(),tw=new Xj(),uw=new qh(),vw=new Xj(1,0,0),ww=new Xj(0,1,0),xw=new Xj(0,0,1),yw={type:"added"},zw={type:"removed"};class Aw extends h{constructor(){super(),Object.defineProperty(this,"id",{value:nw++}),this.uuid=E(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Aw.DefaultUp.clone();const Bw=new Xj(),Cw=new vv(),Dw=new qh(),Ew=new Xj(1,1,1);Cw._onChange(function(){Dw.setFromEuler(Cw,!1)}),Dw._onChange(function(){Cw.setFromQuaternion(Dw,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:Bw},rotation:{configurable:!0,enumerable:!0,value:Cw},quaternion:{configurable:!0,enumerable:!0,value:Dw},scale:{configurable:!0,enumerable:!0,value:Ew},modelViewMatrix:{value:new pq()},normalMatrix:{value:new ab()}}),this.matrix=new pq(),this.matrixWorld=new pq(),this.matrixAutoUpdate=Aw.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new gw(),this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(Fw){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(Fw),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(Gw){return this.quaternion.premultiply(Gw),this}setRotationFromAxisAngle(Hw,Iw){this.quaternion.setFromAxisAngle(Hw,Iw)}setRotationFromEuler(Jw){this.quaternion.setFromEuler(Jw,!0)}setRotationFromMatrix(Kw){this.quaternion.setFromRotationMatrix(Kw)}setRotationFromQuaternion(Lw){this.quaternion.copy(Lw)}rotateOnAxis(Mw,Nw){return pw.setFromAxisAngle(Mw,Nw),this.quaternion.multiply(pw),this}rotateOnWorldAxis(Ow,Pw){return pw.setFromAxisAngle(Ow,Pw),this.quaternion.premultiply(pw),this}rotateX(Qw){return this.rotateOnAxis(vw,Qw)}rotateY(Rw){return this.rotateOnAxis(ww,Rw)}rotateZ(Sw){return this.rotateOnAxis(xw,Sw)}translateOnAxis(Tw,Uw){return ow.copy(Tw).applyQuaternion(this.quaternion),this.position.add(ow.multiplyScalar(Uw)),this}translateX(Vw){return this.translateOnAxis(vw,Vw)}translateY(Ww){return this.translateOnAxis(ww,Ww)}translateZ(Xw){return this.translateOnAxis(xw,Xw)}localToWorld(Yw){return Yw.applyMatrix4(this.matrixWorld)}worldToLocal(Zw){return Zw.applyMatrix4(qw.copy(this.matrixWorld).invert())}lookAt($w,_w,ax){$w.isVector3?rw.copy($w):rw.set($w,_w,ax);const bx=this.parent;this.updateWorldMatrix(!0,!1),sw.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?qw.lookAt(sw,rw,this.up):qw.lookAt(rw,sw,this.up),this.quaternion.setFromRotationMatrix(qw),bx&&(qw.extractRotation(bx.matrixWorld),pw.setFromRotationMatrix(qw),this.quaternion.premultiply(pw.invert()))}add(cx){if(arguments.length>1){for(let dx=0;dx<arguments.length;dx++)this.add(arguments[dx]);return this}return cx===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",cx),this):(cx&&cx.isObject3D?(null!==cx.parent&&cx.parent.remove(cx),cx.parent=this,this.children.push(cx),cx.dispatchEvent(yw)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",cx),this)}remove(ex){if(arguments.length>1){for(let fx=0;fx<arguments.length;fx++)this.remove(arguments[fx]);return this}const gx=this.children.indexOf(ex);return -1!==gx&&(ex.parent=null,this.children.splice(gx,1),ex.dispatchEvent(zw)),this}removeFromParent(){const hx=this.parent;return null!==hx&&hx.remove(this),this}clear(){for(let ix=0;ix<this.children.length;ix++){const jx=this.children[ix];jx.parent=null,jx.dispatchEvent(zw)}return this.children.length=0,this}attach(kx){return this.updateWorldMatrix(!0,!1),qw.copy(this.matrixWorld).invert(),null!==kx.parent&&(kx.parent.updateWorldMatrix(!0,!1),qw.multiply(kx.parent.matrixWorld)),kx.applyMatrix4(qw),this.add(kx),kx.updateWorldMatrix(!1,!0),this}getObjectById(lx){return this.getObjectByProperty("id",lx)}getObjectByName(mx){return this.getObjectByProperty("name",mx)}getObjectByProperty(nx,ox){if(this[nx]===ox)return this;for(let px=0,qx=this.children.length;px<qx;px++){const rx=this.children[px],sx=rx.getObjectByProperty(nx,ox);if(void 0!==sx)return sx}}getWorldPosition(tx){return this.updateWorldMatrix(!0,!1),tx.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(ux){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(sw,ux,tw),ux}getWorldScale(vx){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(sw,uw,vx),vx}getWorldDirection(wx){this.updateWorldMatrix(!0,!1);const xx=this.matrixWorld.elements;return wx.set(xx[8],xx[9],xx[10]).normalize()}raycast(){}traverse(yx){yx(this);const zx=this.children;for(let Ax=0,Bx=zx.length;Ax<Bx;Ax++)zx[Ax].traverse(yx)}traverseVisible(Cx){if(!1===this.visible)return;Cx(this);const Dx=this.children;for(let Ex=0,Fx=Dx.length;Ex<Fx;Ex++)Dx[Ex].traverseVisible(Cx)}traverseAncestors(Gx){const Hx=this.parent;null!==Hx&&(Gx(Hx),Hx.traverseAncestors(Gx))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(Ix){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||Ix)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,Ix=!0);const Jx=this.children;for(let Kx=0,Lx=Jx.length;Kx<Lx;Kx++)Jx[Kx].updateMatrixWorld(Ix)}updateWorldMatrix(Mx,Nx){const Ox=this.parent;if(!0===Mx&&null!==Ox&&Ox.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===Nx){const Px=this.children;for(let Qx=0,Rx=Px.length;Qx<Rx;Qx++)Px[Qx].updateWorldMatrix(!1,!0)}}toJSON(Sx){const Tx=void 0===Sx||"string"==typeof Sx,Ux={};Tx&&(Sx={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},Ux.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const Vx={};function Wx(a,b){return void 0===a[b.uuid]&&(a[b.uuid]=b.toJSON(Sx)),b.uuid}if(Vx.uuid=this.uuid,Vx.type=this.type,""!==this.name&&(Vx.name=this.name),!0===this.castShadow&&(Vx.castShadow=!0),!0===this.receiveShadow&&(Vx.receiveShadow=!0),!1===this.visible&&(Vx.visible=!1),!1===this.frustumCulled&&(Vx.frustumCulled=!1),0!==this.renderOrder&&(Vx.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(Vx.userData=this.userData),Vx.layers=this.layers.mask,Vx.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(Vx.matrixAutoUpdate=!1),this.isInstancedMesh&&(Vx.type="InstancedMesh",Vx.count=this.count,Vx.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(Vx.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?Vx.background=this.background.toJSON():this.background.isTexture&&(Vx.background=this.background.toJSON(Sx).uuid)),this.environment&&this.environment.isTexture&&(Vx.environment=this.environment.toJSON(Sx).uuid);else if(this.isMesh||this.isLine||this.isPoints){Vx.geometry=Wx(Sx.geometries,this.geometry);const Xx=this.geometry.parameters;if(void 0!==Xx&& void 0!==Xx.shapes){const Yx=Xx.shapes;if(Array.isArray(Yx))for(let Zx=0,$x=Yx.length;Zx<$x;Zx++){const _x=Yx[Zx];Wx(Sx.shapes,_x)}else Wx(Sx.shapes,Yx)}}if(this.isSkinnedMesh&&(Vx.bindMode=this.bindMode,Vx.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(Wx(Sx.skeletons,this.skeleton),Vx.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const ay=[];for(let by=0,cy=this.material.length;by<cy;by++)ay.push(Wx(Sx.materials,this.material[by]));Vx.material=ay}else Vx.material=Wx(Sx.materials,this.material);if(this.children.length>0){Vx.children=[];for(let dy=0;dy<this.children.length;dy++)Vx.children.push(this.children[dy].toJSON(Sx).object)}if(this.animations.length>0){Vx.animations=[];for(let ey=0;ey<this.animations.length;ey++){const fy=this.animations[ey];Vx.animations.push(Wx(Sx.animations,fy))}}if(Tx){const gy=ny(Sx.geometries),hy=ny(Sx.materials),iy=ny(Sx.textures),jy=ny(Sx.images),ky=ny(Sx.shapes),ly=ny(Sx.skeletons),my=ny(Sx.animations);gy.length>0&&(Ux.geometries=gy),hy.length>0&&(Ux.materials=hy),iy.length>0&&(Ux.textures=iy),jy.length>0&&(Ux.images=jy),ky.length>0&&(Ux.shapes=ky),ly.length>0&&(Ux.skeletons=ly),my.length>0&&(Ux.animations=my)}return Ux.object=Vx,Ux;function ny(a){const b=[];for(const c in a){const d=a[c];delete d.metadata,b.push(d)}return b}}clone(oy){return new this.constructor().copy(this,oy)}copy(py,qy=!0){if(this.name=py.name,this.up.copy(py.up),this.position.copy(py.position),this.rotation.order=py.rotation.order,this.quaternion.copy(py.quaternion),this.scale.copy(py.scale),this.matrix.copy(py.matrix),this.matrixWorld.copy(py.matrixWorld),this.matrixAutoUpdate=py.matrixAutoUpdate,this.matrixWorldNeedsUpdate=py.matrixWorldNeedsUpdate,this.layers.mask=py.layers.mask,this.visible=py.visible,this.castShadow=py.castShadow,this.receiveShadow=py.receiveShadow,this.frustumCulled=py.frustumCulled,this.renderOrder=py.renderOrder,this.userData=JSON.parse(JSON.stringify(py.userData)),!0===qy)for(let ry=0;ry<py.children.length;ry++){const sy=py.children[ry];this.add(sy.clone())}return this}}Aw.DefaultUp=new Xj(0,1,0),Aw.DefaultMatrixAutoUpdate=!0,Aw.prototype.isObject3D=!0;const ty=new Xj(),uy=new Xj(),vy=new Xj(),wy=new Xj(),xy=new Xj(),yy=new Xj(),zy=new Xj(),Ay=new Xj(),By=new Xj(),Cy=new Xj();class Dy{constructor(Ey=new Xj(),Fy=new Xj(),Gy=new Xj()){this.a=Ey,this.b=Fy,this.c=Gy}static getNormal(Hy,Iy,Jy,Ky){Ky.subVectors(Jy,Iy),ty.subVectors(Hy,Iy),Ky.cross(ty);const Ly=Ky.lengthSq();return Ly>0?Ky.multiplyScalar(1/Math.sqrt(Ly)):Ky.set(0,0,0)}static getBarycoord(My,Ny,Oy,Py,Qy){ty.subVectors(Py,Ny),uy.subVectors(Oy,Ny),vy.subVectors(My,Ny);const Ry=ty.dot(ty),Sy=ty.dot(uy),Ty=ty.dot(vy),Uy=uy.dot(uy),Vy=uy.dot(vy),Wy=Ry*Uy-Sy*Sy;if(0===Wy)return Qy.set(-2,-1,-1);const Xy=1/Wy,Yy=(Uy*Ty-Sy*Vy)*Xy,Zy=(Ry*Vy-Sy*Ty)*Xy;return Qy.set(1-Yy-Zy,Zy,Yy)}static containsPoint($y,_y,az,bz){return this.getBarycoord($y,_y,az,bz,wy),wy.x>=0&&wy.y>=0&&wy.x+wy.y<=1}static getUV(cz,dz,ez,fz,gz,hz,iz,jz){return this.getBarycoord(cz,dz,ez,fz,wy),jz.set(0,0),jz.addScaledVector(gz,wy.x),jz.addScaledVector(hz,wy.y),jz.addScaledVector(iz,wy.z),jz}static isFrontFacing(kz,lz,mz,nz){return ty.subVectors(mz,lz),uy.subVectors(kz,lz),0>ty.cross(uy).dot(nz)}set(oz,pz,qz){return this.a.copy(oz),this.b.copy(pz),this.c.copy(qz),this}setFromPointsAndIndices(rz,sz,tz,uz){return this.a.copy(rz[sz]),this.b.copy(rz[tz]),this.c.copy(rz[uz]),this}setFromAttributeAndIndices(vz,wz,xz,yz){return this.a.fromBufferAttribute(vz,wz),this.b.fromBufferAttribute(vz,xz),this.c.fromBufferAttribute(vz,yz),this}clone(){return new this.constructor().copy(this)}copy(zz){return this.a.copy(zz.a),this.b.copy(zz.b),this.c.copy(zz.c),this}getArea(){return ty.subVectors(this.c,this.b),uy.subVectors(this.a,this.b),0.5*ty.cross(uy).length()}getMidpoint(Az){return Az.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(Bz){return Dy.getNormal(this.a,this.b,this.c,Bz)}getPlane(Cz){return Cz.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(Dz,Ez){return Dy.getBarycoord(Dz,this.a,this.b,this.c,Ez)}getUV(Fz,Gz,Hz,Iz,Jz){return Dy.getUV(Fz,this.a,this.b,this.c,Gz,Hz,Iz,Jz)}containsPoint(Kz){return Dy.containsPoint(Kz,this.a,this.b,this.c)}isFrontFacing(Lz){return Dy.isFrontFacing(this.a,this.b,this.c,Lz)}intersectsBox(Mz){return Mz.intersectsTriangle(this)}closestPointToPoint(Nz,Oz){const Pz=this.a,Qz=this.b,Rz=this.c;let Sz,Tz;xy.subVectors(Qz,Pz),yy.subVectors(Rz,Pz),Ay.subVectors(Nz,Pz);const Uz=xy.dot(Ay),Vz=yy.dot(Ay);if(Uz<=0&&Vz<=0)return Oz.copy(Pz);By.subVectors(Nz,Qz);const Wz=xy.dot(By),Xz=yy.dot(By);if(Wz>=0&&Xz<=Wz)return Oz.copy(Qz);const Yz=Uz*Xz-Wz*Vz;if(Yz<=0&&Uz>=0&&Wz<=0)return Sz=Uz/(Uz-Wz),Oz.copy(Pz).addScaledVector(xy,Sz);Cy.subVectors(Nz,Rz);const Zz=xy.dot(Cy),$z=yy.dot(Cy);if($z>=0&&Zz<=$z)return Oz.copy(Rz);const _z=Zz*Vz-Uz*$z;if(_z<=0&&Vz>=0&&$z<=0)return Tz=Vz/(Vz-$z),Oz.copy(Pz).addScaledVector(yy,Tz);const aA=Wz*$z-Zz*Xz;if(aA<=0&&Xz-Wz>=0&&Zz-$z>=0)return zy.subVectors(Rz,Qz),Tz=(Xz-Wz)/(Xz-Wz+(Zz-$z)),Oz.copy(Qz).addScaledVector(zy,Tz);const bA=1/(aA+_z+Yz);return Sz=_z*bA,Tz=Yz*bA,Oz.copy(Pz).addScaledVector(xy,Sz).addScaledVector(yy,Tz)}equals(cA){return cA.a.equals(this.a)&&cA.b.equals(this.b)&&cA.c.equals(this.c)}}let dA=0;class eA extends h{constructor(){super(),Object.defineProperty(this,"id",{value:dA++}),this.uuid=E(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(fA){this._alphaTest>0!=fA>0&&this.version++,this._alphaTest=fA}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(gA){if(void 0!==gA)for(const hA in gA){const iA=gA[hA];if(void 0===iA){console.warn("THREE.Material: '"+hA+"' parameter is undefined.");continue}if("shading"===hA){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===iA;continue}const jA=this[hA];if(void 0===jA){console.warn("THREE."+this.type+": '"+hA+"' is not a property of this material.");continue}jA&&jA.isColor?jA.set(iA):jA&&jA.isVector3&&iA&&iA.isVector3?jA.copy(iA):this[hA]=iA}}toJSON(kA){const lA=void 0===kA||"string"==typeof kA;lA&&(kA={textures:{},images:{}});const mA={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function nA(a){const b=[];for(const c in a){const d=a[c];delete d.metadata,b.push(d)}return b}if(mA.uuid=this.uuid,mA.type=this.type,""!==this.name&&(mA.name=this.name),this.color&&this.color.isColor&&(mA.color=this.color.getHex()),void 0!==this.roughness&&(mA.roughness=this.roughness),void 0!==this.metalness&&(mA.metalness=this.metalness),void 0!==this.sheen&&(mA.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(mA.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(mA.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(mA.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(mA.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(mA.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(mA.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(mA.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(mA.shininess=this.shininess),void 0!==this.clearcoat&&(mA.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(mA.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(mA.clearcoatMap=this.clearcoatMap.toJSON(kA).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(mA.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(kA).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(mA.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(kA).uuid,mA.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(mA.map=this.map.toJSON(kA).uuid),this.matcap&&this.matcap.isTexture&&(mA.matcap=this.matcap.toJSON(kA).uuid),this.alphaMap&&this.alphaMap.isTexture&&(mA.alphaMap=this.alphaMap.toJSON(kA).uuid),this.lightMap&&this.lightMap.isTexture&&(mA.lightMap=this.lightMap.toJSON(kA).uuid,mA.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(mA.aoMap=this.aoMap.toJSON(kA).uuid,mA.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(mA.bumpMap=this.bumpMap.toJSON(kA).uuid,mA.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(mA.normalMap=this.normalMap.toJSON(kA).uuid,mA.normalMapType=this.normalMapType,mA.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(mA.displacementMap=this.displacementMap.toJSON(kA).uuid,mA.displacementScale=this.displacementScale,mA.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(mA.roughnessMap=this.roughnessMap.toJSON(kA).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(mA.metalnessMap=this.metalnessMap.toJSON(kA).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(mA.emissiveMap=this.emissiveMap.toJSON(kA).uuid),this.specularMap&&this.specularMap.isTexture&&(mA.specularMap=this.specularMap.toJSON(kA).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(mA.specularIntensityMap=this.specularIntensityMap.toJSON(kA).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(mA.specularColorMap=this.specularColorMap.toJSON(kA).uuid),this.envMap&&this.envMap.isTexture&&(mA.envMap=this.envMap.toJSON(kA).uuid,void 0!==this.combine&&(mA.combine=this.combine)),void 0!==this.envMapIntensity&&(mA.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(mA.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(mA.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(mA.gradientMap=this.gradientMap.toJSON(kA).uuid),void 0!==this.transmission&&(mA.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(mA.transmissionMap=this.transmissionMap.toJSON(kA).uuid),void 0!==this.thickness&&(mA.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(mA.thicknessMap=this.thicknessMap.toJSON(kA).uuid),void 0!==this.attenuationDistance&&(mA.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(mA.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(mA.size=this.size),null!==this.shadowSide&&(mA.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(mA.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(mA.blending=this.blending),0!==this.side&&(mA.side=this.side),this.vertexColors&&(mA.vertexColors=!0),this.opacity<1&&(mA.opacity=this.opacity),!0===this.transparent&&(mA.transparent=this.transparent),mA.depthFunc=this.depthFunc,mA.depthTest=this.depthTest,mA.depthWrite=this.depthWrite,mA.colorWrite=this.colorWrite,mA.stencilWrite=this.stencilWrite,mA.stencilWriteMask=this.stencilWriteMask,mA.stencilFunc=this.stencilFunc,mA.stencilRef=this.stencilRef,mA.stencilFuncMask=this.stencilFuncMask,mA.stencilFail=this.stencilFail,mA.stencilZFail=this.stencilZFail,mA.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(mA.rotation=this.rotation),!0===this.polygonOffset&&(mA.polygonOffset=!0),0!==this.polygonOffsetFactor&&(mA.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(mA.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(mA.linewidth=this.linewidth),void 0!==this.dashSize&&(mA.dashSize=this.dashSize),void 0!==this.gapSize&&(mA.gapSize=this.gapSize),void 0!==this.scale&&(mA.scale=this.scale),!0===this.dithering&&(mA.dithering=!0),this.alphaTest>0&&(mA.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(mA.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(mA.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(mA.wireframe=this.wireframe),this.wireframeLinewidth>1&&(mA.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(mA.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(mA.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(mA.flatShading=this.flatShading),!1===this.visible&&(mA.visible=!1),!1===this.toneMapped&&(mA.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(mA.userData=this.userData),lA){const oA=nA(kA.textures),pA=nA(kA.images);oA.length>0&&(mA.textures=oA),pA.length>0&&(mA.images=pA)}return mA}clone(){return new this.constructor().copy(this)}copy(qA){this.name=qA.name,this.fog=qA.fog,this.blending=qA.blending,this.side=qA.side,this.vertexColors=qA.vertexColors,this.opacity=qA.opacity,this.transparent=qA.transparent,this.blendSrc=qA.blendSrc,this.blendDst=qA.blendDst,this.blendEquation=qA.blendEquation,this.blendSrcAlpha=qA.blendSrcAlpha,this.blendDstAlpha=qA.blendDstAlpha,this.blendEquationAlpha=qA.blendEquationAlpha,this.depthFunc=qA.depthFunc,this.depthTest=qA.depthTest,this.depthWrite=qA.depthWrite,this.stencilWriteMask=qA.stencilWriteMask,this.stencilFunc=qA.stencilFunc,this.stencilRef=qA.stencilRef,this.stencilFuncMask=qA.stencilFuncMask,this.stencilFail=qA.stencilFail,this.stencilZFail=qA.stencilZFail,this.stencilZPass=qA.stencilZPass,this.stencilWrite=qA.stencilWrite;const rA=qA.clippingPlanes;let sA=null;if(null!==rA){const tA=rA.length;sA=new Array(tA);for(let uA=0;uA!==tA;++uA)sA[uA]=rA[uA].clone()}return this.clippingPlanes=sA,this.clipIntersection=qA.clipIntersection,this.clipShadows=qA.clipShadows,this.shadowSide=qA.shadowSide,this.colorWrite=qA.colorWrite,this.precision=qA.precision,this.polygonOffset=qA.polygonOffset,this.polygonOffsetFactor=qA.polygonOffsetFactor,this.polygonOffsetUnits=qA.polygonOffsetUnits,this.dithering=qA.dithering,this.alphaTest=qA.alphaTest,this.alphaToCoverage=qA.alphaToCoverage,this.premultipliedAlpha=qA.premultipliedAlpha,this.visible=qA.visible,this.toneMapped=qA.toneMapped,this.userData=JSON.parse(JSON.stringify(qA.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(vA){!0===vA&&this.version++}}eA.prototype.isMaterial=!0;class wA extends eA{constructor(xA){super(),this.type="MeshBasicMaterial",this.color=new ld(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(xA)}copy(yA){return super.copy(yA),this.color.copy(yA.color),this.map=yA.map,this.lightMap=yA.lightMap,this.lightMapIntensity=yA.lightMapIntensity,this.aoMap=yA.aoMap,this.aoMapIntensity=yA.aoMapIntensity,this.specularMap=yA.specularMap,this.alphaMap=yA.alphaMap,this.envMap=yA.envMap,this.combine=yA.combine,this.reflectivity=yA.reflectivity,this.refractionRatio=yA.refractionRatio,this.wireframe=yA.wireframe,this.wireframeLinewidth=yA.wireframeLinewidth,this.wireframeLinecap=yA.wireframeLinecap,this.wireframeLinejoin=yA.wireframeLinejoin,this}}wA.prototype.isMeshBasicMaterial=!0;const zA=new Xj(),AA=new L();class BA{constructor(CA,DA,EA){if(Array.isArray(CA))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=CA,this.itemSize=DA,this.count=void 0!==CA?CA.length/DA:0,this.normalized=!0===EA,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(FA){!0===FA&&this.version++}setUsage(GA){return this.usage=GA,this}copy(HA){return this.name=HA.name,this.array=new HA.array.constructor(HA.array),this.itemSize=HA.itemSize,this.count=HA.count,this.normalized=HA.normalized,this.usage=HA.usage,this}copyAt(IA,JA,KA){IA*=this.itemSize,KA*=JA.itemSize;for(let LA=0,MA=this.itemSize;LA<MA;LA++)this.array[IA+LA]=JA.array[KA+LA];return this}copyArray(NA){return this.array.set(NA),this}copyColorsArray(OA){const PA=this.array;let QA=0;for(let RA=0,SA=OA.length;RA<SA;RA++){let TA=OA[RA];void 0===TA&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",RA),TA=new ld()),PA[QA++]=TA.r,PA[QA++]=TA.g,PA[QA++]=TA.b}return this}copyVector2sArray(UA){const VA=this.array;let WA=0;for(let XA=0,YA=UA.length;XA<YA;XA++){let ZA=UA[XA];void 0===ZA&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",XA),ZA=new L()),VA[WA++]=ZA.x,VA[WA++]=ZA.y}return this}copyVector3sArray($A){const _A=this.array;let aB=0;for(let bB=0,cB=$A.length;bB<cB;bB++){let dB=$A[bB];void 0===dB&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",bB),dB=new Xj()),_A[aB++]=dB.x,_A[aB++]=dB.y,_A[aB++]=dB.z}return this}copyVector4sArray(eB){const fB=this.array;let gB=0;for(let hB=0,iB=eB.length;hB<iB;hB++){let jB=eB[hB];void 0===jB&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",hB),jB=new hf()),fB[gB++]=jB.x,fB[gB++]=jB.y,fB[gB++]=jB.z,fB[gB++]=jB.w}return this}applyMatrix3(kB){if(2===this.itemSize)for(let lB=0,mB=this.count;lB<mB;lB++)AA.fromBufferAttribute(this,lB),AA.applyMatrix3(kB),this.setXY(lB,AA.x,AA.y);else if(3===this.itemSize)for(let nB=0,oB=this.count;nB<oB;nB++)zA.fromBufferAttribute(this,nB),zA.applyMatrix3(kB),this.setXYZ(nB,zA.x,zA.y,zA.z);return this}applyMatrix4(pB){for(let qB=0,rB=this.count;qB<rB;qB++)zA.x=this.getX(qB),zA.y=this.getY(qB),zA.z=this.getZ(qB),zA.applyMatrix4(pB),this.setXYZ(qB,zA.x,zA.y,zA.z);return this}applyNormalMatrix(sB){for(let tB=0,uB=this.count;tB<uB;tB++)zA.x=this.getX(tB),zA.y=this.getY(tB),zA.z=this.getZ(tB),zA.applyNormalMatrix(sB),this.setXYZ(tB,zA.x,zA.y,zA.z);return this}transformDirection(vB){for(let wB=0,xB=this.count;wB<xB;wB++)zA.x=this.getX(wB),zA.y=this.getY(wB),zA.z=this.getZ(wB),zA.transformDirection(vB),this.setXYZ(wB,zA.x,zA.y,zA.z);return this}set(yB,zB=0){return this.array.set(yB,zB),this}getX(AB){return this.array[AB*this.itemSize]}setX(BB,CB){return this.array[BB*this.itemSize]=CB,this}getY(DB){return this.array[DB*this.itemSize+1]}setY(EB,FB){return this.array[EB*this.itemSize+1]=FB,this}getZ(GB){return this.array[GB*this.itemSize+2]}setZ(HB,IB){return this.array[HB*this.itemSize+2]=IB,this}getW(JB){return this.array[JB*this.itemSize+3]}setW(KB,LB){return this.array[KB*this.itemSize+3]=LB,this}setXY(MB,NB,OB){return MB*=this.itemSize,this.array[MB+0]=NB,this.array[MB+1]=OB,this}setXYZ(PB,QB,RB,SB){return PB*=this.itemSize,this.array[PB+0]=QB,this.array[PB+1]=RB,this.array[PB+2]=SB,this}setXYZW(TB,UB,VB,WB,XB){return TB*=this.itemSize,this.array[TB+0]=UB,this.array[TB+1]=VB,this.array[TB+2]=WB,this.array[TB+3]=XB,this}onUpload(YB){return this.onUploadCallback=YB,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const ZB={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(ZB.name=this.name),35044!==this.usage&&(ZB.usage=this.usage),(0!==this.updateRange.offset|| -1!==this.updateRange.count)&&(ZB.updateRange=this.updateRange),ZB}}BA.prototype.isBufferAttribute=!0;class $B extends BA{constructor(_B,aC,bC){super(new Uint16Array(_B),aC,bC)}}class cC extends BA{constructor(dC,eC,fC){super(new Uint32Array(dC),eC,fC)}}(class extends BA{constructor(gC,hC,iC){super(new Uint16Array(gC),hC,iC)}}).prototype.isFloat16BufferAttribute=!0;class jC extends BA{constructor(kC,lC,mC){super(new Float32Array(kC),lC,mC)}}let nC=0;const oC=new pq(),pC=new Aw(),qC=new Xj(),rC=new Bm(),sC=new Bm(),tC=new Xj();class uC extends h{constructor(){super(),Object.defineProperty(this,"id",{value:nC++}),this.uuid=E(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(vC){return Array.isArray(vC)?this.index=new(dd(vC)?cC:$B)(vC,1):this.index=vC,this}getAttribute(wC){return this.attributes[wC]}setAttribute(xC,yC){return this.attributes[xC]=yC,this}deleteAttribute(zC){return delete this.attributes[zC],this}hasAttribute(AC){return void 0!==this.attributes[AC]}addGroup(BC,CC,DC=0){this.groups.push({start:BC,count:CC,materialIndex:DC})}clearGroups(){this.groups=[]}setDrawRange(EC,FC){this.drawRange.start=EC,this.drawRange.count=FC}applyMatrix4(GC){const HC=this.attributes.position;void 0!==HC&&(HC.applyMatrix4(GC),HC.needsUpdate=!0);const IC=this.attributes.normal;if(void 0!==IC){const JC=new ab().getNormalMatrix(GC);IC.applyNormalMatrix(JC),IC.needsUpdate=!0}const KC=this.attributes.tangent;return void 0!==KC&&(KC.transformDirection(GC),KC.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(LC){return oC.makeRotationFromQuaternion(LC),this.applyMatrix4(oC),this}rotateX(MC){return oC.makeRotationX(MC),this.applyMatrix4(oC),this}rotateY(NC){return oC.makeRotationY(NC),this.applyMatrix4(oC),this}rotateZ(OC){return oC.makeRotationZ(OC),this.applyMatrix4(oC),this}translate(PC,QC,RC){return oC.makeTranslation(PC,QC,RC),this.applyMatrix4(oC),this}scale(SC,TC,UC){return oC.makeScale(SC,TC,UC),this.applyMatrix4(oC),this}lookAt(VC){return pC.lookAt(VC),pC.updateMatrix(),this.applyMatrix4(pC.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(qC).negate(),this.translate(qC.x,qC.y,qC.z),this}setFromPoints(WC){const XC=[];for(let YC=0,ZC=WC.length;YC<ZC;YC++){const $C=WC[YC];XC.push($C.x,$C.y,$C.z||0)}return this.setAttribute("position",new jC(XC,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Bm());const _C=this.attributes.position,aD=this.morphAttributes.position;if(_C&&_C.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".",this),this.boundingBox.set(new Xj(-1/0,-1/0,-1/0),new Xj(Infinity,Infinity,Infinity));return}if(void 0!==_C){if(this.boundingBox.setFromBufferAttribute(_C),aD)for(let bD=0,cD=aD.length;bD<cD;bD++){const dD=aD[bD];rC.setFromBufferAttribute(dD),this.morphTargetsRelative?(tC.addVectors(this.boundingBox.min,rC.min),this.boundingBox.expandByPoint(tC),tC.addVectors(this.boundingBox.max,rC.max),this.boundingBox.expandByPoint(tC)):(this.boundingBox.expandByPoint(rC.min),this.boundingBox.expandByPoint(rC.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error("THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.",this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new mo());const eD=this.attributes.position,fD=this.morphAttributes.position;if(eD&&eD.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".",this),this.boundingSphere.set(new Xj(),1/0);return}if(eD){const gD=this.boundingSphere.center;if(rC.setFromBufferAttribute(eD),fD)for(let hD=0,iD=fD.length;hD<iD;hD++){const jD=fD[hD];sC.setFromBufferAttribute(jD),this.morphTargetsRelative?(tC.addVectors(rC.min,sC.min),rC.expandByPoint(tC),tC.addVectors(rC.max,sC.max),rC.expandByPoint(tC)):(rC.expandByPoint(sC.min),rC.expandByPoint(sC.max))}rC.getCenter(gD);let kD=0;for(let lD=0,mD=eD.count;lD<mD;lD++)tC.fromBufferAttribute(eD,lD),kD=Math.max(kD,gD.distanceToSquared(tC));if(fD)for(let nD=0,oD=fD.length;nD<oD;nD++){const pD=fD[nD],qD=this.morphTargetsRelative;for(let rD=0,sD=pD.count;rD<sD;rD++)tC.fromBufferAttribute(pD,rD),qD&&(qC.fromBufferAttribute(eD,rD),tC.add(qC)),kD=Math.max(kD,gD.distanceToSquared(tC))}this.boundingSphere.radius=Math.sqrt(kD),isNaN(this.boundingSphere.radius)&&console.error("THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.",this)}}computeTangents(){const tD=this.index,uD=this.attributes;if(null===tD|| void 0===uD.position|| void 0===uD.normal|| void 0===uD.uv){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const vD=tD.array,wD=uD.position.array,xD=uD.normal.array,yD=uD.uv.array,zD=wD.length/3;void 0===uD.tangent&&this.setAttribute("tangent",new BA(new Float32Array(4*zD),4));const AD=uD.tangent.array,BD=[],CD=[];for(let DD=0;DD<zD;DD++)BD[DD]=new Xj(),CD[DD]=new Xj();const ED=new Xj(),FD=new Xj(),GD=new Xj(),HD=new L(),ID=new L(),JD=new L(),KD=new Xj(),LD=new Xj();function MD(a,b,c){ED.fromArray(wD,3*a),FD.fromArray(wD,3*b),GD.fromArray(wD,3*c),HD.fromArray(yD,2*a),ID.fromArray(yD,2*b),JD.fromArray(yD,2*c),FD.sub(ED),GD.sub(ED),ID.sub(HD),JD.sub(HD);const d=1/(ID.x*JD.y-JD.x*ID.y);isFinite(d)&&(KD.copy(FD).multiplyScalar(JD.y).addScaledVector(GD,-ID.y).multiplyScalar(d),LD.copy(GD).multiplyScalar(ID.x).addScaledVector(FD,-JD.x).multiplyScalar(d),BD[a].add(KD),BD[b].add(KD),BD[c].add(KD),CD[a].add(LD),CD[b].add(LD),CD[c].add(LD))}let ND=this.groups;0===ND.length&&(ND=[{start:0,count:vD.length}]);for(let OD=0,PD=ND.length;OD<PD;++OD){const QD=ND[OD],RD=QD.start,SD=QD.count;for(let TD=RD,UD=RD+SD;TD<UD;TD+=3)MD(vD[TD+0],vD[TD+1],vD[TD+2])}const VD=new Xj(),WD=new Xj(),XD=new Xj(),YD=new Xj();function ZD(a){XD.fromArray(xD,3*a),YD.copy(XD);const b=BD[a];VD.copy(b),VD.sub(XD.multiplyScalar(XD.dot(b))).normalize(),WD.crossVectors(YD,b);const c=WD.dot(CD[a]);AD[4*a]=VD.x,AD[4*a+1]=VD.y,AD[4*a+2]=VD.z,AD[4*a+3]=c<0?-1:1}for(let $D=0,_D=ND.length;$D<_D;++$D){const aE=ND[$D],bE=aE.start,cE=aE.count;for(let dE=bE,eE=bE+cE;dE<eE;dE+=3)ZD(vD[dE+0]),ZD(vD[dE+1]),ZD(vD[dE+2])}}computeVertexNormals(){const fE=this.index,gE=this.getAttribute("position");if(void 0!==gE){let hE=this.getAttribute("normal");if(void 0===hE)hE=new BA(new Float32Array(3*gE.count),3),this.setAttribute("normal",hE);else for(let iE=0,jE=hE.count;iE<jE;iE++)hE.setXYZ(iE,0,0,0);const kE=new Xj(),lE=new Xj(),mE=new Xj(),nE=new Xj(),oE=new Xj(),pE=new Xj(),qE=new Xj(),rE=new Xj();if(fE)for(let sE=0,tE=fE.count;sE<tE;sE+=3){const uE=fE.getX(sE+0),vE=fE.getX(sE+1),wE=fE.getX(sE+2);kE.fromBufferAttribute(gE,uE),lE.fromBufferAttribute(gE,vE),mE.fromBufferAttribute(gE,wE),qE.subVectors(mE,lE),rE.subVectors(kE,lE),qE.cross(rE),nE.fromBufferAttribute(hE,uE),oE.fromBufferAttribute(hE,vE),pE.fromBufferAttribute(hE,wE),nE.add(qE),oE.add(qE),pE.add(qE),hE.setXYZ(uE,nE.x,nE.y,nE.z),hE.setXYZ(vE,oE.x,oE.y,oE.z),hE.setXYZ(wE,pE.x,pE.y,pE.z)}else for(let xE=0,yE=gE.count;xE<yE;xE+=3)kE.fromBufferAttribute(gE,xE+0),lE.fromBufferAttribute(gE,xE+1),mE.fromBufferAttribute(gE,xE+2),qE.subVectors(mE,lE),rE.subVectors(kE,lE),qE.cross(rE),hE.setXYZ(xE+0,qE.x,qE.y,qE.z),hE.setXYZ(xE+1,qE.x,qE.y,qE.z),hE.setXYZ(xE+2,qE.x,qE.y,qE.z);this.normalizeNormals(),hE.needsUpdate=!0}}merge(zE,AE){if(!(zE&&zE.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",zE);return}void 0===AE&&(AE=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const BE=this.attributes;for(const CE in BE){if(void 0===zE.attributes[CE])continue;const DE=BE[CE],EE=DE.array,FE=zE.attributes[CE],GE=FE.array,HE=FE.itemSize*AE,IE=Math.min(GE.length,EE.length-HE);for(let JE=0,KE=HE;JE<IE;JE++,KE++)EE[KE]=GE[JE]}return this}normalizeNormals(){const LE=this.attributes.normal;for(let ME=0,NE=LE.count;ME<NE;ME++)tC.fromBufferAttribute(LE,ME),tC.normalize(),LE.setXYZ(ME,tC.x,tC.y,tC.z)}toNonIndexed(){function OE(a,b){const c=a.array,d=a.itemSize,e=a.normalized,f=new c.constructor(b.length*d);let g=0,h=0;for(let i=0,j=b.length;i<j;i++){g=a.isInterleavedBufferAttribute?b[i]*a.data.stride+a.offset:b[i]*d;for(let k=0;k<d;k++)f[h++]=c[g++]}return new BA(f,d,e)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const PE=new uC(),QE=this.index.array,RE=this.attributes;for(const SE in RE){const TE=RE[SE],UE=OE(TE,QE);PE.setAttribute(SE,UE)}const VE=this.morphAttributes;for(const WE in VE){const XE=[],YE=VE[WE];for(let ZE=0,$E=YE.length;ZE<$E;ZE++){const _E=YE[ZE],aF=OE(_E,QE);XE.push(aF)}PE.morphAttributes[WE]=XE}PE.morphTargetsRelative=this.morphTargetsRelative;const bF=this.groups;for(let cF=0,dF=bF.length;cF<dF;cF++){const eF=bF[cF];PE.addGroup(eF.start,eF.count,eF.materialIndex)}return PE}toJSON(){const fF={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(fF.uuid=this.uuid,fF.type=this.type,""!==this.name&&(fF.name=this.name),Object.keys(this.userData).length>0&&(fF.userData=this.userData),void 0!==this.parameters){const gF=this.parameters;for(const hF in gF)void 0!==gF[hF]&&(fF[hF]=gF[hF]);return fF}fF.data={attributes:{}};const iF=this.index;null!==iF&&(fF.data.index={type:iF.array.constructor.name,array:Array.prototype.slice.call(iF.array)});const jF=this.attributes;for(const kF in jF){const lF=jF[kF];fF.data.attributes[kF]=lF.toJSON(fF.data)}const mF={};let nF=!1;for(const oF in this.morphAttributes){const pF=this.morphAttributes[oF],qF=[];for(let rF=0,sF=pF.length;rF<sF;rF++){const tF=pF[rF];qF.push(tF.toJSON(fF.data))}qF.length>0&&(mF[oF]=qF,nF=!0)}nF&&(fF.data.morphAttributes=mF,fF.data.morphTargetsRelative=this.morphTargetsRelative);const uF=this.groups;uF.length>0&&(fF.data.groups=JSON.parse(JSON.stringify(uF)));const vF=this.boundingSphere;return null!==vF&&(fF.data.boundingSphere={center:vF.center.toArray(),radius:vF.radius}),fF}clone(){return new this.constructor().copy(this)}copy(wF){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const xF={};this.name=wF.name;const yF=wF.index;null!==yF&&this.setIndex(yF.clone(xF));const zF=wF.attributes;for(const AF in zF){const BF=zF[AF];this.setAttribute(AF,BF.clone(xF))}const CF=wF.morphAttributes;for(const DF in CF){const EF=[],FF=CF[DF];for(let GF=0,HF=FF.length;GF<HF;GF++)EF.push(FF[GF].clone(xF));this.morphAttributes[DF]=EF}this.morphTargetsRelative=wF.morphTargetsRelative;const IF=wF.groups;for(let JF=0,KF=IF.length;JF<KF;JF++){const LF=IF[JF];this.addGroup(LF.start,LF.count,LF.materialIndex)}const MF=wF.boundingBox;null!==MF&&(this.boundingBox=MF.clone());const NF=wF.boundingSphere;return null!==NF&&(this.boundingSphere=NF.clone()),this.drawRange.start=wF.drawRange.start,this.drawRange.count=wF.drawRange.count,this.userData=wF.userData,void 0!==wF.parameters&&(this.parameters=Object.assign({},wF.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}uC.prototype.isBufferGeometry=!0;const OF=new pq(),PF=new Xo(),QF=new mo(),RF=new Xj(),SF=new Xj(),TF=new Xj(),UF=new Xj(),VF=new Xj(),WF=new Xj(),XF=new Xj(),YF=new Xj(),ZF=new Xj(),$F=new L(),_F=new L(),aG=new L(),bG=new Xj(),cG=new Xj();class dG extends Aw{constructor(eG=new uC(),fG=new wA()){super(),this.type="Mesh",this.geometry=eG,this.material=fG,this.updateMorphTargets()}copy(gG){return super.copy(gG),void 0!==gG.morphTargetInfluences&&(this.morphTargetInfluences=gG.morphTargetInfluences.slice()),void 0!==gG.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},gG.morphTargetDictionary)),this.material=gG.material,this.geometry=gG.geometry,this}updateMorphTargets(){const hG=this.geometry;if(hG.isBufferGeometry){const iG=hG.morphAttributes,jG=Object.keys(iG);if(jG.length>0){const kG=iG[jG[0]];if(void 0!==kG){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let lG=0,mG=kG.length;lG<mG;lG++){const nG=kG[lG].name||String(lG);this.morphTargetInfluences.push(0),this.morphTargetDictionary[nG]=lG}}}}else{const oG=hG.morphTargets;void 0!==oG&&oG.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(pG,qG){const rG=this.geometry,sG=this.material,tG=this.matrixWorld;if(void 0===sG)return;if(null===rG.boundingSphere&&rG.computeBoundingSphere(),QF.copy(rG.boundingSphere),QF.applyMatrix4(tG),!1===pG.ray.intersectsSphere(QF))return;if(OF.copy(tG).invert(),PF.copy(pG.ray).applyMatrix4(OF),null!==rG.boundingBox&& !1===PF.intersectsBox(rG.boundingBox))return;let uG;if(rG.isBufferGeometry){const vG=rG.index,wG=rG.attributes.position,xG=rG.morphAttributes.position,yG=rG.morphTargetsRelative,zG=rG.attributes.uv,AG=rG.attributes.uv2,BG=rG.groups,CG=rG.drawRange;if(null!==vG)if(Array.isArray(sG))for(let DG=0,EG=BG.length;DG<EG;DG++){const FG=BG[DG],GG=sG[FG.materialIndex],HG=Math.max(FG.start,CG.start),IG=Math.min(vG.count,Math.min(FG.start+FG.count,CG.start+CG.count));for(let JG=HG,KG=IG;JG<KG;JG+=3){const LG=vG.getX(JG),MG=vG.getX(JG+1),NG=vG.getX(JG+2);(uG=lH(this,GG,pG,PF,wG,xG,yG,zG,AG,LG,MG,NG))&&(uG.faceIndex=Math.floor(JG/3),uG.face.materialIndex=FG.materialIndex,qG.push(uG))}}else{const OG=Math.max(0,CG.start),PG=Math.min(vG.count,CG.start+CG.count);for(let QG=OG,RG=PG;QG<RG;QG+=3){const SG=vG.getX(QG),TG=vG.getX(QG+1),UG=vG.getX(QG+2);(uG=lH(this,sG,pG,PF,wG,xG,yG,zG,AG,SG,TG,UG))&&(uG.faceIndex=Math.floor(QG/3),qG.push(uG))}}else if(void 0!==wG)if(Array.isArray(sG))for(let VG=0,WG=BG.length;VG<WG;VG++){const XG=BG[VG],YG=sG[XG.materialIndex],ZG=Math.max(XG.start,CG.start),$G=Math.min(wG.count,Math.min(XG.start+XG.count,CG.start+CG.count));for(let _G=ZG,aH=$G;_G<aH;_G+=3){const bH=_G,cH=_G+1,dH=_G+2;(uG=lH(this,YG,pG,PF,wG,xG,yG,zG,AG,bH,cH,dH))&&(uG.faceIndex=Math.floor(_G/3),uG.face.materialIndex=XG.materialIndex,qG.push(uG))}}else{const eH=Math.max(0,CG.start),fH=Math.min(wG.count,CG.start+CG.count);for(let gH=eH,hH=fH;gH<hH;gH+=3){const iH=gH,jH=gH+1,kH=gH+2;(uG=lH(this,sG,pG,PF,wG,xG,yG,zG,AG,iH,jH,kH))&&(uG.faceIndex=Math.floor(gH/3),qG.push(uG))}}}else rG.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function lH(a,b,c,d,e,g,h,i,j,k,l,m){RF.fromBufferAttribute(e,k),SF.fromBufferAttribute(e,l),TF.fromBufferAttribute(e,m);const n=a.morphTargetInfluences;if(g&&n){XF.set(0,0,0),YF.set(0,0,0),ZF.set(0,0,0);for(let o=0,p=g.length;o<p;o++){const q=n[o],r=g[o];0!==q&&(UF.fromBufferAttribute(r,k),VF.fromBufferAttribute(r,l),WF.fromBufferAttribute(r,m),h?(XF.addScaledVector(UF,q),YF.addScaledVector(VF,q),ZF.addScaledVector(WF,q)):(XF.addScaledVector(UF.sub(RF),q),YF.addScaledVector(VF.sub(SF),q),ZF.addScaledVector(WF.sub(TF),q)))}RF.add(XF),SF.add(YF),TF.add(ZF)}a.isSkinnedMesh&&(a.boneTransform(k,RF),a.boneTransform(l,SF),a.boneTransform(m,TF));const s=function(a,b,c,d,e,g,h,i){if(null===(b.side===f?d.intersectTriangle(h,g,e,!0,i):d.intersectTriangle(e,g,h,2!==b.side,i)))return null;cG.copy(i),cG.applyMatrix4(a.matrixWorld);const j=c.ray.origin.distanceTo(cG);return j<c.near||j>c.far?null:{distance:j,point:cG.clone(),object:a}}(a,b,c,d,RF,SF,TF,bG);if(s){i&&($F.fromBufferAttribute(i,k),_F.fromBufferAttribute(i,l),aG.fromBufferAttribute(i,m),s.uv=Dy.getUV(bG,RF,SF,TF,$F,_F,aG,new L())),j&&($F.fromBufferAttribute(j,k),_F.fromBufferAttribute(j,l),aG.fromBufferAttribute(j,m),s.uv2=Dy.getUV(bG,RF,SF,TF,$F,_F,aG,new L()));const t={a:k,b:l,c:m,normal:new Xj(),materialIndex:0};Dy.getNormal(RF,SF,TF,t.normal),s.face=t}return s}dG.prototype.isMesh=!0;class mH extends uC{constructor(nH=1,oH=1,pH=1,qH=1,rH=1,sH=1){super(),this.type="BoxGeometry",this.parameters={width:nH,height:oH,depth:pH,widthSegments:qH,heightSegments:rH,depthSegments:sH};const tH=this;qH=Math.floor(qH),rH=Math.floor(rH),sH=Math.floor(sH);const uH=[],vH=[],wH=[],xH=[];let yH=0,zH=0;function AH(a,b,c,d,e,f,g,h,i,j,k){const l=f/i,m=g/j,n=f/2,o=g/2,p=h/2,q=i+1,r=j+1;let s=0,t=0;const u=new Xj();for(let v=0;v<r;v++){const w=v*m-o;for(let x=0;x<q;x++){const y=x*l-n;u[a]=y*d,u[b]=w*e,u[c]=p,vH.push(u.x,u.y,u.z),u[a]=0,u[b]=0,u[c]=h>0?1:-1,wH.push(u.x,u.y,u.z),xH.push(x/i),xH.push(1-v/j),s+=1}}for(let z=0;z<j;z++)for(let A=0;A<i;A++){const B=yH+A+q*z,C=yH+A+q*(z+1),D=yH+(A+1)+q*(z+1),E=yH+(A+1)+q*z;uH.push(B,C,E),uH.push(C,D,E),t+=6}tH.addGroup(zH,t,k),zH+=t,yH+=s}AH("z","y","x",-1,-1,pH,oH,nH,sH,rH,0),AH("z","y","x",1,-1,pH,oH,-nH,sH,rH,1),AH("x","z","y",1,1,nH,pH,oH,qH,sH,2),AH("x","z","y",1,-1,nH,pH,-oH,qH,sH,3),AH("x","y","z",1,-1,nH,oH,pH,qH,rH,4),AH("x","y","z",-1,-1,nH,oH,-pH,qH,rH,5),this.setIndex(uH),this.setAttribute("position",new jC(vH,3)),this.setAttribute("normal",new jC(wH,3)),this.setAttribute("uv",new jC(xH,2))}static fromJSON(BH){return new mH(BH.width,BH.height,BH.depth,BH.widthSegments,BH.heightSegments,BH.depthSegments)}}function CH(a){const b={};for(const c in a)for(const d in b[c]={},a[c]){const e=a[c][d];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture||e.isQuaternion)?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}return b}function DH(a){const b={};for(let c=0;c<a.length;c++){const d=CH(a[c]);for(const e in d)b[e]=d[e]}return b}const EH={clone:CH,merge:DH};class FH extends eA{constructor(GH){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==GH&&(void 0!==GH.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(GH))}copy(HH){return super.copy(HH),this.fragmentShader=HH.fragmentShader,this.vertexShader=HH.vertexShader,this.uniforms=CH(HH.uniforms),this.defines=Object.assign({},HH.defines),this.wireframe=HH.wireframe,this.wireframeLinewidth=HH.wireframeLinewidth,this.lights=HH.lights,this.clipping=HH.clipping,this.extensions=Object.assign({},HH.extensions),this.glslVersion=HH.glslVersion,this}toJSON(IH){const JH=super.toJSON(IH);for(const KH in JH.glslVersion=this.glslVersion,JH.uniforms={},this.uniforms){const LH=this.uniforms[KH],MH=LH.value;MH&&MH.isTexture?JH.uniforms[KH]={type:"t",value:MH.toJSON(IH).uuid}:MH&&MH.isColor?JH.uniforms[KH]={type:"c",value:MH.getHex()}:MH&&MH.isVector2?JH.uniforms[KH]={type:"v2",value:MH.toArray()}:MH&&MH.isVector3?JH.uniforms[KH]={type:"v3",value:MH.toArray()}:MH&&MH.isVector4?JH.uniforms[KH]={type:"v4",value:MH.toArray()}:MH&&MH.isMatrix3?JH.uniforms[KH]={type:"m3",value:MH.toArray()}:MH&&MH.isMatrix4?JH.uniforms[KH]={type:"m4",value:MH.toArray()}:JH.uniforms[KH]={value:MH}}Object.keys(this.defines).length>0&&(JH.defines=this.defines),JH.vertexShader=this.vertexShader,JH.fragmentShader=this.fragmentShader;const NH={};for(const OH in this.extensions)!0===this.extensions[OH]&&(NH[OH]=!0);return Object.keys(NH).length>0&&(JH.extensions=NH),JH}}FH.prototype.isShaderMaterial=!0;class PH extends Aw{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new pq(),this.projectionMatrix=new pq(),this.projectionMatrixInverse=new pq()}copy(QH,RH){return super.copy(QH,RH),this.matrixWorldInverse.copy(QH.matrixWorldInverse),this.projectionMatrix.copy(QH.projectionMatrix),this.projectionMatrixInverse.copy(QH.projectionMatrixInverse),this}getWorldDirection(SH){this.updateWorldMatrix(!0,!1);const TH=this.matrixWorld.elements;return SH.set(-TH[8],-TH[9],-TH[10]).normalize()}updateMatrixWorld(UH){super.updateMatrixWorld(UH),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(VH,WH){super.updateWorldMatrix(VH,WH),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}PH.prototype.isCamera=!0;class XH extends PH{constructor(YH=50,ZH=1,$H=0.1,_H=2000){super(),this.type="PerspectiveCamera",this.fov=YH,this.zoom=1,this.near=$H,this.far=_H,this.focus=10,this.aspect=ZH,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(aI,bI){return super.copy(aI,bI),this.fov=aI.fov,this.zoom=aI.zoom,this.near=aI.near,this.far=aI.far,this.focus=aI.focus,this.aspect=aI.aspect,this.view=null===aI.view?null:Object.assign({},aI.view),this.filmGauge=aI.filmGauge,this.filmOffset=aI.filmOffset,this}setFocalLength(cI){const dI=0.5*this.getFilmHeight()/cI;this.fov=2*D*Math.atan(dI),this.updateProjectionMatrix()}getFocalLength(){const eI=Math.tan(0.5*C*this.fov);return 0.5*this.getFilmHeight()/eI}getEffectiveFOV(){return 2*D*Math.atan(Math.tan(0.5*C*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(fI,gI,hI,iI,jI,kI){this.aspect=fI/gI,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=fI,this.view.fullHeight=gI,this.view.offsetX=hI,this.view.offsetY=iI,this.view.width=jI,this.view.height=kI,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const lI=this.near;let mI=lI*Math.tan(0.5*C*this.fov)/this.zoom,nI=2*mI,oI=this.aspect*nI,pI=-0.5*oI;const qI=this.view;if(null!==this.view&&this.view.enabled){const rI=qI.fullWidth,sI=qI.fullHeight;pI+=qI.offsetX*oI/rI,mI-=qI.offsetY*nI/sI,oI*=qI.width/rI,nI*=qI.height/sI}const tI=this.filmOffset;0!==tI&&(pI+=lI*tI/this.getFilmWidth()),this.projectionMatrix.makePerspective(pI,pI+oI,mI,mI-nI,lI,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(uI){const vI=super.toJSON(uI);return vI.object.fov=this.fov,vI.object.zoom=this.zoom,vI.object.near=this.near,vI.object.far=this.far,vI.object.focus=this.focus,vI.object.aspect=this.aspect,null!==this.view&&(vI.object.view=Object.assign({},this.view)),vI.object.filmGauge=this.filmGauge,vI.object.filmOffset=this.filmOffset,vI}}XH.prototype.isPerspectiveCamera=!0;class wI extends Aw{constructor(xI,yI,zI){if(super(),this.type="CubeCamera",!0!==zI.isWebGLCubeRenderTarget){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=zI;const AI=new XH(90,1,xI,yI);AI.layers=this.layers,AI.up.set(0,-1,0),AI.lookAt(new Xj(1,0,0)),this.add(AI);const BI=new XH(90,1,xI,yI);BI.layers=this.layers,BI.up.set(0,-1,0),BI.lookAt(new Xj(-1,0,0)),this.add(BI);const CI=new XH(90,1,xI,yI);CI.layers=this.layers,CI.up.set(0,0,1),CI.lookAt(new Xj(0,1,0)),this.add(CI);const DI=new XH(90,1,xI,yI);DI.layers=this.layers,DI.up.set(0,0,-1),DI.lookAt(new Xj(0,-1,0)),this.add(DI);const EI=new XH(90,1,xI,yI);EI.layers=this.layers,EI.up.set(0,-1,0),EI.lookAt(new Xj(0,0,1)),this.add(EI);const FI=new XH(90,1,xI,yI);FI.layers=this.layers,FI.up.set(0,-1,0),FI.lookAt(new Xj(0,0,-1)),this.add(FI)}update(GI,HI){null===this.parent&&this.updateMatrixWorld();const II=this.renderTarget,[JI,KI,LI,MI,NI,OI]=this.children,PI=GI.xr.enabled,QI=GI.getRenderTarget();GI.xr.enabled=!1;const RI=II.texture.generateMipmaps;II.texture.generateMipmaps=!1,GI.setRenderTarget(II,0),GI.render(HI,JI),GI.setRenderTarget(II,1),GI.render(HI,KI),GI.setRenderTarget(II,2),GI.render(HI,LI),GI.setRenderTarget(II,3),GI.render(HI,MI),GI.setRenderTarget(II,4),GI.render(HI,NI),II.texture.generateMipmaps=RI,GI.setRenderTarget(II,5),GI.render(HI,OI),GI.setRenderTarget(QI),GI.xr.enabled=PI,II.texture.needsPMREMUpdate=!0}}class SI extends Ne{constructor(TI,UI,VI,WI,XI,YI,ZI,$I,_I,aJ){super(TI=void 0!==TI?TI:[],UI=void 0!==UI?UI:301,VI,WI,XI,YI,ZI,$I,_I,aJ),this.flipY=!1}get images(){return this.image}set images(bJ){this.image=bJ}}SI.prototype.isCubeTexture=!0;class cJ extends Rg{constructor(dJ,eJ,fJ){Number.isInteger(eJ)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),eJ=fJ),super(dJ,dJ,eJ),eJ=eJ||{},this.texture=new SI(void 0,eJ.mapping,eJ.wrapS,eJ.wrapT,eJ.magFilter,eJ.minFilter,eJ.format,eJ.type,eJ.anisotropy,eJ.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==eJ.generateMipmaps&&eJ.generateMipmaps,this.texture.minFilter=void 0!==eJ.minFilter?eJ.minFilter:1006}fromEquirectangularTexture(gJ,hJ){this.texture.type=hJ.type,this.texture.format=1023,this.texture.encoding=hJ.encoding,this.texture.generateMipmaps=hJ.generateMipmaps,this.texture.minFilter=hJ.minFilter,this.texture.magFilter=hJ.magFilter;const iJ={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},jJ=new mH(5,5,5),kJ=new FH({name:"CubemapFromEquirect",uniforms:CH(iJ.uniforms),vertexShader:iJ.vertexShader,fragmentShader:iJ.fragmentShader,side:f,blending:0});kJ.uniforms.tEquirect.value=hJ;const lJ=new dG(jJ,kJ),mJ=hJ.minFilter;1008===hJ.minFilter&&(hJ.minFilter=1006);const nJ=new wI(1,10,this);return nJ.update(gJ,lJ),hJ.minFilter=mJ,lJ.geometry.dispose(),lJ.material.dispose(),this}clear(oJ,pJ,qJ,rJ){const sJ=oJ.getRenderTarget();for(let tJ=0;tJ<6;tJ++)oJ.setRenderTarget(this,tJ),oJ.clear(pJ,qJ,rJ);oJ.setRenderTarget(sJ)}}cJ.prototype.isWebGLCubeRenderTarget=!0;const uJ=new Xj(),vJ=new Xj(),wJ=new ab();class xJ{constructor(yJ=new Xj(1,0,0),zJ=0){this.normal=yJ,this.constant=zJ}set(AJ,BJ){return this.normal.copy(AJ),this.constant=BJ,this}setComponents(CJ,DJ,EJ,FJ){return this.normal.set(CJ,DJ,EJ),this.constant=FJ,this}setFromNormalAndCoplanarPoint(GJ,HJ){return this.normal.copy(GJ),this.constant=-HJ.dot(this.normal),this}setFromCoplanarPoints(IJ,JJ,KJ){const LJ=uJ.subVectors(KJ,JJ).cross(vJ.subVectors(IJ,JJ)).normalize();return this.setFromNormalAndCoplanarPoint(LJ,IJ),this}copy(MJ){return this.normal.copy(MJ.normal),this.constant=MJ.constant,this}normalize(){const NJ=1/this.normal.length();return this.normal.multiplyScalar(NJ),this.constant*=NJ,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(OJ){return this.normal.dot(OJ)+this.constant}distanceToSphere(PJ){return this.distanceToPoint(PJ.center)-PJ.radius}projectPoint(QJ,RJ){return RJ.copy(this.normal).multiplyScalar(-this.distanceToPoint(QJ)).add(QJ)}intersectLine(SJ,TJ){const UJ=SJ.delta(uJ),VJ=this.normal.dot(UJ);if(0===VJ)return 0===this.distanceToPoint(SJ.start)?TJ.copy(SJ.start):null;const WJ=-(SJ.start.dot(this.normal)+this.constant)/VJ;return WJ<0||WJ>1?null:TJ.copy(UJ).multiplyScalar(WJ).add(SJ.start)}intersectsLine(XJ){const YJ=this.distanceToPoint(XJ.start),ZJ=this.distanceToPoint(XJ.end);return YJ<0&&ZJ>0||ZJ<0&&YJ>0}intersectsBox($J){return $J.intersectsPlane(this)}intersectsSphere(_J){return _J.intersectsPlane(this)}coplanarPoint(aK){return aK.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(bK,cK){const dK=cK||wJ.getNormalMatrix(bK),eK=this.coplanarPoint(uJ).applyMatrix4(bK),fK=this.normal.applyMatrix3(dK).normalize();return this.constant=-eK.dot(fK),this}translate(gK){return this.constant-=gK.dot(this.normal),this}equals(hK){return hK.normal.equals(this.normal)&&hK.constant===this.constant}clone(){return new this.constructor().copy(this)}}xJ.prototype.isPlane=!0;const iK=new mo(),jK=new Xj();class kK{constructor(lK=new xJ(),mK=new xJ(),nK=new xJ(),oK=new xJ(),pK=new xJ(),qK=new xJ()){this.planes=[lK,mK,nK,oK,pK,qK]}set(rK,sK,tK,uK,vK,wK){const xK=this.planes;return xK[0].copy(rK),xK[1].copy(sK),xK[2].copy(tK),xK[3].copy(uK),xK[4].copy(vK),xK[5].copy(wK),this}copy(yK){const zK=this.planes;for(let AK=0;AK<6;AK++)zK[AK].copy(yK.planes[AK]);return this}setFromProjectionMatrix(BK){const CK=this.planes,DK=BK.elements,EK=DK[0],FK=DK[1],GK=DK[2],HK=DK[3],IK=DK[4],JK=DK[5],KK=DK[6],LK=DK[7],MK=DK[8],NK=DK[9],OK=DK[10],PK=DK[11],QK=DK[12],RK=DK[13],SK=DK[14],TK=DK[15];return CK[0].setComponents(HK-EK,LK-IK,PK-MK,TK-QK).normalize(),CK[1].setComponents(HK+EK,LK+IK,PK+MK,TK+QK).normalize(),CK[2].setComponents(HK+FK,LK+JK,PK+NK,TK+RK).normalize(),CK[3].setComponents(HK-FK,LK-JK,PK-NK,TK-RK).normalize(),CK[4].setComponents(HK-GK,LK-KK,PK-OK,TK-SK).normalize(),CK[5].setComponents(HK+GK,LK+KK,PK+OK,TK+SK).normalize(),this}intersectsObject(UK){const VK=UK.geometry;return null===VK.boundingSphere&&VK.computeBoundingSphere(),iK.copy(VK.boundingSphere).applyMatrix4(UK.matrixWorld),this.intersectsSphere(iK)}intersectsSprite(WK){return iK.center.set(0,0,0),iK.radius=0.7071067811865476,iK.applyMatrix4(WK.matrixWorld),this.intersectsSphere(iK)}intersectsSphere(XK){const YK=this.planes,ZK=XK.center,$K=-XK.radius;for(let _K=0;_K<6;_K++){const aL=YK[_K].distanceToPoint(ZK);if(aL<$K)return!1}return!0}intersectsBox(bL){const cL=this.planes;for(let dL=0;dL<6;dL++){const eL=cL[dL];if(jK.x=eL.normal.x>0?bL.max.x:bL.min.x,jK.y=eL.normal.y>0?bL.max.y:bL.min.y,jK.z=eL.normal.z>0?bL.max.z:bL.min.z,0>eL.distanceToPoint(jK))return!1}return!0}containsPoint(fL){const gL=this.planes;for(let hL=0;hL<6;hL++)if(0>gL[hL].distanceToPoint(fL))return!1;return!0}clone(){return new this.constructor().copy(this)}}function iL(){let a=null,b=!1,c=null,d=null;function e(b,f){c(b,f),d=a.requestAnimationFrame(e)}return{start:function(){!0!==b&&null!==c&&(d=a.requestAnimationFrame(e),b=!0)},stop:function(){a.cancelAnimationFrame(d),b=!1},setAnimationLoop:function(a){c=a},setContext:function(b){a=b}}}function jL(a,b){const c=b.isWebGL2,d=new WeakMap();return{get:function(a){return a.isInterleavedBufferAttribute&&(a=a.data),d.get(a)},remove:function(b){b.isInterleavedBufferAttribute&&(b=b.data);const c=d.get(b);c&&(a.deleteBuffer(c.buffer),d.delete(b))},update:function(b,e){if(b.isGLBufferAttribute){const f=d.get(b);(!f||f.version<b.version)&&d.set(b,{buffer:b.buffer,type:b.type,bytesPerElement:b.elementSize,version:b.version});return}b.isInterleavedBufferAttribute&&(b=b.data);const g=d.get(b);void 0===g?d.set(b,function(b,d){const e=b.array,f=b.usage,g=a.createBuffer();a.bindBuffer(d,g),a.bufferData(d,e,f),b.onUploadCallback();let h=5126;return e instanceof Float32Array?h=5126:e instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):e instanceof Uint16Array?b.isFloat16BufferAttribute?c?h=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):h=5123:e instanceof Int16Array?h=5122:e instanceof Uint32Array?h=5125:e instanceof Int32Array?h=5124:e instanceof Int8Array?h=5120:e instanceof Uint8Array?h=5121:e instanceof Uint8ClampedArray&&(h=5121),{buffer:g,type:h,bytesPerElement:e.BYTES_PER_ELEMENT,version:b.version}}(b,e)):g.version<b.version&&(!function(b,d,e){const f=d.array,g=d.updateRange;a.bindBuffer(e,b),-1===g.count?a.bufferSubData(e,0,f):(c?a.bufferSubData(e,g.offset*f.BYTES_PER_ELEMENT,f,g.offset,g.count):a.bufferSubData(e,g.offset*f.BYTES_PER_ELEMENT,f.subarray(g.offset,g.offset+g.count)),g.count=-1)}(g.buffer,b,e),g.version=b.version)}}}class kL extends uC{constructor(lL=1,mL=1,nL=1,oL=1){super(),this.type="PlaneGeometry",this.parameters={width:lL,height:mL,widthSegments:nL,heightSegments:oL};const pL=lL/2,qL=mL/2,rL=Math.floor(nL),sL=Math.floor(oL),tL=rL+1,uL=sL+1,vL=lL/rL,wL=mL/sL,xL=[],yL=[],zL=[],AL=[];for(let BL=0;BL<uL;BL++){const CL=BL*wL-qL;for(let DL=0;DL<tL;DL++){const EL=DL*vL-pL;yL.push(EL,-CL,0),zL.push(0,0,1),AL.push(DL/rL),AL.push(1-BL/sL)}}for(let FL=0;FL<sL;FL++)for(let GL=0;GL<rL;GL++){const HL=GL+tL*FL,IL=GL+tL*(FL+1),JL=GL+1+tL*(FL+1),KL=GL+1+tL*FL;xL.push(HL,IL,KL),xL.push(IL,JL,KL)}this.setIndex(xL),this.setAttribute("position",new jC(yL,3)),this.setAttribute("normal",new jC(zL,3)),this.setAttribute("uv",new jC(AL,2))}static fromJSON(LL){return new kL(LL.width,LL.height,LL.widthSegments,LL.heightSegments)}}const ML={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},NL={common:{diffuse:{value:new ld(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new ab()},uv2Transform:{value:new ab()},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:0.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new L(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new ld(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ld(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ab()}},sprite:{diffuse:{value:new ld(16777215)},opacity:{value:1},center:{value:new L(0.5,0.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ab()}}},OL={basic:{uniforms:DH([NL.common,NL.specularmap,NL.envmap,NL.aomap,NL.lightmap,NL.fog]),vertexShader:ML.meshbasic_vert,fragmentShader:ML.meshbasic_frag},lambert:{uniforms:DH([NL.common,NL.specularmap,NL.envmap,NL.aomap,NL.lightmap,NL.emissivemap,NL.fog,NL.lights,{emissive:{value:new ld(0)}}]),vertexShader:ML.meshlambert_vert,fragmentShader:ML.meshlambert_frag},phong:{uniforms:DH([NL.common,NL.specularmap,NL.envmap,NL.aomap,NL.lightmap,NL.emissivemap,NL.bumpmap,NL.normalmap,NL.displacementmap,NL.fog,NL.lights,{emissive:{value:new ld(0)},specular:{value:new ld(1118481)},shininess:{value:30}}]),vertexShader:ML.meshphong_vert,fragmentShader:ML.meshphong_frag},standard:{uniforms:DH([NL.common,NL.envmap,NL.aomap,NL.lightmap,NL.emissivemap,NL.bumpmap,NL.normalmap,NL.displacementmap,NL.roughnessmap,NL.metalnessmap,NL.fog,NL.lights,{emissive:{value:new ld(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ML.meshphysical_vert,fragmentShader:ML.meshphysical_frag},toon:{uniforms:DH([NL.common,NL.aomap,NL.lightmap,NL.emissivemap,NL.bumpmap,NL.normalmap,NL.displacementmap,NL.gradientmap,NL.fog,NL.lights,{emissive:{value:new ld(0)}}]),vertexShader:ML.meshtoon_vert,fragmentShader:ML.meshtoon_frag},matcap:{uniforms:DH([NL.common,NL.bumpmap,NL.normalmap,NL.displacementmap,NL.fog,{matcap:{value:null}}]),vertexShader:ML.meshmatcap_vert,fragmentShader:ML.meshmatcap_frag},points:{uniforms:DH([NL.points,NL.fog]),vertexShader:ML.points_vert,fragmentShader:ML.points_frag},dashed:{uniforms:DH([NL.common,NL.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ML.linedashed_vert,fragmentShader:ML.linedashed_frag},depth:{uniforms:DH([NL.common,NL.displacementmap]),vertexShader:ML.depth_vert,fragmentShader:ML.depth_frag},normal:{uniforms:DH([NL.common,NL.bumpmap,NL.normalmap,NL.displacementmap,{opacity:{value:1}}]),vertexShader:ML.meshnormal_vert,fragmentShader:ML.meshnormal_frag},sprite:{uniforms:DH([NL.sprite,NL.fog]),vertexShader:ML.sprite_vert,fragmentShader:ML.sprite_frag},background:{uniforms:{uvTransform:{value:new ab()},t2D:{value:null}},vertexShader:ML.background_vert,fragmentShader:ML.background_frag},cube:{uniforms:DH([NL.envmap,{opacity:{value:1}}]),vertexShader:ML.cube_vert,fragmentShader:ML.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ML.equirect_vert,fragmentShader:ML.equirect_frag},distanceRGBA:{uniforms:DH([NL.common,NL.displacementmap,{referencePosition:{value:new Xj()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:ML.distanceRGBA_vert,fragmentShader:ML.distanceRGBA_frag},shadow:{uniforms:DH([NL.lights,NL.fog,{color:{value:new ld(0)},opacity:{value:1}},]),vertexShader:ML.shadow_vert,fragmentShader:ML.shadow_frag}};function PL(a,b,c,d,e,g){const h=new ld(0);let i=!0===e?0:1,j,k,l=null,m=0,n=null;function o(a,b){c.buffers.color.setClear(a.r,a.g,a.b,b,g)}return{getClearColor:function(){return h},setClearColor:function(a,b=1){h.set(a),o(h,i=b)},getClearAlpha:function(){return i},setClearAlpha:function(a){o(h,i=a)},render:function(c,e){let g=!1,p=!0===e.isScene?e.background:null;p&&p.isTexture&&(p=b.get(p));const q=a.xr,r=q.getSession&&q.getSession();r&&"additive"===r.environmentBlendMode&&(p=null),null===p?o(h,i):p&&p.isColor&&(o(p,1),g=!0),(a.autoClear||g)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),p&&(p.isCubeTexture||306===p.mapping)?(void 0===k&&((k=new dG(new mH(1,1,1),new FH({name:"BackgroundCubeMaterial",uniforms:CH(OL.cube.uniforms),vertexShader:OL.cube.vertexShader,fragmentShader:OL.cube.fragmentShader,side:f,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),k.geometry.deleteAttribute("uv"),k.onBeforeRender=function(a,b,c){this.matrixWorld.copyPosition(c.matrixWorld)},Object.defineProperty(k.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),d.update(k)),k.material.uniforms.envMap.value=p,k.material.uniforms.flipEnvMap.value=p.isCubeTexture&& !1===p.isRenderTargetTexture?-1:1,(l!==p||m!==p.version||n!==a.toneMapping)&&(k.material.needsUpdate=!0,l=p,m=p.version,n=a.toneMapping),c.unshift(k,k.geometry,k.material,0,0,null)):p&&p.isTexture&&(void 0===j&&((j=new dG(new kL(2,2),new FH({name:"BackgroundMaterial",uniforms:CH(OL.background.uniforms),vertexShader:OL.background.vertexShader,fragmentShader:OL.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(j.material,"map",{get:function(){return this.uniforms.t2D.value}}),d.update(j)),j.material.uniforms.t2D.value=p,!0===p.matrixAutoUpdate&&p.updateMatrix(),j.material.uniforms.uvTransform.value.copy(p.matrix),(l!==p||m!==p.version||n!==a.toneMapping)&&(j.material.needsUpdate=!0,l=p,m=p.version,n=a.toneMapping),c.unshift(j,j.geometry,j.material,0,0,null))}}}function QL(a,b,c,d){const e=a.getParameter(34921),f=d.isWebGL2?null:b.get("OES_vertex_array_object"),g=d.isWebGL2||null!==f,h={},i=m(null);let j=i;function k(b){return d.isWebGL2?a.bindVertexArray(b):f.bindVertexArrayOES(b)}function l(b){return d.isWebGL2?a.deleteVertexArray(b):f.deleteVertexArrayOES(b)}function m(a){const b=[],c=[],d=[];for(let f=0;f<e;f++)b[f]=0,c[f]=0,d[f]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:b,enabledAttributes:c,attributeDivisors:d,object:a,attributes:{},index:null}}function n(){const a=j.newAttributes;for(let b=0,c=a.length;b<c;b++)a[b]=0}function o(a){p(a,0)}function p(c,e){const f=j.newAttributes,g=j.enabledAttributes,h=j.attributeDivisors;if(f[c]=1,0===g[c]&&(a.enableVertexAttribArray(c),g[c]=1),h[c]!==e){const i=d.isWebGL2?a:b.get("ANGLE_instanced_arrays");i[d.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](c,e),h[c]=e}}function q(){const b=j.newAttributes,c=j.enabledAttributes;for(let d=0,e=c.length;d<e;d++)c[d]!==b[d]&&(a.disableVertexAttribArray(d),c[d]=0)}function r(b,c,e,f,g,h){!0===d.isWebGL2&&(5124===e||5125===e)?a.vertexAttribIPointer(b,c,e,g,h):a.vertexAttribPointer(b,c,e,f,g,h)}function s(){t(),j!==i&&k((j=i).object)}function t(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:function(e,i,l,s,t){let u=!1;if(g){const v=function(b,c,e){const g=!0===e.wireframe;let i=h[b.id];void 0===i&&(i={},h[b.id]=i);let j=i[c.id];void 0===j&&(j={},i[c.id]=j);let k=j[g];return void 0===k&&(k=m(d.isWebGL2?a.createVertexArray():f.createVertexArrayOES()),j[g]=k),k}(s,l,i);j!==v&&k((j=v).object),(u=(function(a,b){const c=j.attributes,d=a.attributes;let e=0;for(const f in d){const g=c[f],h=d[f];if(void 0===g)return!0;if(g.attribute!==h)return!0;if(g.data!==h.data)return!0;e++}return j.attributesNum!==e||j.index!==b})(s,t))&&(function(a,b){const c={},d=a.attributes;let e=0;for(const f in d){const g=d[f],h={};h.attribute=g,g.data&&(h.data=g.data),c[f]=h,e++}j.attributes=c,j.attributesNum=e,j.index=b})(s,t)}else{const w=!0===i.wireframe;(j.geometry!==s.id||j.program!==l.id||j.wireframe!==w)&&(j.geometry=s.id,j.program=l.id,j.wireframe=w,u=!0)}!0===e.isInstancedMesh&&(u=!0),null!==t&&c.update(t,34963),u&&((function(e,f,g,h){if(!1===d.isWebGL2&&(e.isInstancedMesh||h.isInstancedBufferGeometry)&&null===b.get("ANGLE_instanced_arrays"))return;n();const i=h.attributes,j=g.getAttributes(),k=f.defaultAttributeValues;for(const l in j){const m=j[l];if(m.location>=0){let s=i[l];if(void 0===s&&("instanceMatrix"===l&&e.instanceMatrix&&(s=e.instanceMatrix),"instanceColor"===l&&e.instanceColor&&(s=e.instanceColor)),void 0!==s){const t=s.normalized,u=s.itemSize,v=c.get(s);if(void 0===v)continue;const w=v.buffer,x=v.type,y=v.bytesPerElement;if(s.isInterleavedBufferAttribute){const z=s.data,A=z.stride,B=s.offset;if(z&&z.isInstancedInterleavedBuffer){for(let C=0;C<m.locationSize;C++)p(m.location+C,z.meshPerAttribute);!0!==e.isInstancedMesh&& void 0===h._maxInstanceCount&&(h._maxInstanceCount=z.meshPerAttribute*z.count)}else for(let D=0;D<m.locationSize;D++)o(m.location+D);a.bindBuffer(34962,w);for(let E=0;E<m.locationSize;E++)r(m.location+E,u/m.locationSize,x,t,A*y,(B+u/m.locationSize*E)*y)}else{if(s.isInstancedBufferAttribute){for(let F=0;F<m.locationSize;F++)p(m.location+F,s.meshPerAttribute);!0!==e.isInstancedMesh&& void 0===h._maxInstanceCount&&(h._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let G=0;G<m.locationSize;G++)o(m.location+G);a.bindBuffer(34962,w);for(let H=0;H<m.locationSize;H++)r(m.location+H,u/m.locationSize,x,t,u*y,u/m.locationSize*H*y)}}else if(void 0!==k){const I=k[l];if(void 0!==I)switch(I.length){case 2:a.vertexAttrib2fv(m.location,I);break;case 3:a.vertexAttrib3fv(m.location,I);break;case 4:a.vertexAttrib4fv(m.location,I);break;default:a.vertexAttrib1fv(m.location,I)}}}}q()})(e,i,l,s),null!==t&&a.bindBuffer(34963,c.get(t).buffer))},reset:s,resetDefaultState:t,dispose:function(){for(const a in s(),h){const b=h[a];for(const c in b){const d=b[c];for(const e in d)l(d[e].object),delete d[e];delete b[c]}delete h[a]}},releaseStatesOfGeometry:function(a){if(void 0===h[a.id])return;const b=h[a.id];for(const c in b){const d=b[c];for(const e in d)l(d[e].object),delete d[e];delete b[c]}delete h[a.id]},releaseStatesOfProgram:function(a){for(const b in h){const c=h[b];if(void 0===c[a.id])continue;const d=c[a.id];for(const e in d)l(d[e].object),delete d[e];delete c[a.id]}},initAttributes:n,enableAttribute:o,disableUnusedAttributes:q}}function RL(a,b,c,d){const e=d.isWebGL2;let f;this.setMode=function(a){f=a},this.render=function(b,d){a.drawArrays(f,b,d),c.update(d,f,1)},this.renderInstances=function(d,g,h){if(0===h)return;let i,j;if(e)i=a,j="drawArraysInstanced";else if(j="drawArraysInstancedANGLE",null===(i=b.get("ANGLE_instanced_arrays"))){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}i[j](f,d,g,h),c.update(g,f,h)}}function SL(a,b,c){let d;function e(b){if("highp"===b){if(a.getShaderPrecisionFormat(35633,36338).precision>0&&a.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";b="mediump"}return"mediump"===b&&a.getShaderPrecisionFormat(35633,36337).precision>0&&a.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const f="undefined"!=typeof WebGL2RenderingContext&&a instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&a instanceof WebGL2ComputeRenderingContext;let g=void 0!==c.precision?c.precision:"highp";const h=e(g);h!==g&&(console.warn("THREE.WebGLRenderer:",g,"not supported, using",h,"instead."),g=h);const i=f||b.has("WEBGL_draw_buffers"),j=!0===c.logarithmicDepthBuffer,k=a.getParameter(34930),l=a.getParameter(35660),m=a.getParameter(3379),n=a.getParameter(34076),o=a.getParameter(34921),p=a.getParameter(36347),q=a.getParameter(36348),r=a.getParameter(36349),s=l>0,t=f||b.has("OES_texture_float"),u=f?a.getParameter(36183):0;return{isWebGL2:f,drawBuffers:i,getMaxAnisotropy:function(){if(void 0!==d)return d;if(!0===b.has("EXT_texture_filter_anisotropic")){const c=b.get("EXT_texture_filter_anisotropic");d=a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else d=0;return d},getMaxPrecision:e,precision:g,logarithmicDepthBuffer:j,maxTextures:k,maxVertexTextures:l,maxTextureSize:m,maxCubemapSize:n,maxAttributes:o,maxVertexUniforms:p,maxVaryings:q,maxFragmentUniforms:r,vertexTextures:s,floatFragmentTextures:t,floatVertexTextures:s&&t,maxSamples:u}}function TL(a){const b=this;let c=null,d=0,e=!1,f=!1;const g=new xJ(),h=new ab(),i={value:null,needsUpdate:!1};function j(){i.value!==c&&(i.value=c,i.needsUpdate=d>0),b.numPlanes=d,b.numIntersection=0}function k(a,c,d,e){const f=null!==a?a.length:0;let j=null;if(0!==f){if(j=i.value,!0!==e||null===j){const k=d+4*f,l=c.matrixWorldInverse;h.getNormalMatrix(l),(null===j||j.length<k)&&(j=new Float32Array(k));for(let m=0,n=d;m!==f;++m,n+=4)g.copy(a[m]).applyMatrix4(l,h),g.normal.toArray(j,n),j[n+3]=g.constant}i.value=j,i.needsUpdate=!0}return b.numPlanes=f,b.numIntersection=0,j}this.uniform=i,this.numPlanes=0,this.numIntersection=0,this.init=function(a,b,f){const g=0!==a.length||b||0!==d||e;return e=b,c=k(a,f,0),d=a.length,g},this.beginShadows=function(){f=!0,k(null)},this.endShadows=function(){f=!1,j()},this.setState=function(b,g,h){const l=b.clippingPlanes,m=b.clipIntersection,n=b.clipShadows,o=a.get(b);if(e&&null!==l&&0!==l.length&&(!f||n)){const p=f?0:d,q=4*p;let r=o.clippingState||null;i.value=r,r=k(l,g,q,h);for(let s=0;s!==q;++s)r[s]=c[s];o.clippingState=r,this.numIntersection=m?this.numPlanes:0,this.numPlanes+=p}else f?k(null):j()}}function UL(a){let b=new WeakMap();function c(a,b){return 303===b?a.mapping=301:304===b&&(a.mapping=302),a}function d(a){const c=a.target;c.removeEventListener("dispose",d);const e=b.get(c);void 0!==e&&(b.delete(c),e.dispose())}return{get:function(e){if(e&&e.isTexture&& !1===e.isRenderTargetTexture){const f=e.mapping;if(303===f||304===f){if(b.has(e)){const g=b.get(e).texture;return c(g,e.mapping)}{const h=e.image;if(!h||!(h.height>0))return null;{const i=new cJ(h.height/2);return i.fromEquirectangularTexture(a,e),b.set(e,i),e.addEventListener("dispose",d),c(i.texture,e.mapping)}}}}return e},dispose:function(){b=new WeakMap()}}}OL.physical={uniforms:DH([OL.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new L(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new ld(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new L()},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new ld(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new ld(1,1,1)},specularColorMap:{value:null}}]),vertexShader:ML.meshphysical_vert,fragmentShader:ML.meshphysical_frag};class VL extends PH{constructor(WL=-1,XL=1,YL=1,ZL=-1,$L=0.1,_L=2000){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=WL,this.right=XL,this.top=YL,this.bottom=ZL,this.near=$L,this.far=_L,this.updateProjectionMatrix()}copy(aM,bM){return super.copy(aM,bM),this.left=aM.left,this.right=aM.right,this.top=aM.top,this.bottom=aM.bottom,this.near=aM.near,this.far=aM.far,this.zoom=aM.zoom,this.view=null===aM.view?null:Object.assign({},aM.view),this}setViewOffset(cM,dM,eM,fM,gM,hM){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=cM,this.view.fullHeight=dM,this.view.offsetX=eM,this.view.offsetY=fM,this.view.width=gM,this.view.height=hM,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const iM=(this.right-this.left)/(2*this.zoom),jM=(this.top-this.bottom)/(2*this.zoom),kM=(this.right+this.left)/2,lM=(this.top+this.bottom)/2;let mM=kM-iM,nM=kM+iM,oM=lM+jM,pM=lM-jM;if(null!==this.view&&this.view.enabled){const qM=(this.right-this.left)/this.view.fullWidth/this.zoom,rM=(this.top-this.bottom)/this.view.fullHeight/this.zoom;nM=(mM+=qM*this.view.offsetX)+qM*this.view.width,pM=(oM-=rM*this.view.offsetY)-rM*this.view.height}this.projectionMatrix.makeOrthographic(mM,nM,oM,pM,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(sM){const tM=super.toJSON(sM);return tM.object.zoom=this.zoom,tM.object.left=this.left,tM.object.right=this.right,tM.object.top=this.top,tM.object.bottom=this.bottom,tM.object.near=this.near,tM.object.far=this.far,null!==this.view&&(tM.object.view=Object.assign({},this.view)),tM}}VL.prototype.isOrthographicCamera=!0;class uM extends FH{constructor(vM){super(vM),this.type="RawShaderMaterial"}}uM.prototype.isRawShaderMaterial=!0;const wM=[0.125,0.215,0.35,0.446,0.526,0.582],xM=5+wM.length,yM=new VL(),{_lodPlanes:zM,_sizeLods:AM,_sigmas:BM}=function(){const a=[],b=[],c=[];let d=8;for(let e=0;e<xM;e++){const f=Math.pow(2,d);b.push(f);let g=1/f;e>4?g=wM[e-8+4-1]:0===e&&(g=0),c.push(g);const h=1/(f-1),i=-h/2,j=1+h/2,k=[i,i,j,i,j,j,i,i,j,j,i,j],l=6,m=6,n=3,o=2,p=1,q=new Float32Array(n*m*l),r=new Float32Array(o*m*l),s=new Float32Array(p*m*l);for(let t=0;t<l;t++){const u=t%3*2/3-1,v=t>2?0:-1,w=[u,v,0,u+2/3,v,0,u+2/3,v+1,0,u,v,0,u+2/3,v+1,0,u,v+1,0];q.set(w,n*m*t),r.set(k,o*m*t);const x=[t,t,t,t,t,t];s.set(x,p*m*t)}const y=new uC();y.setAttribute("position",new BA(q,n)),y.setAttribute("uv",new BA(r,o)),y.setAttribute("faceIndex",new BA(s,p)),a.push(y),d>4&&d--}return{_lodPlanes:a,_sizeLods:b,_sigmas:c}}(),CM=new ld();let DM=null;const EM=(1+Math.sqrt(5))/2,FM=1/EM,GM=[new Xj(1,1,1),new Xj(-1,1,1),new Xj(1,1,-1),new Xj(-1,1,-1),new Xj(0,EM,FM),new Xj(0,EM,-FM),new Xj(FM,0,EM),new Xj(-FM,0,EM),new Xj(EM,FM,0),new Xj(-EM,FM,0)];class HM{constructor(IM){this._renderer=IM,this._pingPongRenderTarget=null,this._blurMaterial=(function(a){const b=new Float32Array(a),c=new Xj(0,1,0),d=new uM({name:"SphericalGaussianBlur",defines:{n:a},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:b},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:c}},vertexShader:hO(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return d})(20),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(JM,KM=0,LM=0.1,MM=100){DM=this._renderer.getRenderTarget();const NM=this._allocateTargets();return this._sceneToCubeUV(JM,LM,MM,NM),KM>0&&this._blur(NM,0,0,KM),this._applyPMREM(NM),this._cleanup(NM),NM}fromEquirectangular(OM,PM=null){return this._fromTexture(OM,PM)}fromCubemap(QM,RM=null){return this._fromTexture(QM,RM)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=gO(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=fO(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let SM=0;SM<zM.length;SM++)zM[SM].dispose()}_cleanup(TM){this._renderer.setRenderTarget(DM),TM.scissorTest=!1,eO(TM,0,0,TM.width,TM.height)}_fromTexture(UM,VM){DM=this._renderer.getRenderTarget();const WM=VM||this._allocateTargets(UM);return this._textureToCubeUV(UM,WM),this._applyPMREM(WM),this._cleanup(WM),WM}_allocateTargets(XM){const YM={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:1023,encoding:3000,depthBuffer:!1},ZM=dO(YM);return ZM.depthBuffer=!XM,null===this._pingPongRenderTarget&&(this._pingPongRenderTarget=dO(YM)),ZM}_compileMaterial($M){const _M=new dG(zM[0],$M);this._renderer.compile(_M,yM)}_sceneToCubeUV(aN,bN,cN,dN){const eN=new XH(90,1,bN,cN),fN=[1,-1,1,1,1,1],gN=[1,1,1,-1,-1,-1],hN=this._renderer,iN=hN.autoClear,jN=hN.toneMapping;hN.getClearColor(CM),hN.toneMapping=0,hN.autoClear=!1;const kN=new wA({name:"PMREM.Background",side:f,depthWrite:!1,depthTest:!1}),lN=new dG(new mH(),kN);let mN=!1;const nN=aN.background;nN?nN.isColor&&(kN.color.copy(nN),aN.background=null,mN=!0):(kN.color.copy(CM),mN=!0);for(let oN=0;oN<6;oN++){const pN=oN%3;0===pN?(eN.up.set(0,fN[oN],0),eN.lookAt(gN[oN],0,0)):1===pN?(eN.up.set(0,0,fN[oN]),eN.lookAt(0,gN[oN],0)):(eN.up.set(0,fN[oN],0),eN.lookAt(0,0,gN[oN])),eO(dN,256*pN,oN>2?256:0,256,256),hN.setRenderTarget(dN),mN&&hN.render(lN,eN),hN.render(aN,eN)}lN.geometry.dispose(),lN.material.dispose(),hN.toneMapping=jN,hN.autoClear=iN,aN.background=nN}_textureToCubeUV(qN,rN){const sN=this._renderer,tN=301===qN.mapping||302===qN.mapping;tN?(null===this._cubemapShader&&(this._cubemapShader=gO()),this._cubemapShader.uniforms.flipEnvMap.value=!1===qN.isRenderTargetTexture?-1:1):null===this._equirectShader&&(this._equirectShader=fO());const uN=tN?this._cubemapShader:this._equirectShader,vN=new dG(zM[0],uN),wN=uN.uniforms;wN.envMap.value=qN,tN||wN.texelSize.value.set(1/qN.image.width,1/qN.image.height),eO(rN,0,0,768,512),sN.setRenderTarget(rN),sN.render(vN,yM)}_applyPMREM(xN){const yN=this._renderer,zN=yN.autoClear;yN.autoClear=!1;for(let AN=1;AN<xM;AN++){const BN=Math.sqrt(BM[AN]*BM[AN]-BM[AN-1]*BM[AN-1]),CN=GM[(AN-1)%GM.length];this._blur(xN,AN-1,AN,BN,CN)}yN.autoClear=zN}_blur(DN,EN,FN,GN,HN){const IN=this._pingPongRenderTarget;this._halfBlur(DN,IN,EN,FN,GN,"latitudinal",HN),this._halfBlur(IN,DN,FN,FN,GN,"longitudinal",HN)}_halfBlur(JN,KN,LN,MN,NN,ON,PN){const QN=this._renderer,RN=this._blurMaterial;"latitudinal"!==ON&&"longitudinal"!==ON&&console.error("blur direction must be either latitudinal or longitudinal!");const SN=new dG(zM[MN],RN),TN=RN.uniforms,UN=AM[LN]-1,VN=isFinite(NN)?Math.PI/(2*UN):2*Math.PI/39,WN=NN/VN,XN=isFinite(NN)?1+Math.floor(3*WN):20;XN>20&&console.warn(`sigmaRadians, ${NN}, is too large and will clip, as it requested ${XN} samples when the maximum is set to 20`);const YN=[];let ZN=0;for(let $N=0;$N<20;++$N){const _N=$N/WN,aO=Math.exp(-_N*_N/2);YN.push(aO),0===$N?ZN+=aO:$N<XN&&(ZN+=2*aO)}for(let bO=0;bO<YN.length;bO++)YN[bO]=YN[bO]/ZN;TN.envMap.value=JN.texture,TN.samples.value=XN,TN.weights.value=YN,TN.latitudinal.value="latitudinal"===ON,PN&&(TN.poleAxis.value=PN),TN.dTheta.value=VN,TN.mipInt.value=8-LN;const cO=AM[MN];eO(KN,3*Math.max(0,256-2*cO),(0===MN?0:512)+2*cO*(MN>4?MN-8+4:0),3*cO,2*cO),QN.setRenderTarget(KN),QN.render(SN,yM)}}function dO(a){const b=new Rg(768,768,a);return b.texture.mapping=306,b.texture.name="PMREM.cubeUv",b.scissorTest=!0,b}function eO(a,b,c,d,e){a.viewport.set(b,c,d,e),a.scissor.set(b,c,d,e)}function fO(){const a=new L(1,1),b=new uM({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:a}},vertexShader:hO(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = texture2D ( envMap, uv ).rgb;
				uv.x += texelSize.x;
				vec3 tr = texture2D ( envMap, uv ).rgb;
				uv.y += texelSize.y;
				vec3 br = texture2D ( envMap, uv ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = texture2D ( envMap, uv ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return b}function gO(){const a=new uM({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:hO(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return a}function hO(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function iO(a){let b=new WeakMap(),c=null;function d(a){const c=a.target;c.removeEventListener("dispose",d);const e=b.get(c);void 0!==e&&(b.delete(c),e.dispose())}return{get:function(e){if(e&&e.isTexture){const f=e.mapping,g=303===f||304===f,h=301===f||302===f;if(g||h){if(e.isRenderTargetTexture&& !0===e.needsPMREMUpdate){e.needsPMREMUpdate=!1;let i=b.get(e);return null===c&&(c=new HM(a)),i=g?c.fromEquirectangular(e,i):c.fromCubemap(e,i),b.set(e,i),i.texture}if(b.has(e))return b.get(e).texture;{const j=e.image;if(!(g&&j&&j.height>0||h&&j&&function(a){let b=0;for(let c=0;c<6;c++)void 0!==a[c]&&b++;return 6===b}(j)))return null;{null===c&&(c=new HM(a));const k=g?c.fromEquirectangular(e):c.fromCubemap(e);return b.set(e,k),e.addEventListener("dispose",d),k.texture}}}}return e},dispose:function(){b=new WeakMap(),null!==c&&(c.dispose(),c=null)}}}function jO(a){const b={};function c(c){if(void 0!==b[c])return b[c];let d;switch(c){case"WEBGL_depth_texture":d=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:d=a.getExtension(c)}return b[c]=d,d}return{has:function(a){return null!==c(a)},init:function(a){a.isWebGL2?c("EXT_color_buffer_float"):(c("WEBGL_depth_texture"),c("OES_texture_float"),c("OES_texture_half_float"),c("OES_texture_half_float_linear"),c("OES_standard_derivatives"),c("OES_element_index_uint"),c("OES_vertex_array_object"),c("ANGLE_instanced_arrays")),c("OES_texture_float_linear"),c("EXT_color_buffer_half_float"),c("WEBGL_multisampled_render_to_texture")},get:function(a){const b=c(a);return null===b&&console.warn("THREE.WebGLRenderer: "+a+" extension not supported."),b}}}function kO(a,b,c,d){const e={},f=new WeakMap();function g(a){const h=a.target;for(const i in null!==h.index&&b.remove(h.index),h.attributes)b.remove(h.attributes[i]);h.removeEventListener("dispose",g),delete e[h.id];const j=f.get(h);j&&(b.remove(j),f.delete(h)),d.releaseStatesOfGeometry(h),!0===h.isInstancedBufferGeometry&&delete h._maxInstanceCount,c.memory.geometries--}function h(a){const c=[],d=a.index,e=a.attributes.position;let g=0;if(null!==d){const h=d.array;g=d.version;for(let i=0,j=h.length;i<j;i+=3){const k=h[i+0],l=h[i+1],m=h[i+2];c.push(k,l,l,m,m,k)}}else{const n=e.array;g=e.version;for(let o=0,p=n.length/3-1;o<p;o+=3){const q=o+0,r=o+1,s=o+2;c.push(q,r,r,s,s,q)}}const t=new(dd(c)?cC:$B)(c,1);t.version=g;const u=f.get(a);u&&b.remove(u),f.set(a,t)}return{get:function(a,b){return!0===e[b.id]||(b.addEventListener("dispose",g),e[b.id]=!0,c.memory.geometries++),b},update:function(a){const c=a.attributes;for(const d in c)b.update(c[d],34962);const e=a.morphAttributes;for(const f in e){const g=e[f];for(let h=0,i=g.length;h<i;h++)b.update(g[h],34962)}},getWireframeAttribute:function(a){const b=f.get(a);if(b){const c=a.index;null!==c&&b.version<c.version&&h(a)}else h(a);return f.get(a)}}}function lO(a,b,c,d){const e=d.isWebGL2;let f,g,h;this.setMode=function(a){f=a},this.setIndex=function(a){g=a.type,h=a.bytesPerElement},this.render=function(b,d){a.drawElements(f,d,g,b*h),c.update(d,f,1)},this.renderInstances=function(d,i,j){if(0===j)return;let k,l;if(e)k=a,l="drawElementsInstanced";else if(l="drawElementsInstancedANGLE",null===(k=b.get("ANGLE_instanced_arrays"))){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}k[l](f,i,g,d*h,j),c.update(i,f,j)}}function mO(a){const b={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:b,programs:null,autoReset:!0,reset:function(){b.frame++,b.calls=0,b.triangles=0,b.points=0,b.lines=0},update:function(a,c,d){switch(b.calls++,c){case 4:b.triangles+=d*(a/3);break;case 1:b.lines+=d*(a/2);break;case 3:b.lines+=d*(a-1);break;case 2:b.lines+=d*a;break;case 0:b.points+=d*a;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",c);break}}}}class nO extends Ne{constructor(oO=null,pO=1,qO=1,rO=1){super(null),this.image={data:oO,width:pO,height:qO,depth:rO},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}function sO(a,b){return a[0]-b[0]}function tO(a,b){return Math.abs(b[1])-Math.abs(a[1])}function uO(a,b){let c=1;const d=b.isInterleavedBufferAttribute?b.data.array:b.array;d instanceof Int8Array?c=127:d instanceof Int16Array?c=32767:d instanceof Int32Array?c=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",d),a.divideScalar(c)}function vO(a,b,c){const d={},e=new Float32Array(8),f=new WeakMap(),g=new Xj(),h=[];for(let i=0;i<8;i++)h[i]=[i,0];return{update:function(i,j,k,l){const m=i.morphTargetInfluences;if(!0===b.isWebGL2){const n=j.morphAttributes.position.length;let o=f.get(j);if(void 0===o||o.count!==n){void 0!==o&&o.texture.dispose();const p=void 0!==j.morphAttributes.normal,q=j.morphAttributes.position,r=j.morphAttributes.normal||[],s=j.attributes.position.count,t=!0===p?2:1;let u=s*t,v=1;u>b.maxTextureSize&&(v=Math.ceil(u/b.maxTextureSize),u=b.maxTextureSize);const w=new Float32Array(u*v*4*n),x=new nO(w,u,v,n);x.format=1023,x.type=1015,x.needsUpdate=!0;const y=4*t;for(let z=0;z<n;z++){const A=q[z],B=r[z],C=u*v*4*z;for(let D=0;D<A.count;D++){g.fromBufferAttribute(A,D),!0===A.normalized&&uO(g,A);const E=D*y;w[C+E+0]=g.x,w[C+E+1]=g.y,w[C+E+2]=g.z,w[C+E+3]=0,!0===p&&(g.fromBufferAttribute(B,D),!0===B.normalized&&uO(g,B),w[C+E+4]=g.x,w[C+E+5]=g.y,w[C+E+6]=g.z,w[C+E+7]=0)}}function F(){x.dispose(),f.delete(j),j.removeEventListener("dispose",F)}o={count:n,texture:x,size:new L(u,v)},f.set(j,o),j.addEventListener("dispose",F)}let G=0;for(let H=0;H<m.length;H++)G+=m[H];const I=j.morphTargetsRelative?1:1-G;l.getUniforms().setValue(a,"morphTargetBaseInfluence",I),l.getUniforms().setValue(a,"morphTargetInfluences",m),l.getUniforms().setValue(a,"morphTargetsTexture",o.texture,c),l.getUniforms().setValue(a,"morphTargetsTextureSize",o.size)}else{const J=void 0===m?0:m.length;let K=d[j.id];if(void 0===K||K.length!==J){K=[];for(let M=0;M<J;M++)K[M]=[M,0];d[j.id]=K}for(let N=0;N<J;N++){const O=K[N];O[0]=N,O[1]=m[N]}K.sort(tO);for(let P=0;P<8;P++)P<J&&K[P][1]?(h[P][0]=K[P][0],h[P][1]=K[P][1]):(h[P][0]=Number.MAX_SAFE_INTEGER,h[P][1]=0);h.sort(sO);const Q=j.morphAttributes.position,R=j.morphAttributes.normal;let S=0;for(let T=0;T<8;T++){const U=h[T],V=U[0],W=U[1];V!==Number.MAX_SAFE_INTEGER&&W?(Q&&j.getAttribute("morphTarget"+T)!==Q[V]&&j.setAttribute("morphTarget"+T,Q[V]),R&&j.getAttribute("morphNormal"+T)!==R[V]&&j.setAttribute("morphNormal"+T,R[V]),e[T]=W,S+=W):(Q&& !0===j.hasAttribute("morphTarget"+T)&&j.deleteAttribute("morphTarget"+T),R&& !0===j.hasAttribute("morphNormal"+T)&&j.deleteAttribute("morphNormal"+T),e[T]=0)}const X=j.morphTargetsRelative?1:1-S;l.getUniforms().setValue(a,"morphTargetBaseInfluence",X),l.getUniforms().setValue(a,"morphTargetInfluences",e)}}}}function wO(a,b,c,d){let e=new WeakMap();function f(a){const b=a.target;b.removeEventListener("dispose",f),c.remove(b.instanceMatrix),null!==b.instanceColor&&c.remove(b.instanceColor)}return{update:function(a){const g=d.render.frame,h=a.geometry,i=b.get(a,h);return e.get(i)!==g&&(b.update(i),e.set(i,g)),a.isInstancedMesh&&(!1===a.hasEventListener("dispose",f)&&a.addEventListener("dispose",f),c.update(a.instanceMatrix,34962),null!==a.instanceColor&&c.update(a.instanceColor,34962)),i},dispose:function(){e=new WeakMap()}}}nO.prototype.isDataTexture2DArray=!0;class xO extends Ne{constructor(yO=null,zO=1,AO=1,BO=1){super(null),this.image={data:yO,width:zO,height:AO,depth:BO},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}xO.prototype.isDataTexture3D=!0;const CO=new Ne(),DO=new nO(),EO=new xO(),FO=new SI(),GO=[],HO=[],IO=new Float32Array(16),JO=new Float32Array(9),KO=new Float32Array(4);function LO(a,b,c){const d=a[0];if(d<=0||d>0)return a;const e=b*c;let f=GO[e];if(void 0===f&&(f=new Float32Array(e),GO[e]=f),0!==b){d.toArray(f,0);for(let g=1,h=0;g!==b;++g)h+=c,a[g].toArray(f,h)}return f}function MO(a,b){if(a.length!==b.length)return!1;for(let c=0,d=a.length;c<d;c++)if(a[c]!==b[c])return!1;return!0}function NO(a,b){for(let c=0,d=b.length;c<d;c++)a[c]=b[c]}function OO(a,b){let c=HO[b];void 0===c&&(c=new Int32Array(b),HO[b]=c);for(let d=0;d!==b;++d)c[d]=a.allocateTextureUnit();return c}function PO(a,b){const c=this.cache;c[0]!==b&&(a.uniform1f(this.addr,b),c[0]=b)}function QO(a,b){const c=this.cache;if(void 0!==b.x)(c[0]!==b.x||c[1]!==b.y)&&(a.uniform2f(this.addr,b.x,b.y),c[0]=b.x,c[1]=b.y);else{if(MO(c,b))return;a.uniform2fv(this.addr,b),NO(c,b)}}function RO(a,b){const c=this.cache;if(void 0!==b.x)(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z)&&(a.uniform3f(this.addr,b.x,b.y,b.z),c[0]=b.x,c[1]=b.y,c[2]=b.z);else if(void 0!==b.r)(c[0]!==b.r||c[1]!==b.g||c[2]!==b.b)&&(a.uniform3f(this.addr,b.r,b.g,b.b),c[0]=b.r,c[1]=b.g,c[2]=b.b);else{if(MO(c,b))return;a.uniform3fv(this.addr,b),NO(c,b)}}function SO(a,b){const c=this.cache;if(void 0!==b.x)(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z||c[3]!==b.w)&&(a.uniform4f(this.addr,b.x,b.y,b.z,b.w),c[0]=b.x,c[1]=b.y,c[2]=b.z,c[3]=b.w);else{if(MO(c,b))return;a.uniform4fv(this.addr,b),NO(c,b)}}function TO(a,b){const c=this.cache,d=b.elements;if(void 0===d){if(MO(c,b))return;a.uniformMatrix2fv(this.addr,!1,b),NO(c,b)}else{if(MO(c,d))return;KO.set(d),a.uniformMatrix2fv(this.addr,!1,KO),NO(c,d)}}function UO(a,b){const c=this.cache,d=b.elements;if(void 0===d){if(MO(c,b))return;a.uniformMatrix3fv(this.addr,!1,b),NO(c,b)}else{if(MO(c,d))return;JO.set(d),a.uniformMatrix3fv(this.addr,!1,JO),NO(c,d)}}function VO(a,b){const c=this.cache,d=b.elements;if(void 0===d){if(MO(c,b))return;a.uniformMatrix4fv(this.addr,!1,b),NO(c,b)}else{if(MO(c,d))return;IO.set(d),a.uniformMatrix4fv(this.addr,!1,IO),NO(c,d)}}function WO(a,b){const c=this.cache;c[0]!==b&&(a.uniform1i(this.addr,b),c[0]=b)}function XO(a,b){const c=this.cache;MO(c,b)||(a.uniform2iv(this.addr,b),NO(c,b))}function YO(a,b){const c=this.cache;MO(c,b)||(a.uniform3iv(this.addr,b),NO(c,b))}function ZO(a,b){const c=this.cache;MO(c,b)||(a.uniform4iv(this.addr,b),NO(c,b))}function $O(a,b){const c=this.cache;c[0]!==b&&(a.uniform1ui(this.addr,b),c[0]=b)}function _O(a,b){const c=this.cache;MO(c,b)||(a.uniform2uiv(this.addr,b),NO(c,b))}function aP(a,b){const c=this.cache;MO(c,b)||(a.uniform3uiv(this.addr,b),NO(c,b))}function bP(a,b){const c=this.cache;MO(c,b)||(a.uniform4uiv(this.addr,b),NO(c,b))}function cP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.safeSetTexture2D(b||CO,e)}function dP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.setTexture3D(b||EO,e)}function eP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.safeSetTextureCube(b||FO,e)}function fP(a,b,c){const d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e),c.setTexture2DArray(b||DO,e)}function gP(a,b){a.uniform1fv(this.addr,b)}function hP(a,b){const c=LO(b,this.size,2);a.uniform2fv(this.addr,c)}function iP(a,b){const c=LO(b,this.size,3);a.uniform3fv(this.addr,c)}function jP(a,b){const c=LO(b,this.size,4);a.uniform4fv(this.addr,c)}function kP(a,b){const c=LO(b,this.size,4);a.uniformMatrix2fv(this.addr,!1,c)}function lP(a,b){const c=LO(b,this.size,9);a.uniformMatrix3fv(this.addr,!1,c)}function mP(a,b){const c=LO(b,this.size,16);a.uniformMatrix4fv(this.addr,!1,c)}function nP(a,b){a.uniform1iv(this.addr,b)}function oP(a,b){a.uniform2iv(this.addr,b)}function pP(a,b){a.uniform3iv(this.addr,b)}function qP(a,b){a.uniform4iv(this.addr,b)}function rP(a,b){a.uniform1uiv(this.addr,b)}function sP(a,b){a.uniform2uiv(this.addr,b)}function tP(a,b){a.uniform3uiv(this.addr,b)}function uP(a,b){a.uniform4uiv(this.addr,b)}function vP(a,b,c){const d=b.length,e=OO(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.safeSetTexture2D(b[f]||CO,e[f])}function wP(a,b,c){const d=b.length,e=OO(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.setTexture3D(b[f]||EO,e[f])}function xP(a,b,c){const d=b.length,e=OO(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.safeSetTextureCube(b[f]||FO,e[f])}function yP(a,b,c){const d=b.length,e=OO(c,d);a.uniform1iv(this.addr,e);for(let f=0;f!==d;++f)c.setTexture2DArray(b[f]||DO,e[f])}function zP(a,b,c){this.id=a,this.addr=c,this.cache=[],this.setValue=(function(a){switch(a){case 5126:return PO;case 35664:return QO;case 35665:return RO;case 35666:return SO;case 35674:return TO;case 35675:return UO;case 35676:return VO;case 5124:case 35670:return WO;case 35667:case 35671:return XO;case 35668:case 35672:return YO;case 35669:case 35673:return ZO;case 5125:return $O;case 36294:return _O;case 36295:return aP;case 36296:return bP;case 35678:case 36198:case 36298:case 36306:case 35682:return cP;case 35679:case 36299:case 36307:return dP;case 35680:case 36300:case 36308:case 36293:return eP;case 36289:case 36303:case 36311:case 36292:return fP}})(b.type)}function AP(a,b,c){this.id=a,this.addr=c,this.cache=[],this.size=b.size,this.setValue=(function(a){switch(a){case 5126:return gP;case 35664:return hP;case 35665:return iP;case 35666:return jP;case 35674:return kP;case 35675:return lP;case 35676:return mP;case 5124:case 35670:return nP;case 35667:case 35671:return oP;case 35668:case 35672:return pP;case 35669:case 35673:return qP;case 5125:return rP;case 36294:return sP;case 36295:return tP;case 36296:return uP;case 35678:case 36198:case 36298:case 36306:case 35682:return vP;case 35679:case 36299:case 36307:return wP;case 35680:case 36300:case 36308:case 36293:return xP;case 36289:case 36303:case 36311:case 36292:return yP}})(b.type)}function BP(a){this.id=a,this.seq=[],this.map={}}AP.prototype.updateCache=function(a){const b=this.cache;a instanceof Float32Array&&b.length!==a.length&&(this.cache=new Float32Array(a.length)),NO(b,a)},BP.prototype.setValue=function(a,b,c){const d=this.seq;for(let e=0,f=d.length;e!==f;++e){const g=d[e];g.setValue(a,b[g.id],c)}};const CP=/(\w+)(\])?(\[|\.)?/g;function DP(a,b){a.seq.push(b),a.map[b.id]=b}function EP(a,b,c){const d=a.name,e=d.length;for(CP.lastIndex=0;;){const f=CP.exec(d),g=CP.lastIndex;let h=f[1];const i="]"===f[2],j=f[3];if(i&&(h|=0),void 0===j||"["===j&&g+2===e){DP(c,void 0===j?new zP(h,a,b):new AP(h,a,b));break}{const k=c.map;let l=k[h];void 0===l&&DP(c,l=new BP(h)),c=l}}}function FP(a,b){this.seq=[],this.map={};const c=a.getProgramParameter(b,35718);for(let d=0;d<c;++d){const e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name);EP(e,f,this)}}function GP(a,b,c){const d=a.createShader(b);return a.shaderSource(d,c),a.compileShader(d),d}FP.prototype.setValue=function(a,b,c,d){const e=this.map[b];void 0!==e&&e.setValue(a,c,d)},FP.prototype.setOptional=function(a,b,c){const d=b[c];void 0!==d&&this.setValue(a,c,d)},FP.upload=function(a,b,c,d){for(let e=0,f=b.length;e!==f;++e){const g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}},FP.seqWithValue=function(a,b){const c=[];for(let d=0,e=a.length;d!==e;++d){const f=a[d];f.id in b&&c.push(f)}return c};let HP=0;function IP(a,b,c){const d=a.getShaderParameter(b,35713),e=a.getShaderInfoLog(b).trim();return d&&""===e?"":c.toUpperCase()+"\n\n"+e+"\n\n"+(function(a){const b=a.split("\n");for(let c=0;c<b.length;c++)b[c]=c+1+": "+b[c];return b.join("\n")})(a.getShaderSource(b))}function JP(a){return""!==a}function KP(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,b.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,b.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,b.numPointLightShadows)}function LP(a,b){return a.replace(/NUM_CLIPPING_PLANES/g,b.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,b.numClippingPlanes-b.numClipIntersection)}const MP=/^[ \t]*#include +<([\w\d./]+)>/gm;function NP(a){return a.replace(MP,OP)}function OP(a,b){const c=ML[b];if(void 0===c)throw new Error("Can not resolve #include <"+b+">");return NP(c)}const PP=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,QP=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function RP(a){return a.replace(QP,TP).replace(PP,SP)}function SP(a,b,c,d){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),TP(a,b,c,d)}function TP(a,b,c,d){let e="";for(let f=parseInt(b);f<parseInt(c);f++)e+=d.replace(/\[\s*i\s*\]/g,"[ "+f+" ]").replace(/UNROLLED_LOOP_INDEX/g,f);return e}function UP(a){let b="precision "+a.precision+" float;\nprecision "+a.precision+" int;";return"highp"===a.precision?b+="\n#define HIGH_PRECISION":"mediump"===a.precision?b+="\n#define MEDIUM_PRECISION":"lowp"===a.precision&&(b+="\n#define LOW_PRECISION"),b}function VP(a,b,c,d){var e;const f=a.getContext(),h=c.defines;let i=c.vertexShader,j=c.fragmentShader,k;const l=(k="SHADOWMAP_TYPE_BASIC",1===(e=c).shadowMapType?k="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?k="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(k="SHADOWMAP_TYPE_VSM"),k),m=function(a){let b="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case 301:case 302:b="ENVMAP_TYPE_CUBE";break;case 306:case 307:b="ENVMAP_TYPE_CUBE_UV";break}return b}(c),n=function(a){let b="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case 302:case 307:b="ENVMAP_MODE_REFRACTION";break}return b}(c),o=function(a){let b="ENVMAP_BLENDING_NONE";if(a.envMap)switch(a.combine){case 0:b="ENVMAP_BLENDING_MULTIPLY";break;case 1:b="ENVMAP_BLENDING_MIX";break;case 2:b="ENVMAP_BLENDING_ADD";break}return b}(c),p=c.isWebGL2?"":function(a){const b=[a.extensionDerivatives||a.envMapCubeUV||a.bumpMap||a.tangentSpaceNormalMap||a.clearcoatNormalMap||a.flatShading||"physical"===a.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(a.extensionFragDepth||a.logarithmicDepthBuffer)&&a.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",a.extensionDrawBuffers&&a.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(a.extensionShaderTextureLOD||a.envMap||a.transmission)&&a.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return b.filter(JP).join("\n")}(c),q=function(a){const b=[];for(const c in a){const d=a[c];!1!==d&&b.push("#define "+c+" "+d)}return b.join("\n")}(h),r=f.createProgram();let s,t,u=c.glslVersion?"#version "+c.glslVersion+"\n":"";c.isRawShaderMaterial?((s=[q].filter(JP).join("\n")).length>0&&(s+="\n"),(t=[p,q].filter(JP).join("\n")).length>0&&(t+="\n")):(s=[UP(c),"#define SHADER_NAME "+c.shaderName,q,c.instancing?"#define USE_INSTANCING":"",c.instancingColor?"#define USE_INSTANCING_COLOR":"",c.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+c.maxBones,c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp2?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.envMap?"#define "+n:"",c.lightMap?"#define USE_LIGHTMAP":"",c.aoMap?"#define USE_AOMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.normalMap&&c.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",c.normalMap&&c.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",c.clearcoatMap?"#define USE_CLEARCOATMAP":"",c.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",c.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",c.displacementMap&&c.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",c.specularColorMap?"#define USE_SPECULARCOLORMAP":"",c.roughnessMap?"#define USE_ROUGHNESSMAP":"",c.metalnessMap?"#define USE_METALNESSMAP":"",c.alphaMap?"#define USE_ALPHAMAP":"",c.transmission?"#define USE_TRANSMISSION":"",c.transmissionMap?"#define USE_TRANSMISSIONMAP":"",c.thicknessMap?"#define USE_THICKNESSMAP":"",c.sheenColorMap?"#define USE_SHEENCOLORMAP":"",c.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",c.vertexTangents?"#define USE_TANGENT":"",c.vertexColors?"#define USE_COLOR":"",c.vertexAlphas?"#define USE_COLOR_ALPHA":"",c.vertexUvs?"#define USE_UV":"",c.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",c.flatShading?"#define FLAT_SHADED":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals&& !1===c.flatShading?"#define USE_MORPHNORMALS":"",c.morphTargets&&c.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",c.morphTargets&&c.isWebGL2?"#define MORPHTARGETS_COUNT "+c.morphTargetsCount:"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+l:"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"",c.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",c.logarithmicDepthBuffer&&c.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(JP).join("\n"),t=[p,UP(c),"#define SHADER_NAME "+c.shaderName,q,c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp2?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.matcap?"#define USE_MATCAP":"",c.envMap?"#define USE_ENVMAP":"",c.envMap?"#define "+m:"",c.envMap?"#define "+n:"",c.envMap?"#define "+o:"",c.lightMap?"#define USE_LIGHTMAP":"",c.aoMap?"#define USE_AOMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.normalMap&&c.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",c.normalMap&&c.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",c.clearcoat?"#define USE_CLEARCOAT":"",c.clearcoatMap?"#define USE_CLEARCOATMAP":"",c.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",c.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",c.specularColorMap?"#define USE_SPECULARCOLORMAP":"",c.roughnessMap?"#define USE_ROUGHNESSMAP":"",c.metalnessMap?"#define USE_METALNESSMAP":"",c.alphaMap?"#define USE_ALPHAMAP":"",c.alphaTest?"#define USE_ALPHATEST":"",c.sheen?"#define USE_SHEEN":"",c.sheenColorMap?"#define USE_SHEENCOLORMAP":"",c.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",c.transmission?"#define USE_TRANSMISSION":"",c.transmissionMap?"#define USE_TRANSMISSIONMAP":"",c.thicknessMap?"#define USE_THICKNESSMAP":"",c.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",c.vertexTangents?"#define USE_TANGENT":"",c.vertexColors||c.instancingColor?"#define USE_COLOR":"",c.vertexAlphas?"#define USE_COLOR_ALPHA":"",c.vertexUvs?"#define USE_UV":"",c.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",c.gradientMap?"#define USE_GRADIENTMAP":"",c.flatShading?"#define FLAT_SHADED":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+l:"",c.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",c.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",c.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",c.logarithmicDepthBuffer&&c.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(c.extensionShaderTextureLOD||c.envMap)&&c.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==c.toneMapping?"#define TONE_MAPPING":"",0!==c.toneMapping?ML.tonemapping_pars_fragment:"",0!==c.toneMapping?function(a,b){let c;switch(b){case 1:c="Linear";break;case 2:c="Reinhard";break;case 3:c="OptimizedCineon";break;case 4:c="ACESFilmic";break;case 5:c="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",b),c="Linear"}return"vec3 "+a+"( vec3 color ) { return "+c+"ToneMapping( color ); }"}("toneMapping",c.toneMapping):"",c.dithering?"#define DITHERING":"",c.transparent?"":"#define OPAQUE",ML.encodings_pars_fragment,function(a,b){const c=function(a){switch(a){case 3000:return["Linear","( value )"];case 3001:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",a),["Linear","( value )"]}}(b);return"vec4 "+a+"( vec4 value ) { return LinearTo"+c[0]+c[1]+"; }"}("linearToOutputTexel",c.outputEncoding),c.depthPacking?"#define DEPTH_PACKING "+c.depthPacking:"","\n"].filter(JP).join("\n")),i=LP(i=KP(i=NP(i),c),c),j=NP(j),j=KP(j,c),j=LP(j,c),i=RP(i),j=RP(j),c.isWebGL2&& !0!==c.isRawShaderMaterial&&(u="#version 300 es\n",s="precision mediump sampler2DArray;\n#define attribute in\n#define varying out\n#define texture2D texture\n"+s,t=["#define varying in",c.glslVersion===g?"":"layout(location = 0) out highp vec4 pc_fragColor;",c.glslVersion===g?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+t);const v=GP(f,35633,u+s+i),w=GP(f,35632,u+t+j);if(f.attachShader(r,v),f.attachShader(r,w),void 0!==c.index0AttributeName?f.bindAttribLocation(r,0,c.index0AttributeName):!0===c.morphTargets&&f.bindAttribLocation(r,0,"position"),f.linkProgram(r),a.debug.checkShaderErrors){const x=f.getProgramInfoLog(r).trim(),y=f.getShaderInfoLog(v).trim(),z=f.getShaderInfoLog(w).trim();let A=!0,B=!0;if(!1===f.getProgramParameter(r,35714)){A=!1;const C=IP(f,v,"vertex"),D=IP(f,w,"fragment");console.error("THREE.WebGLProgram: Shader Error "+f.getError()+" - VALIDATE_STATUS "+f.getProgramParameter(r,35715)+"\n\nProgram Info Log: "+x+"\n"+C+"\n"+D)}else""!==x?console.warn("THREE.WebGLProgram: Program Info Log:",x):(""===y||""===z)&&(B=!1);B&&(this.diagnostics={runnable:A,programLog:x,vertexShader:{log:y,prefix:s},fragmentShader:{log:z,prefix:t}})}f.deleteShader(v),f.deleteShader(w);let E;this.getUniforms=function(){return void 0===E&&(E=new FP(f,r)),E};let F;return this.getAttributes=function(){return void 0===F&&(F=(function(a,b){const c={},d=a.getProgramParameter(b,35721);for(let e=0;e<d;e++){const f=a.getActiveAttrib(b,e),g=f.name;let h=1;35674===f.type&&(h=2),35675===f.type&&(h=3),35676===f.type&&(h=4),c[g]={type:f.type,location:a.getAttribLocation(b,g),locationSize:h}}return c})(f,r)),F},this.destroy=function(){d.releaseStatesOfProgram(this),f.deleteProgram(r),this.program=void 0},this.name=c.shaderName,this.id=HP++,this.cacheKey=b,this.usedTimes=1,this.program=r,this.vertexShader=v,this.fragmentShader=w,this}let WP=0;class XP{constructor(){this.shaderCache=new Map(),this.materialCache=new Map()}update(YP){const ZP=YP.vertexShader,$P=YP.fragmentShader,_P=this._getShaderStage(ZP),aQ=this._getShaderStage($P),bQ=this._getShaderCacheForMaterial(YP);return!1===bQ.has(_P)&&(bQ.add(_P),_P.usedTimes++),!1===bQ.has(aQ)&&(bQ.add(aQ),aQ.usedTimes++),this}remove(cQ){const dQ=this.materialCache.get(cQ);for(const eQ of dQ)eQ.usedTimes--,0===eQ.usedTimes&&this.shaderCache.delete(eQ);return this.materialCache.delete(cQ),this}getVertexShaderID(fQ){return this._getShaderStage(fQ.vertexShader).id}getFragmentShaderID(gQ){return this._getShaderStage(gQ.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(hQ){const iQ=this.materialCache;return!1===iQ.has(hQ)&&iQ.set(hQ,new Set()),iQ.get(hQ)}_getShaderStage(jQ){const kQ=this.shaderCache;if(!1===kQ.has(jQ)){const lQ=new mQ();kQ.set(jQ,lQ)}return kQ.get(jQ)}}class mQ{constructor(){this.id=WP++,this.usedTimes=0}}function nQ(a,b,c,d,e,g,h){const i=new gw(),j=new XP(),k=[],l=e.isWebGL2,m=e.logarithmicDepthBuffer,n=e.floatVertexTextures,o=e.maxVertexUniforms,p=e.vertexTextures;let q=e.precision;const r={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(g,i,k,s,t){const u=s.fog,v=g.isMeshStandardMaterial?s.environment:null,w=(g.isMeshStandardMaterial?c:b).get(g.envMap||v),x=r[g.type],y=t.isSkinnedMesh?function(a){const b=a.skeleton,c=b.bones;if(n)return 1024;{const d=o,e=Math.floor((d-20)/4),f=Math.min(e,c.length);return f<c.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+c.length+" bones. This GPU supports "+f+"."),0):f}}(t):0;null!==g.precision&&(q=e.getMaxPrecision(g.precision))!==g.precision&&console.warn("THREE.WebGLProgram.getParameters:",g.precision,"not supported, using",q,"instead.");let z,A,B,C;if(x){const D=OL[x];z=D.vertexShader,A=D.fragmentShader}else z=g.vertexShader,A=g.fragmentShader,j.update(g),B=j.getVertexShaderID(g),C=j.getFragmentShaderID(g);const E=a.getRenderTarget(),F=g.alphaTest>0,G=g.clearcoat>0,H={isWebGL2:l,shaderID:x,shaderName:g.type,vertexShader:z,fragmentShader:A,defines:g.defines,customVertexShaderID:B,customFragmentShaderID:C,isRawShaderMaterial:!0===g.isRawShaderMaterial,glslVersion:g.glslVersion,precision:q,instancing:!0===t.isInstancedMesh,instancingColor:!0===t.isInstancedMesh&&null!==t.instanceColor,supportsVertexTextures:p,outputEncoding:null===E?a.outputEncoding:!0===E.isXRRenderTarget?E.texture.encoding:3000,map:!!g.map,matcap:!!g.matcap,envMap:!!w,envMapMode:w&&w.mapping,envMapCubeUV:!!w&&(306===w.mapping||307===w.mapping),lightMap:!!g.lightMap,aoMap:!!g.aoMap,emissiveMap:!!g.emissiveMap,bumpMap:!!g.bumpMap,normalMap:!!g.normalMap,objectSpaceNormalMap:1===g.normalMapType,tangentSpaceNormalMap:0===g.normalMapType,decodeVideoTexture:!!g.map&& !0===g.map.isVideoTexture&&3001===g.map.encoding,clearcoat:G,clearcoatMap:G&&!!g.clearcoatMap,clearcoatRoughnessMap:G&&!!g.clearcoatRoughnessMap,clearcoatNormalMap:G&&!!g.clearcoatNormalMap,displacementMap:!!g.displacementMap,roughnessMap:!!g.roughnessMap,metalnessMap:!!g.metalnessMap,specularMap:!!g.specularMap,specularIntensityMap:!!g.specularIntensityMap,specularColorMap:!!g.specularColorMap,transparent:g.transparent,alphaMap:!!g.alphaMap,alphaTest:F,gradientMap:!!g.gradientMap,sheen:g.sheen>0,sheenColorMap:!!g.sheenColorMap,sheenRoughnessMap:!!g.sheenRoughnessMap,transmission:g.transmission>0,transmissionMap:!!g.transmissionMap,thicknessMap:!!g.thicknessMap,combine:g.combine,vertexTangents:!!g.normalMap&&!!t.geometry&&!!t.geometry.attributes.tangent,vertexColors:g.vertexColors,vertexAlphas:!0===g.vertexColors&&!!t.geometry&&!!t.geometry.attributes.color&&4===t.geometry.attributes.color.itemSize,vertexUvs:!!g.map||!!g.bumpMap||!!g.normalMap||!!g.specularMap||!!g.alphaMap||!!g.emissiveMap||!!g.roughnessMap||!!g.metalnessMap||!!g.clearcoatMap||!!g.clearcoatRoughnessMap||!!g.clearcoatNormalMap||!!g.displacementMap||!!g.transmissionMap||!!g.thicknessMap||!!g.specularIntensityMap||!!g.specularColorMap||!!g.sheenColorMap||!!g.sheenRoughnessMap,uvsVertexOnly:!(g.map||g.bumpMap||g.normalMap||g.specularMap||g.alphaMap||g.emissiveMap||g.roughnessMap||g.metalnessMap||g.clearcoatNormalMap||g.transmission>0||g.transmissionMap||g.thicknessMap||g.specularIntensityMap||g.specularColorMap||g.sheen>0||g.sheenColorMap||g.sheenRoughnessMap)&&!!g.displacementMap,fog:!!u,useFog:g.fog,fogExp2:u&&u.isFogExp2,flatShading:!!g.flatShading,sizeAttenuation:g.sizeAttenuation,logarithmicDepthBuffer:m,skinning:!0===t.isSkinnedMesh&&y>0,maxBones:y,useVertexTexture:n,morphTargets:!!t.geometry&&!!t.geometry.morphAttributes.position,morphNormals:!!t.geometry&&!!t.geometry.morphAttributes.normal,morphTargetsCount:t.geometry&&t.geometry.morphAttributes.position?t.geometry.morphAttributes.position.length:0,numDirLights:i.directional.length,numPointLights:i.point.length,numSpotLights:i.spot.length,numRectAreaLights:i.rectArea.length,numHemiLights:i.hemi.length,numDirLightShadows:i.directionalShadowMap.length,numPointLightShadows:i.pointShadowMap.length,numSpotLightShadows:i.spotShadowMap.length,numClippingPlanes:h.numPlanes,numClipIntersection:h.numIntersection,dithering:g.dithering,shadowMapEnabled:a.shadowMap.enabled&&k.length>0,shadowMapType:a.shadowMap.type,toneMapping:g.toneMapped?a.toneMapping:0,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:g.premultipliedAlpha,doubleSided:2===g.side,flipSided:g.side===f,depthPacking:void 0!==g.depthPacking&&g.depthPacking,index0AttributeName:g.index0AttributeName,extensionDerivatives:g.extensions&&g.extensions.derivatives,extensionFragDepth:g.extensions&&g.extensions.fragDepth,extensionDrawBuffers:g.extensions&&g.extensions.drawBuffers,extensionShaderTextureLOD:g.extensions&&g.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||d.has("EXT_frag_depth"),rendererExtensionDrawBuffers:l||d.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:l||d.has("EXT_shader_texture_lod"),customProgramCacheKey:g.customProgramCacheKey()};return H},getProgramCacheKey:function(b){var c,d,e,f;const g=[];if(b.shaderID?g.push(b.shaderID):(g.push(b.customVertexShaderID),g.push(b.customFragmentShaderID)),void 0!==b.defines)for(const h in b.defines)g.push(h),g.push(b.defines[h]);return!1===b.isRawShaderMaterial&&(c=g,d=b,c.push(d.precision),c.push(d.outputEncoding),c.push(d.envMapMode),c.push(d.combine),c.push(d.vertexUvs),c.push(d.fogExp2),c.push(d.sizeAttenuation),c.push(d.maxBones),c.push(d.morphTargetsCount),c.push(d.numDirLights),c.push(d.numPointLights),c.push(d.numSpotLights),c.push(d.numHemiLights),c.push(d.numRectAreaLights),c.push(d.numDirLightShadows),c.push(d.numPointLightShadows),c.push(d.numSpotLightShadows),c.push(d.shadowMapType),c.push(d.toneMapping),c.push(d.numClippingPlanes),c.push(d.numClipIntersection),e=g,f=b,i.disableAll(),f.isWebGL2&&i.enable(0),f.supportsVertexTextures&&i.enable(1),f.instancing&&i.enable(2),f.instancingColor&&i.enable(3),f.map&&i.enable(4),f.matcap&&i.enable(5),f.envMap&&i.enable(6),f.envMapCubeUV&&i.enable(7),f.lightMap&&i.enable(8),f.aoMap&&i.enable(9),f.emissiveMap&&i.enable(10),f.bumpMap&&i.enable(11),f.normalMap&&i.enable(12),f.objectSpaceNormalMap&&i.enable(13),f.tangentSpaceNormalMap&&i.enable(14),f.clearcoat&&i.enable(15),f.clearcoatMap&&i.enable(16),f.clearcoatRoughnessMap&&i.enable(17),f.clearcoatNormalMap&&i.enable(18),f.displacementMap&&i.enable(19),f.specularMap&&i.enable(20),f.roughnessMap&&i.enable(21),f.metalnessMap&&i.enable(22),f.gradientMap&&i.enable(23),f.alphaMap&&i.enable(24),f.alphaTest&&i.enable(25),f.vertexColors&&i.enable(26),f.vertexAlphas&&i.enable(27),f.vertexUvs&&i.enable(28),f.vertexTangents&&i.enable(29),f.uvsVertexOnly&&i.enable(30),f.fog&&i.enable(31),e.push(i.mask),i.disableAll(),f.useFog&&i.enable(0),f.flatShading&&i.enable(1),f.logarithmicDepthBuffer&&i.enable(2),f.skinning&&i.enable(3),f.useVertexTexture&&i.enable(4),f.morphTargets&&i.enable(5),f.morphNormals&&i.enable(6),f.premultipliedAlpha&&i.enable(7),f.shadowMapEnabled&&i.enable(8),f.physicallyCorrectLights&&i.enable(9),f.doubleSided&&i.enable(10),f.flipSided&&i.enable(11),f.depthPacking&&i.enable(12),f.dithering&&i.enable(13),f.specularIntensityMap&&i.enable(14),f.specularColorMap&&i.enable(15),f.transmission&&i.enable(16),f.transmissionMap&&i.enable(17),f.thicknessMap&&i.enable(18),f.sheen&&i.enable(19),f.sheenColorMap&&i.enable(20),f.sheenRoughnessMap&&i.enable(21),f.decodeVideoTexture&&i.enable(22),f.transparent&&i.enable(23),e.push(i.mask),g.push(a.outputEncoding)),g.push(b.customProgramCacheKey),g.join()},getUniforms:function(a){const b=r[a.type];let c;if(b){const d=OL[b];c=EH.clone(d.uniforms)}else c=a.uniforms;return c},acquireProgram:function(b,c){let d;for(let e=0,f=k.length;e<f;e++){const h=k[e];if(h.cacheKey===c){d=h,++d.usedTimes;break}}return void 0===d&&(d=new VP(a,c,b,g),k.push(d)),d},releaseProgram:function(a){if(0== --a.usedTimes){const b=k.indexOf(a);k[b]=k[k.length-1],k.pop(),a.destroy()}},releaseShaderCache:function(a){j.remove(a)},programs:k,dispose:function(){j.dispose()}}}function oQ(){let a=new WeakMap();return{get:function(b){let c=a.get(b);return void 0===c&&(c={},a.set(b,c)),c},remove:function(b){a.delete(b)},update:function(b,c,d){a.get(b)[c]=d},dispose:function(){a=new WeakMap()}}}function pQ(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function qQ(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function rQ(){const a=[];let b=0;const c=[],d=[],e=[];function f(c,d,e,f,g,h){let i=a[b];return void 0===i?(i={id:c.id,object:c,geometry:d,material:e,groupOrder:f,renderOrder:c.renderOrder,z:g,group:h},a[b]=i):(i.id=c.id,i.object=c,i.geometry=d,i.material=e,i.groupOrder=f,i.renderOrder=c.renderOrder,i.z=g,i.group=h),b++,i}return{opaque:c,transmissive:d,transparent:e,init:function(){b=0,c.length=0,d.length=0,e.length=0},push:function(a,b,g,h,i,j){const k=f(a,b,g,h,i,j);g.transmission>0?d.push(k):!0===g.transparent?e.push(k):c.push(k)},unshift:function(a,b,g,h,i,j){const k=f(a,b,g,h,i,j);g.transmission>0?d.unshift(k):!0===g.transparent?e.unshift(k):c.unshift(k)},finish:function(){for(let c=b,d=a.length;c<d;c++){const e=a[c];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(a,b){c.length>1&&c.sort(a||pQ),d.length>1&&d.sort(b||qQ),e.length>1&&e.sort(b||qQ)}}}function sQ(){let a=new WeakMap();return{get:function(b,c){let d;return!1===a.has(b)?(d=new rQ(),a.set(b,[d])):c>=a.get(b).length?(d=new rQ(),a.get(b).push(d)):d=a.get(b)[c],d},dispose:function(){a=new WeakMap()}}}function tQ(){const a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];let c;switch(b.type){case"DirectionalLight":c={direction:new Xj(),color:new ld()};break;case"SpotLight":c={position:new Xj(),direction:new Xj(),color:new ld(),distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":c={position:new Xj(),color:new ld(),distance:0,decay:0};break;case"HemisphereLight":c={direction:new Xj(),skyColor:new ld(),groundColor:new ld()};break;case"RectAreaLight":c={color:new ld(),position:new Xj(),halfWidth:new Xj(),halfHeight:new Xj()};break}return a[b.id]=c,c}}}let uQ=0;function vQ(a,b){return(b.castShadow?1:0)-(a.castShadow?1:0)}function wQ(a,b){const c=new tQ(),d=function(){const a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];let c;switch(b.type){case"DirectionalLight":c={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new L()};break;case"SpotLight":c={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new L()};break;case"PointLight":c={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new L(),shadowCameraNear:1,shadowCameraFar:1000};break}return a[b.id]=c,c}}}(),e={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let f=0;f<9;f++)e.probe.push(new Xj());const g=new Xj(),h=new pq(),i=new pq();return{setup:function(f,g){let h=0,i=0,j=0;for(let k=0;k<9;k++)e.probe[k].set(0,0,0);let l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f.sort(vQ);const t=!0!==g?Math.PI:1;for(let u=0,v=f.length;u<v;u++){const w=f[u],x=w.color,y=w.intensity,z=w.distance,A=w.shadow&&w.shadow.map?w.shadow.map.texture:null;if(w.isAmbientLight)h+=x.r*y*t,i+=x.g*y*t,j+=x.b*y*t;else if(w.isLightProbe)for(let B=0;B<9;B++)e.probe[B].addScaledVector(w.sh.coefficients[B],y);else if(w.isDirectionalLight){const C=c.get(w);if(C.color.copy(w.color).multiplyScalar(w.intensity*t),w.castShadow){const D=w.shadow,E=d.get(w);E.shadowBias=D.bias,E.shadowNormalBias=D.normalBias,E.shadowRadius=D.radius,E.shadowMapSize=D.mapSize,e.directionalShadow[l]=E,e.directionalShadowMap[l]=A,e.directionalShadowMatrix[l]=w.shadow.matrix,q++}e.directional[l]=C,l++}else if(w.isSpotLight){const F=c.get(w);if(F.position.setFromMatrixPosition(w.matrixWorld),F.color.copy(x).multiplyScalar(y*t),F.distance=z,F.coneCos=Math.cos(w.angle),F.penumbraCos=Math.cos(w.angle*(1-w.penumbra)),F.decay=w.decay,w.castShadow){const G=w.shadow,H=d.get(w);H.shadowBias=G.bias,H.shadowNormalBias=G.normalBias,H.shadowRadius=G.radius,H.shadowMapSize=G.mapSize,e.spotShadow[n]=H,e.spotShadowMap[n]=A,e.spotShadowMatrix[n]=w.shadow.matrix,s++}e.spot[n]=F,n++}else if(w.isRectAreaLight){const I=c.get(w);I.color.copy(x).multiplyScalar(y),I.halfWidth.set(0.5*w.width,0,0),I.halfHeight.set(0,0.5*w.height,0),e.rectArea[o]=I,o++}else if(w.isPointLight){const J=c.get(w);if(J.color.copy(w.color).multiplyScalar(w.intensity*t),J.distance=w.distance,J.decay=w.decay,w.castShadow){const K=w.shadow,L=d.get(w);L.shadowBias=K.bias,L.shadowNormalBias=K.normalBias,L.shadowRadius=K.radius,L.shadowMapSize=K.mapSize,L.shadowCameraNear=K.camera.near,L.shadowCameraFar=K.camera.far,e.pointShadow[m]=L,e.pointShadowMap[m]=A,e.pointShadowMatrix[m]=w.shadow.matrix,r++}e.point[m]=J,m++}else if(w.isHemisphereLight){const M=c.get(w);M.skyColor.copy(w.color).multiplyScalar(y*t),M.groundColor.copy(w.groundColor).multiplyScalar(y*t),e.hemi[p]=M,p++}}o>0&&(b.isWebGL2?(e.rectAreaLTC1=NL.LTC_FLOAT_1,e.rectAreaLTC2=NL.LTC_FLOAT_2):!0===a.has("OES_texture_float_linear")?(e.rectAreaLTC1=NL.LTC_FLOAT_1,e.rectAreaLTC2=NL.LTC_FLOAT_2):!0===a.has("OES_texture_half_float_linear")?(e.rectAreaLTC1=NL.LTC_HALF_1,e.rectAreaLTC2=NL.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),e.ambient[0]=h,e.ambient[1]=i,e.ambient[2]=j;const N=e.hash;(N.directionalLength!==l||N.pointLength!==m||N.spotLength!==n||N.rectAreaLength!==o||N.hemiLength!==p||N.numDirectionalShadows!==q||N.numPointShadows!==r||N.numSpotShadows!==s)&&(e.directional.length=l,e.spot.length=n,e.rectArea.length=o,e.point.length=m,e.hemi.length=p,e.directionalShadow.length=q,e.directionalShadowMap.length=q,e.pointShadow.length=r,e.pointShadowMap.length=r,e.spotShadow.length=s,e.spotShadowMap.length=s,e.directionalShadowMatrix.length=q,e.pointShadowMatrix.length=r,e.spotShadowMatrix.length=s,N.directionalLength=l,N.pointLength=m,N.spotLength=n,N.rectAreaLength=o,N.hemiLength=p,N.numDirectionalShadows=q,N.numPointShadows=r,N.numSpotShadows=s,e.version=uQ++)},setupView:function(a,b){let c=0,d=0,f=0,j=0,k=0;const l=b.matrixWorldInverse;for(let m=0,n=a.length;m<n;m++){const o=a[m];if(o.isDirectionalLight){const p=e.directional[c];p.direction.setFromMatrixPosition(o.matrixWorld),g.setFromMatrixPosition(o.target.matrixWorld),p.direction.sub(g),p.direction.transformDirection(l),c++}else if(o.isSpotLight){const q=e.spot[f];q.position.setFromMatrixPosition(o.matrixWorld),q.position.applyMatrix4(l),q.direction.setFromMatrixPosition(o.matrixWorld),g.setFromMatrixPosition(o.target.matrixWorld),q.direction.sub(g),q.direction.transformDirection(l),f++}else if(o.isRectAreaLight){const r=e.rectArea[j];r.position.setFromMatrixPosition(o.matrixWorld),r.position.applyMatrix4(l),i.identity(),h.copy(o.matrixWorld),h.premultiply(l),i.extractRotation(h),r.halfWidth.set(0.5*o.width,0,0),r.halfHeight.set(0,0.5*o.height,0),r.halfWidth.applyMatrix4(i),r.halfHeight.applyMatrix4(i),j++}else if(o.isPointLight){const s=e.point[d];s.position.setFromMatrixPosition(o.matrixWorld),s.position.applyMatrix4(l),d++}else if(o.isHemisphereLight){const t=e.hemi[k];t.direction.setFromMatrixPosition(o.matrixWorld),t.direction.transformDirection(l),t.direction.normalize(),k++}}},state:e}}function xQ(a,b){const c=new wQ(a,b),d=[],e=[];return{init:function(){d.length=0,e.length=0},state:{lightsArray:d,shadowsArray:e,lights:c},setupLights:function(a){c.setup(d,a)},setupLightsView:function(a){c.setupView(d,a)},pushLight:function(a){d.push(a)},pushShadow:function(a){e.push(a)}}}function yQ(a,b){let c=new WeakMap();return{get:function(d,e=0){let f;return!1===c.has(d)?(f=new xQ(a,b),c.set(d,[f])):e>=c.get(d).length?(f=new xQ(a,b),c.get(d).push(f)):f=c.get(d)[e],f},dispose:function(){c=new WeakMap()}}}class zQ extends eA{constructor(AQ){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(AQ)}copy(BQ){return super.copy(BQ),this.depthPacking=BQ.depthPacking,this.map=BQ.map,this.alphaMap=BQ.alphaMap,this.displacementMap=BQ.displacementMap,this.displacementScale=BQ.displacementScale,this.displacementBias=BQ.displacementBias,this.wireframe=BQ.wireframe,this.wireframeLinewidth=BQ.wireframeLinewidth,this}}zQ.prototype.isMeshDepthMaterial=!0;class CQ extends eA{constructor(DQ){super(),this.type="MeshDistanceMaterial",this.referencePosition=new Xj(),this.nearDistance=1,this.farDistance=1000,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(DQ)}copy(EQ){return super.copy(EQ),this.referencePosition.copy(EQ.referencePosition),this.nearDistance=EQ.nearDistance,this.farDistance=EQ.farDistance,this.map=EQ.map,this.alphaMap=EQ.alphaMap,this.displacementMap=EQ.displacementMap,this.displacementScale=EQ.displacementScale,this.displacementBias=EQ.displacementBias,this}}function FQ(a,b,c){let d=new kK();const e=new L(),g=new L(),h=new hf(),i=new zQ({depthPacking:3201}),j=new CQ(),k={},l=c.maxTextureSize,m={0:f,1:0,2:2},n=new FH({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new L()},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),o=n.clone();o.defines.HORIZONTAL_PASS=1;const p=new uC();p.setAttribute("position",new BA(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));const q=new dG(p,n),r=this;function s(c,d){const e=b.update(q);n.defines.VSM_SAMPLES!==c.blurSamples&&(n.defines.VSM_SAMPLES=c.blurSamples,o.defines.VSM_SAMPLES=c.blurSamples,n.needsUpdate=!0,o.needsUpdate=!0),n.uniforms.shadow_pass.value=c.map.texture,n.uniforms.resolution.value=c.mapSize,n.uniforms.radius.value=c.radius,a.setRenderTarget(c.mapPass),a.clear(),a.renderBufferDirect(d,null,e,n,q,null),o.uniforms.shadow_pass.value=c.mapPass.texture,o.uniforms.resolution.value=c.mapSize,o.uniforms.radius.value=c.radius,a.setRenderTarget(c.map),a.clear(),a.renderBufferDirect(d,null,e,o,q,null)}function t(b,c,d,e,f,g,h){let l=null;const n=!0===e.isPointLight?b.customDistanceMaterial:b.customDepthMaterial;if(l=void 0!==n?n:!0===e.isPointLight?j:i,a.localClippingEnabled&& !0===d.clipShadows&&0!==d.clippingPlanes.length||d.displacementMap&&0!==d.displacementScale||d.alphaMap&&d.alphaTest>0){const o=l.uuid,p=d.uuid;let q=k[o];void 0===q&&(q={},k[o]=q);let r=q[p];void 0===r&&(r=l.clone(),q[p]=r),l=r}return l.visible=d.visible,l.wireframe=d.wireframe,3===h?l.side=null!==d.shadowSide?d.shadowSide:d.side:l.side=null!==d.shadowSide?d.shadowSide:m[d.side],l.alphaMap=d.alphaMap,l.alphaTest=d.alphaTest,l.clipShadows=d.clipShadows,l.clippingPlanes=d.clippingPlanes,l.clipIntersection=d.clipIntersection,l.displacementMap=d.displacementMap,l.displacementScale=d.displacementScale,l.displacementBias=d.displacementBias,l.wireframeLinewidth=d.wireframeLinewidth,l.linewidth=d.linewidth,!0===e.isPointLight&& !0===l.isMeshDistanceMaterial&&(l.referencePosition.setFromMatrixPosition(e.matrixWorld),l.nearDistance=f,l.farDistance=g),l}function u(c,e,f,g,h){if(!1===c.visible)return;const i=c.layers.test(e.layers);if(i&&(c.isMesh||c.isLine||c.isPoints)&&(c.castShadow||c.receiveShadow&&3===h)&&(!c.frustumCulled||d.intersectsObject(c))){c.modelViewMatrix.multiplyMatrices(f.matrixWorldInverse,c.matrixWorld);const j=b.update(c),k=c.material;if(Array.isArray(k)){const l=j.groups;for(let m=0,n=l.length;m<n;m++){const o=l[m],p=k[o.materialIndex];if(p&&p.visible){const q=t(c,j,p,g,f.near,f.far,h);a.renderBufferDirect(f,null,j,q,c,o)}}}else if(k.visible){const r=t(c,j,k,g,f.near,f.far,h);a.renderBufferDirect(f,null,j,r,c,null)}}const s=c.children;for(let v=0,w=s.length;v<w;v++)u(s[v],e,f,g,h)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(b,c,f){if(!1===r.enabled)return;if(!1===r.autoUpdate&& !1===r.needsUpdate)return;if(0===b.length)return;const i=a.getRenderTarget(),j=a.getActiveCubeFace(),k=a.getActiveMipmapLevel(),m=a.state;m.setBlending(0),m.buffers.color.setClear(1,1,1,1),m.buffers.depth.setTest(!0),m.setScissorTest(!1);for(let n=0,o=b.length;n<o;n++){const p=b[n],q=p.shadow;if(void 0===q){console.warn("THREE.WebGLShadowMap:",p,"has no shadow.");continue}if(!1===q.autoUpdate&& !1===q.needsUpdate)continue;e.copy(q.mapSize);const t=q.getFrameExtents();if(e.multiply(t),g.copy(q.mapSize),(e.x>l||e.y>l)&&(e.x>l&&(g.x=Math.floor(l/t.x),e.x=g.x*t.x,q.mapSize.x=g.x),e.y>l&&(g.y=Math.floor(l/t.y),e.y=g.y*t.y,q.mapSize.y=g.y)),null===q.map&&!q.isPointLightShadow&&3===this.type){const v={minFilter:1006,magFilter:1006,format:1023};q.map=new Rg(e.x,e.y,v),q.map.texture.name=p.name+".shadowMap",q.mapPass=new Rg(e.x,e.y,v),q.camera.updateProjectionMatrix()}if(null===q.map){const w={minFilter:1003,magFilter:1003,format:1023};q.map=new Rg(e.x,e.y,w),q.map.texture.name=p.name+".shadowMap",q.camera.updateProjectionMatrix()}a.setRenderTarget(q.map),a.clear();const x=q.getViewportCount();for(let y=0;y<x;y++){const z=q.getViewport(y);h.set(g.x*z.x,g.y*z.y,g.x*z.z,g.y*z.w),m.viewport(h),q.updateMatrices(p,y),d=q.getFrustum(),u(c,f,q.camera,p,this.type)}q.isPointLightShadow||3!==this.type||s(q,f),q.needsUpdate=!1}r.needsUpdate=!1,a.setRenderTarget(i,j,k)}}function GQ(a,b,c){const d=c.isWebGL2,e=new function(){let b=!1;const c=new hf();let d=null;const e=new hf(0,0,0,0);return{setMask:function(c){d===c||b||(a.colorMask(c,c,c,c),d=c)},setLocked:function(a){b=a},setClear:function(b,d,f,g,h){!0===h&&(b*=g,d*=g,f*=g),c.set(b,d,f,g),!1===e.equals(c)&&(a.clearColor(b,d,f,g),e.copy(c))},reset:function(){b=!1,d=null,e.set(-1,0,0,0)}}}(),g=new function(){let b=!1,c=null,d=null,e=null;return{setTest:function(a){a?M(2929):N(2929)},setMask:function(d){c===d||b||(a.depthMask(d),c=d)},setFunc:function(b){if(d!==b){if(b)switch(b){case 0:a.depthFunc(512);break;case 1:a.depthFunc(519);break;case 2:a.depthFunc(513);break;case 3:a.depthFunc(515);break;case 4:a.depthFunc(514);break;case 5:a.depthFunc(518);break;case 6:a.depthFunc(516);break;case 7:a.depthFunc(517);break;default:a.depthFunc(515)}else a.depthFunc(515);d=b}},setLocked:function(a){b=a},setClear:function(b){e!==b&&(a.clearDepth(b),e=b)},reset:function(){b=!1,c=null,d=null,e=null}}}(),h=new function(){let b=!1,c=null,d=null,e=null,f=null,g=null,h=null,i=null,j=null;return{setTest:function(a){b||(a?M(2960):N(2960))},setMask:function(d){c===d||b||(a.stencilMask(d),c=d)},setFunc:function(b,c,g){(d!==b||e!==c||f!==g)&&(a.stencilFunc(b,c,g),d=b,e=c,f=g)},setOp:function(b,c,d){(g!==b||h!==c||i!==d)&&(a.stencilOp(b,c,d),g=b,h=c,i=d)},setLocked:function(a){b=a},setClear:function(b){j!==b&&(a.clearStencil(b),j=b)},reset:function(){b=!1,c=null,d=null,e=null,f=null,g=null,h=null,i=null,j=null}}}();let i={},j={},k=new WeakMap(),l=[],m=null,n=!1,o=null,p=null,q=null,r=null,s=null,t=null,u=null,v=!1,w=null,x=null,y=null,z=null,A=null;const B=a.getParameter(35661);let C=!1;const D=a.getParameter(7938);-1!==D.indexOf("WebGL")?C=parseFloat(/^WebGL (\d)/.exec(D)[1])>=1:-1!==D.indexOf("OpenGL ES")&&(C=parseFloat(/^OpenGL ES (\d)/.exec(D)[1])>=2);let E=null,F={};const G=a.getParameter(3088),H=a.getParameter(2978),I=new hf().fromArray(G),J=new hf().fromArray(H);function K(b,c,d){const e=new Uint8Array(4),f=a.createTexture();a.bindTexture(b,f),a.texParameteri(b,10241,9728),a.texParameteri(b,10240,9728);for(let g=0;g<d;g++)a.texImage2D(c+g,0,6408,1,1,0,6408,5121,e);return f}const L={};function M(b){!0!==i[b]&&(a.enable(b),i[b]=!0)}function N(b){!1!==i[b]&&(a.disable(b),i[b]=!1)}L[3553]=K(3553,3553,1),L[34067]=K(34067,34069,6),e.setClear(0,0,0,1),g.setClear(1),h.setClear(0),M(2929),g.setFunc(3),S(!1),T(1),M(2884),R(0);const O={[100]:32774,[101]:32778,[102]:32779};if(d)O[103]=32775,O[104]=32776;else{const P=b.get("EXT_blend_minmax");null!==P&&(O[103]=P.MIN_EXT,O[104]=P.MAX_EXT)}const Q={[200]:0,[201]:1,[202]:768,[204]:770,[210]:776,[208]:774,[206]:772,[203]:769,[205]:771,[209]:775,[207]:773};function R(b,c,d,e,f,g,h,i){if(0===b){!0===n&&(N(3042),n=!1);return}if(!1===n&&(M(3042),n=!0),5!==b){if(b!==o||i!==v){if((100!==p||100!==s)&&(a.blendEquation(32774),p=100,s=100),i)switch(b){case 1:a.blendFuncSeparate(1,771,1,771);break;case 2:a.blendFunc(1,1);break;case 3:a.blendFuncSeparate(0,769,0,1);break;case 4:a.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}else switch(b){case 1:a.blendFuncSeparate(770,771,1,771);break;case 2:a.blendFunc(770,1);break;case 3:a.blendFuncSeparate(0,769,0,1);break;case 4:a.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}q=null,r=null,t=null,u=null,o=b,v=i}return}f=f||c,g=g||d,h=h||e,(c!==p||f!==s)&&(a.blendEquationSeparate(O[c],O[f]),p=c,s=f),(d!==q||e!==r||g!==t||h!==u)&&(a.blendFuncSeparate(Q[d],Q[e],Q[g],Q[h]),q=d,r=e,t=g,u=h),o=b,v=null}function S(b){w!==b&&(b?a.frontFace(2304):a.frontFace(2305),w=b)}function T(b){0!==b?(M(2884),b!==x&&(1===b?a.cullFace(1029):2===b?a.cullFace(1028):a.cullFace(1032))):N(2884),x=b}function U(b,c,d){b?(M(32823),(z!==c||A!==d)&&(a.polygonOffset(c,d),z=c,A=d)):N(32823)}function V(b){void 0===b&&(b=33984+B-1),E!==b&&(a.activeTexture(b),E=b)}return{buffers:{color:e,depth:g,stencil:h},enable:M,disable:N,bindFramebuffer:function(b,c){return j[b]!==c&&(a.bindFramebuffer(b,c),j[b]=c,d&&(36009===b&&(j[36160]=c),36160===b&&(j[36009]=c)),!0)},drawBuffers:function(d,e){let f=l,g=!1;if(d)if(void 0===(f=k.get(e))&&(f=[],k.set(e,f)),d.isWebGLMultipleRenderTargets){const h=d.texture;if(f.length!==h.length||36064!==f[0]){for(let i=0,j=h.length;i<j;i++)f[i]=36064+i;f.length=h.length,g=!0}}else 36064!==f[0]&&(f[0]=36064,g=!0);else 1029!==f[0]&&(f[0]=1029,g=!0);g&&(c.isWebGL2?a.drawBuffers(f):b.get("WEBGL_draw_buffers").drawBuffersWEBGL(f))},useProgram:function(b){return m!==b&&(a.useProgram(b),m=b,!0)},setBlending:R,setMaterial:function(a,b){2===a.side?N(2884):M(2884);let c=a.side===f;b&&(c=!c),S(c),1===a.blending&& !1===a.transparent?R(0):R(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha),g.setFunc(a.depthFunc),g.setTest(a.depthTest),g.setMask(a.depthWrite),e.setMask(a.colorWrite);const d=a.stencilWrite;h.setTest(d),d&&(h.setMask(a.stencilWriteMask),h.setFunc(a.stencilFunc,a.stencilRef,a.stencilFuncMask),h.setOp(a.stencilFail,a.stencilZFail,a.stencilZPass)),U(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits),!0===a.alphaToCoverage?M(32926):N(32926)},setFlipSided:S,setCullFace:T,setLineWidth:function(b){b!==y&&(C&&a.lineWidth(b),y=b)},setPolygonOffset:U,setScissorTest:function(a){a?M(3089):N(3089)},activeTexture:V,bindTexture:function(b,c){null===E&&V();let d=F[E];void 0===d&&(d={type:void 0,texture:void 0},F[E]=d),(d.type!==b||d.texture!==c)&&(a.bindTexture(b,c||L[b]),d.type=b,d.texture=c)},unbindTexture:function(){const b=F[E];void 0!==b&& void 0!==b.type&&(a.bindTexture(b.type,null),b.type=void 0,b.texture=void 0)},compressedTexImage2D:function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texImage2D:function(){try{a.texImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texImage3D:function(){try{a.texImage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texStorage2D:function(){try{a.texStorage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texStorage3D:function(){try{a.texStorage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texSubImage2D:function(){try{a.texSubImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texSubImage3D:function(){try{a.texSubImage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},compressedTexSubImage2D:function(){try{a.compressedTexSubImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},scissor:function(b){!1===I.equals(b)&&(a.scissor(b.x,b.y,b.z,b.w),I.copy(b))},viewport:function(b){!1===J.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),J.copy(b))},reset:function(){a.disable(3042),a.disable(2884),a.disable(2929),a.disable(32823),a.disable(3089),a.disable(2960),a.disable(32926),a.blendEquation(32774),a.blendFunc(1,0),a.blendFuncSeparate(1,0,1,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(513),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(519,0,4294967295),a.stencilOp(7680,7680,7680),a.clearStencil(0),a.cullFace(1029),a.frontFace(2305),a.polygonOffset(0,0),a.activeTexture(33984),a.bindFramebuffer(36160,null),!0===d&&(a.bindFramebuffer(36009,null),a.bindFramebuffer(36008,null)),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),i={},E=null,F={},j={},k=new WeakMap(),l=[],m=null,n=!1,o=null,p=null,q=null,r=null,s=null,t=null,u=null,v=!1,w=null,x=null,y=null,z=null,A=null,I.set(0,0,a.canvas.width,a.canvas.height),J.set(0,0,a.canvas.width,a.canvas.height),e.reset(),g.reset(),h.reset()}}}function HQ(a,b,c,d,e,f,g){const h=e.isWebGL2,i=e.maxTextures,j=e.maxCubemapSize,k=e.maxTextureSize,l=e.maxSamples,m=b.has("WEBGL_multisampled_render_to_texture"),n=m?b.get("WEBGL_multisampled_render_to_texture"):void 0,o=new WeakMap();let p,q=!1;try{q="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(r){}function s(a,b){return q?new OffscreenCanvas(a,b):ed("canvas")}function t(a,b,c,d){let e=1;if((a.width>d||a.height>d)&&(e=d/Math.max(a.width,a.height)),e<1|| !0===b){if(("undefined"==typeof HTMLImageElement||!(a instanceof HTMLImageElement))&&("undefined"==typeof HTMLCanvasElement||!(a instanceof HTMLCanvasElement))&&("undefined"==typeof ImageBitmap||!(a instanceof ImageBitmap)))return"data"in a&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+a.width+"x"+a.height+")."),a;{const f=b?K:Math.floor,g=f(e*a.width),h=f(e*a.height);void 0===p&&(p=s(g,h));const i=c?s(g,h):p;i.width=g,i.height=h;const j=i.getContext("2d");return j.drawImage(a,0,0,g,h),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+a.width+"x"+a.height+") to ("+g+"x"+h+")."),i}}return a}function u(a){return I(a.width)&&I(a.height)}function v(a,b){return a.generateMipmaps&&b&&1003!==a.minFilter&&1006!==a.minFilter}function w(b){a.generateMipmap(b)}function x(c,d,e,f,g=!1){if(!1===h)return d;if(null!==c){if(void 0!==a[c])return a[c];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+c+"'")}let i=d;return 6403===d&&(5126===e&&(i=33326),5131===e&&(i=33325),5121===e&&(i=33321)),33319===d&&(5126===e&&(i=33328),5131===e&&(i=33327),5121===e&&(i=33323)),6408===d&&(5126===e&&(i=34836),5131===e&&(i=34842),5121===e&&(i=3001===f&& !1===g?35907:32856),32819===e&&(i=32854),32820===e&&(i=32855)),(33325===i||33326===i||33327===i||33328===i||34842===i||34836===i)&&b.get("EXT_color_buffer_float"),i}function y(a,b,c){return!0===v(a,c)||a.isFramebufferTexture&&1003!==a.minFilter&&1006!==a.minFilter?Math.log2(Math.max(b.width,b.height))+1:void 0!==a.mipmaps&&a.mipmaps.length>0?a.mipmaps.length:a.isCompressedTexture&&Array.isArray(a.image)?b.mipmaps.length:1}function z(a){return 1003===a||1004===a||1005===a?9728:9729}function A(a){const b=a.target;b.removeEventListener("dispose",A),C(b),b.isVideoTexture&&o.delete(b),g.memory.textures--}function B(a){const b=a.target;b.removeEventListener("dispose",B),D(b)}function C(b){const c=d.get(b);void 0!==c.__webglInit&&(a.deleteTexture(c.__webglTexture),d.remove(b))}function D(b){const c=b.texture,e=d.get(b),f=d.get(c);if(b){if(void 0!==f.__webglTexture&&(a.deleteTexture(f.__webglTexture),g.memory.textures--),b.depthTexture&&b.depthTexture.dispose(),b.isWebGLCubeRenderTarget)for(let h=0;h<6;h++)a.deleteFramebuffer(e.__webglFramebuffer[h]),e.__webglDepthbuffer&&a.deleteRenderbuffer(e.__webglDepthbuffer[h]);else a.deleteFramebuffer(e.__webglFramebuffer),e.__webglDepthbuffer&&a.deleteRenderbuffer(e.__webglDepthbuffer),e.__webglMultisampledFramebuffer&&a.deleteFramebuffer(e.__webglMultisampledFramebuffer),e.__webglColorRenderbuffer&&a.deleteRenderbuffer(e.__webglColorRenderbuffer),e.__webglDepthRenderbuffer&&a.deleteRenderbuffer(e.__webglDepthRenderbuffer);if(b.isWebGLMultipleRenderTargets)for(let i=0,j=c.length;i<j;i++){const k=d.get(c[i]);k.__webglTexture&&(a.deleteTexture(k.__webglTexture),g.memory.textures--),d.remove(c[i])}d.remove(c),d.remove(b)}}let E=0;function F(a,b){const e=d.get(a);if(a.isVideoTexture&&T(a),a.version>0&&e.__version!==a.version){const f=a.image;if(void 0===f)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(!1===f.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{N(e,a,b);return}}c.activeTexture(33984+b),c.bindTexture(3553,e.__webglTexture)}function G(a,b){const e=d.get(a);if(a.version>0&&e.__version!==a.version){O(e,a,b);return}c.activeTexture(33984+b),c.bindTexture(34067,e.__webglTexture)}const H={[1000]:10497,[1001]:33071,[1002]:33648},J={[1003]:9728,[1004]:9984,[1005]:9986,[1006]:9729,[1007]:9985,[1008]:9987};function L(c,f,g){if(g?(a.texParameteri(c,10242,H[f.wrapS]),a.texParameteri(c,10243,H[f.wrapT]),(32879===c||35866===c)&&a.texParameteri(c,32882,H[f.wrapR]),a.texParameteri(c,10240,J[f.magFilter]),a.texParameteri(c,10241,J[f.minFilter])):(a.texParameteri(c,10242,33071),a.texParameteri(c,10243,33071),(32879===c||35866===c)&&a.texParameteri(c,32882,33071),(1001!==f.wrapS||1001!==f.wrapT)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),a.texParameteri(c,10240,z(f.magFilter)),a.texParameteri(c,10241,z(f.minFilter)),1003!==f.minFilter&&1006!==f.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===b.has("EXT_texture_filter_anisotropic")){const i=b.get("EXT_texture_filter_anisotropic");(1015!==f.type|| !1!==b.has("OES_texture_float_linear"))&&(!1!==h||1016!==f.type|| !1!==b.has("OES_texture_half_float_linear"))&&(f.anisotropy>1||d.get(f).__currentAnisotropy)&&(a.texParameterf(c,i.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(f.anisotropy,e.getMaxAnisotropy())),d.get(f).__currentAnisotropy=f.anisotropy)}}function M(b,c){void 0===b.__webglInit&&(b.__webglInit=!0,c.addEventListener("dispose",A),b.__webglTexture=a.createTexture(),g.memory.textures++)}function N(b,d,e){var g;let i=3553;d.isDataTexture2DArray&&(i=35866),d.isDataTexture3D&&(i=32879),M(b,d),c.activeTexture(33984+e),c.bindTexture(i,b.__webglTexture),a.pixelStorei(37440,d.flipY),a.pixelStorei(37441,d.premultiplyAlpha),a.pixelStorei(3317,d.unpackAlignment),a.pixelStorei(37443,0);const j=(g=d,!h&&(1001!==g.wrapS||1001!==g.wrapT||1003!==g.minFilter&&1006!==g.minFilter)&& !1===u(d.image));let l=t(d.image,j,!1,k);l=U(d,l);const m=u(l)||h,n=f.convert(d.format,d.encoding);let o=f.convert(d.type),p=x(d.internalFormat,n,o,d.encoding,d.isVideoTexture);L(i,d,m);let q;const r=d.mipmaps,s=h&& !0!==d.isVideoTexture,z=void 0===b.__version,A=y(d,l,m);if(d.isDepthTexture)p=6402,h?p=1015===d.type?36012:1014===d.type?33190:1020===d.type?35056:33189:1015===d.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===d.format&&6402===p&&1012!==d.type&&1014!==d.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),d.type=1012,o=f.convert(d.type)),1027===d.format&&6402===p&&(p=34041,1020!==d.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),d.type=1020,o=f.convert(d.type))),s&&z?c.texStorage2D(3553,1,p,l.width,l.height):c.texImage2D(3553,0,p,l.width,l.height,0,n,o,null);else if(d.isDataTexture)if(r.length>0&&m){s&&z&&c.texStorage2D(3553,A,p,r[0].width,r[0].height);for(let B=0,C=r.length;B<C;B++)q=r[B],s?c.texSubImage2D(3553,0,0,0,q.width,q.height,n,o,q.data):c.texImage2D(3553,B,p,q.width,q.height,0,n,o,q.data);d.generateMipmaps=!1}else s?(z&&c.texStorage2D(3553,A,p,l.width,l.height),c.texSubImage2D(3553,0,0,0,l.width,l.height,n,o,l.data)):c.texImage2D(3553,0,p,l.width,l.height,0,n,o,l.data);else if(d.isCompressedTexture){s&&z&&c.texStorage2D(3553,A,p,r[0].width,r[0].height);for(let D=0,E=r.length;D<E;D++)q=r[D],1023!==d.format?null!==n?s?c.compressedTexSubImage2D(3553,D,0,0,q.width,q.height,n,q.data):c.compressedTexImage2D(3553,D,p,q.width,q.height,0,q.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):s?c.texSubImage2D(3553,D,0,0,q.width,q.height,n,o,q.data):c.texImage2D(3553,D,p,q.width,q.height,0,n,o,q.data)}else if(d.isDataTexture2DArray)s?(z&&c.texStorage3D(35866,A,p,l.width,l.height,l.depth),c.texSubImage3D(35866,0,0,0,0,l.width,l.height,l.depth,n,o,l.data)):c.texImage3D(35866,0,p,l.width,l.height,l.depth,0,n,o,l.data);else if(d.isDataTexture3D)s?(z&&c.texStorage3D(32879,A,p,l.width,l.height,l.depth),c.texSubImage3D(32879,0,0,0,0,l.width,l.height,l.depth,n,o,l.data)):c.texImage3D(32879,0,p,l.width,l.height,l.depth,0,n,o,l.data);else if(d.isFramebufferTexture)s&&z?c.texStorage2D(3553,A,p,l.width,l.height):c.texImage2D(3553,0,p,l.width,l.height,0,n,o,null);else if(r.length>0&&m){s&&z&&c.texStorage2D(3553,A,p,r[0].width,r[0].height);for(let F=0,G=r.length;F<G;F++)q=r[F],s?c.texSubImage2D(3553,F,0,0,n,o,q):c.texImage2D(3553,F,p,n,o,q);d.generateMipmaps=!1}else s?(z&&c.texStorage2D(3553,A,p,l.width,l.height),c.texSubImage2D(3553,0,0,0,n,o,l)):c.texImage2D(3553,0,p,n,o,l);v(d,m)&&w(i),b.__version=d.version,d.onUpdate&&d.onUpdate(d)}function O(b,d,e){if(6!==d.image.length)return;M(b,d),c.activeTexture(33984+e),c.bindTexture(34067,b.__webglTexture),a.pixelStorei(37440,d.flipY),a.pixelStorei(37441,d.premultiplyAlpha),a.pixelStorei(3317,d.unpackAlignment),a.pixelStorei(37443,0);const g=d&&(d.isCompressedTexture||d.image[0].isCompressedTexture),i=d.image[0]&&d.image[0].isDataTexture,k=[];for(let l=0;l<6;l++)g||i?k[l]=i?d.image[l].image:d.image[l]:k[l]=t(d.image[l],!1,!0,j),k[l]=U(d,k[l]);const m=k[0],n=u(m)||h,o=f.convert(d.format,d.encoding),p=f.convert(d.type),q=x(d.internalFormat,o,p,d.encoding),r=h&& !0!==d.isVideoTexture,s=void 0===b.__version;let z=y(d,m,n);L(34067,d,n);let A;if(g){r&&s&&c.texStorage2D(34067,z,q,m.width,m.height);for(let B=0;B<6;B++){A=k[B].mipmaps;for(let C=0;C<A.length;C++){const D=A[C];1023!==d.format?null!==o?r?c.compressedTexSubImage2D(34069+B,C,0,0,D.width,D.height,o,D.data):c.compressedTexImage2D(34069+B,C,q,D.width,D.height,0,D.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):r?c.texSubImage2D(34069+B,C,0,0,D.width,D.height,o,p,D.data):c.texImage2D(34069+B,C,q,D.width,D.height,0,o,p,D.data)}}}else{A=d.mipmaps,r&&s&&(A.length>0&&z++,c.texStorage2D(34067,z,q,k[0].width,k[0].height));for(let E=0;E<6;E++)if(i){r?c.texSubImage2D(34069+E,0,0,0,k[E].width,k[E].height,o,p,k[E].data):c.texImage2D(34069+E,0,q,k[E].width,k[E].height,0,o,p,k[E].data);for(let F=0;F<A.length;F++){const G=A[F],H=G.image[E].image;r?c.texSubImage2D(34069+E,F+1,0,0,H.width,H.height,o,p,H.data):c.texImage2D(34069+E,F+1,q,H.width,H.height,0,o,p,H.data)}}else{r?c.texSubImage2D(34069+E,0,0,0,o,p,k[E]):c.texImage2D(34069+E,0,q,o,p,k[E]);for(let I=0;I<A.length;I++){const J=A[I];r?c.texSubImage2D(34069+E,I+1,0,0,o,p,J.image[E]):c.texImage2D(34069+E,I+1,q,o,p,J.image[E])}}}v(d,n)&&w(34067),b.__version=d.version,d.onUpdate&&d.onUpdate(d)}function P(b,e,g,h,i){const j=f.convert(g.format,g.encoding),k=f.convert(g.type),l=x(g.internalFormat,j,k,g.encoding),m=d.get(e);m.__hasExternalTextures||(32879===i||35866===i?c.texImage3D(i,0,l,e.width,e.height,e.depth,0,j,k,null):c.texImage2D(i,0,l,e.width,e.height,0,j,k,null)),c.bindFramebuffer(36160,b),e.useRenderToTexture?n.framebufferTexture2DMultisampleEXT(36160,h,i,d.get(g).__webglTexture,0,S(e)):a.framebufferTexture2D(36160,h,i,d.get(g).__webglTexture,0),c.bindFramebuffer(36160,null)}function Q(b,c,d){if(a.bindRenderbuffer(36161,b),c.depthBuffer&&!c.stencilBuffer){let e=33189;if(d||c.useRenderToTexture){const g=c.depthTexture;g&&g.isDepthTexture&&(1015===g.type?e=36012:1014===g.type&&(e=33190));const h=S(c);c.useRenderToTexture?n.renderbufferStorageMultisampleEXT(36161,h,e,c.width,c.height):a.renderbufferStorageMultisample(36161,h,e,c.width,c.height)}else a.renderbufferStorage(36161,e,c.width,c.height);a.framebufferRenderbuffer(36160,36096,36161,b)}else if(c.depthBuffer&&c.stencilBuffer){const i=S(c);d&&c.useRenderbuffer?a.renderbufferStorageMultisample(36161,i,35056,c.width,c.height):c.useRenderToTexture?n.renderbufferStorageMultisampleEXT(36161,i,35056,c.width,c.height):a.renderbufferStorage(36161,34041,c.width,c.height),a.framebufferRenderbuffer(36160,33306,36161,b)}else{const j=!0===c.isWebGLMultipleRenderTargets?c.texture[0]:c.texture,k=f.convert(j.format,j.encoding),l=f.convert(j.type),m=x(j.internalFormat,k,l,j.encoding),o=S(c);d&&c.useRenderbuffer?a.renderbufferStorageMultisample(36161,o,m,c.width,c.height):c.useRenderToTexture?n.renderbufferStorageMultisampleEXT(36161,o,m,c.width,c.height):a.renderbufferStorage(36161,m,c.width,c.height)}a.bindRenderbuffer(36161,null)}function R(b){const e=d.get(b),f=!0===b.isWebGLCubeRenderTarget;if(b.depthTexture&&!e.__autoAllocateDepthBuffer){if(f)throw new Error("target.depthTexture not supported in Cube render targets");!function(b,e){const f=e&&e.isWebGLCubeRenderTarget;if(f)throw new Error("Depth Texture with cube render targets is not supported");if(c.bindFramebuffer(36160,b),!(e.depthTexture&&e.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(e.depthTexture).__webglTexture&&e.depthTexture.image.width===e.width&&e.depthTexture.image.height===e.height||(e.depthTexture.image.width=e.width,e.depthTexture.image.height=e.height,e.depthTexture.needsUpdate=!0),F(e.depthTexture,0);const g=d.get(e.depthTexture).__webglTexture,h=S(e);if(1026===e.depthTexture.format)e.useRenderToTexture?n.framebufferTexture2DMultisampleEXT(36160,36096,3553,g,0,h):a.framebufferTexture2D(36160,36096,3553,g,0);else if(1027===e.depthTexture.format)e.useRenderToTexture?n.framebufferTexture2DMultisampleEXT(36160,33306,3553,g,0,h):a.framebufferTexture2D(36160,33306,3553,g,0);else throw new Error("Unknown depthTexture format")}(e.__webglFramebuffer,b)}else if(f){e.__webglDepthbuffer=[];for(let g=0;g<6;g++)c.bindFramebuffer(36160,e.__webglFramebuffer[g]),e.__webglDepthbuffer[g]=a.createRenderbuffer(),Q(e.__webglDepthbuffer[g],b,!1)}else c.bindFramebuffer(36160,e.__webglFramebuffer),e.__webglDepthbuffer=a.createRenderbuffer(),Q(e.__webglDepthbuffer,b,!1);c.bindFramebuffer(36160,null)}function S(a){return h&&(a.useRenderbuffer||a.useRenderToTexture)?Math.min(l,a.samples):0}function T(a){const b=g.render.frame;o.get(a)!==b&&(o.set(a,b),a.update())}function U(a,c){const d=a.encoding,e=a.format,f=a.type;return!0===a.isCompressedTexture|| !0===a.isVideoTexture||1035===a.format||3000!==d&&(3001===d?!1===h?!0===b.has("EXT_sRGB")&&1023===e?(a.format=1035,a.minFilter=1006,a.generateMipmaps=!1):c=Ae.sRGBToLinear(c):(1023!==e||1009!==f)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",d)),c}let V=!1,W=!1;this.allocateTextureUnit=function(){const a=E;return a>=i&&console.warn("THREE.WebGLTextures: Trying to use "+a+" texture units while this GPU supports only "+i),E+=1,a},this.resetTextureUnits=function(){E=0},this.setTexture2D=F,this.setTexture2DArray=function(a,b){const e=d.get(a);if(a.version>0&&e.__version!==a.version){N(e,a,b);return}c.activeTexture(33984+b),c.bindTexture(35866,e.__webglTexture)},this.setTexture3D=function(a,b){const e=d.get(a);if(a.version>0&&e.__version!==a.version){N(e,a,b);return}c.activeTexture(33984+b),c.bindTexture(32879,e.__webglTexture)},this.setTextureCube=G,this.rebindTextures=function(a,b,c){const e=d.get(a);void 0!==b&&P(e.__webglFramebuffer,a,a.texture,36064,3553),void 0!==c&&R(a)},this.setupRenderTarget=function(b){const i=b.texture,j=d.get(b),k=d.get(i);b.addEventListener("dispose",B),!0!==b.isWebGLMultipleRenderTargets&&(void 0===k.__webglTexture&&(k.__webglTexture=a.createTexture()),k.__version=i.version,g.memory.textures++);const l=!0===b.isWebGLCubeRenderTarget,m=!0===b.isWebGLMultipleRenderTargets,n=i.isDataTexture3D||i.isDataTexture2DArray,o=u(b)||h;if(l){j.__webglFramebuffer=[];for(let p=0;p<6;p++)j.__webglFramebuffer[p]=a.createFramebuffer()}else if(j.__webglFramebuffer=a.createFramebuffer(),m)if(e.drawBuffers){const q=b.texture;for(let r=0,s=q.length;r<s;r++){const t=d.get(q[r]);void 0===t.__webglTexture&&(t.__webglTexture=a.createTexture(),g.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(b.useRenderbuffer)if(h){j.__webglMultisampledFramebuffer=a.createFramebuffer(),j.__webglColorRenderbuffer=a.createRenderbuffer(),a.bindRenderbuffer(36161,j.__webglColorRenderbuffer);const y=f.convert(i.format,i.encoding),z=f.convert(i.type),A=x(i.internalFormat,y,z,i.encoding),C=S(b);a.renderbufferStorageMultisample(36161,C,A,b.width,b.height),c.bindFramebuffer(36160,j.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(36160,36064,36161,j.__webglColorRenderbuffer),a.bindRenderbuffer(36161,null),b.depthBuffer&&(j.__webglDepthRenderbuffer=a.createRenderbuffer(),Q(j.__webglDepthRenderbuffer,b,!0)),c.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(l){c.bindTexture(34067,k.__webglTexture),L(34067,i,o);for(let D=0;D<6;D++)P(j.__webglFramebuffer[D],b,i,36064,34069+D);v(i,o)&&w(34067),c.unbindTexture()}else if(m){const E=b.texture;for(let F=0,G=E.length;F<G;F++){const H=E[F],I=d.get(H);c.bindTexture(3553,I.__webglTexture),L(3553,H,o),P(j.__webglFramebuffer,b,H,36064+F,3553),v(H,o)&&w(3553)}c.unbindTexture()}else{let J=3553;if(n)if(h){const K=i.isDataTexture3D;J=K?32879:35866}else console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");c.bindTexture(J,k.__webglTexture),L(J,i,o),P(j.__webglFramebuffer,b,i,36064,J),v(i,o)&&w(J),c.unbindTexture()}b.depthBuffer&&R(b)},this.updateRenderTargetMipmap=function(a){const b=u(a)||h,e=!0===a.isWebGLMultipleRenderTargets?a.texture:[a.texture];for(let f=0,g=e.length;f<g;f++){const i=e[f];if(v(i,b)){const j=a.isWebGLCubeRenderTarget?34067:3553,k=d.get(i).__webglTexture;c.bindTexture(j,k),w(j),c.unbindTexture()}}},this.updateMultisampleRenderTarget=function(b){if(b.useRenderbuffer)if(h){const e=b.width,f=b.height;let g=16384;const i=[36064],j=b.stencilBuffer?33306:36096;b.depthBuffer&&i.push(j),!b.ignoreDepthForMultisampleCopy&&(b.depthBuffer&&(g|=256),b.stencilBuffer&&(g|=1024));const k=d.get(b);c.bindFramebuffer(36008,k.__webglMultisampledFramebuffer),c.bindFramebuffer(36009,k.__webglFramebuffer),b.ignoreDepthForMultisampleCopy&&(a.invalidateFramebuffer(36008,[j]),a.invalidateFramebuffer(36009,[j])),a.blitFramebuffer(0,0,e,f,0,0,e,f,g,9728),a.invalidateFramebuffer(36008,i),c.bindFramebuffer(36008,null),c.bindFramebuffer(36009,k.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.setupDepthRenderbuffer=R,this.setupFrameBufferTexture=P,this.safeSetTexture2D=function(a,b){a&&a.isWebGLRenderTarget&&(!1===V&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),V=!0),a=a.texture),F(a,b)},this.safeSetTextureCube=function(a,b){a&&a.isWebGLCubeRenderTarget&&(!1===W&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),W=!0),a=a.texture),G(a,b)}}function IQ(a,b,c){const d=c.isWebGL2;return{convert:function(a,c=null){let e;if(1009===a)return 5121;if(1017===a)return 32819;if(1018===a)return 32820;if(1010===a)return 5120;if(1011===a)return 5122;if(1012===a)return 5123;if(1013===a)return 5124;if(1014===a)return 5125;if(1015===a)return 5126;if(1016===a)return d?5131:null!==(e=b.get("OES_texture_half_float"))?e.HALF_FLOAT_OES:null;if(1021===a)return 6406;if(1023===a)return 6408;if(1024===a)return 6409;if(1025===a)return 6410;if(1026===a)return 6402;if(1027===a)return 34041;if(1028===a)return 6403;if(1022===a)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(1035===a)return null!==(e=b.get("EXT_sRGB"))?e.SRGB_ALPHA_EXT:null;if(1029===a)return 36244;if(1030===a)return 33319;if(1031===a)return 33320;if(1033===a)return 36249;if(33776===a||33777===a||33778===a||33779===a)if(3001===c){if(null===(e=b.get("WEBGL_compressed_texture_s3tc_srgb")))return null;if(33776===a)return e.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(33777===a)return e.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(33778===a)return e.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(33779===a)return e.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(null===(e=b.get("WEBGL_compressed_texture_s3tc")))return null;if(33776===a)return e.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===a)return e.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===a)return e.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===a)return e.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===a||35841===a||35842===a||35843===a){if(null===(e=b.get("WEBGL_compressed_texture_pvrtc")))return null;if(35840===a)return e.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===a)return e.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===a)return e.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===a)return e.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===a)return null!==(e=b.get("WEBGL_compressed_texture_etc1"))?e.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===a||37496===a){if(null===(e=b.get("WEBGL_compressed_texture_etc")))return null;if(37492===a)return 3001===c?e.COMPRESSED_SRGB8_ETC2:e.COMPRESSED_RGB8_ETC2;if(37496===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:e.COMPRESSED_RGBA8_ETC2_EAC}if(37808===a||37809===a||37810===a||37811===a||37812===a||37813===a||37814===a||37815===a||37816===a||37817===a||37818===a||37819===a||37820===a||37821===a){if(null===(e=b.get("WEBGL_compressed_texture_astc")))return null;if(37808===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:e.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:e.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:e.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:e.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:e.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:e.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:e.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:e.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:e.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:e.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:e.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:e.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:e.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===a)return 3001===c?e.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:e.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===a){if(null===(e=b.get("EXT_texture_compression_bptc")))return null;if(36492===a)return 3001===c?e.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:e.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(1020===a)return d?34042:null!==(e=b.get("WEBGL_depth_texture"))?e.UNSIGNED_INT_24_8_WEBGL:null}}}CQ.prototype.isMeshDistanceMaterial=!0;class JQ extends XH{constructor(KQ=[]){super(),this.cameras=KQ}}JQ.prototype.isArrayCamera=!0;class LQ extends Aw{constructor(){super(),this.type="Group"}}LQ.prototype.isGroup=!0;const MQ={type:"move"};class NQ{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new LQ(),this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new LQ(),this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Xj(),this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Xj()),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new LQ(),this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Xj(),this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Xj()),this._grip}dispatchEvent(OQ){return null!==this._targetRay&&this._targetRay.dispatchEvent(OQ),null!==this._grip&&this._grip.dispatchEvent(OQ),null!==this._hand&&this._hand.dispatchEvent(OQ),this}disconnect(PQ){return this.dispatchEvent({type:"disconnected",data:PQ}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(QQ,RQ,SQ){let TQ=null,UQ=null,VQ=null;const WQ=this._targetRay,XQ=this._grip,YQ=this._hand;if(QQ&&"visible-blurred"!==RQ.session.visibilityState)if(null!==WQ&&null!==(TQ=RQ.getPose(QQ.targetRaySpace,SQ))&&(WQ.matrix.fromArray(TQ.transform.matrix),WQ.matrix.decompose(WQ.position,WQ.rotation,WQ.scale),TQ.linearVelocity?(WQ.hasLinearVelocity=!0,WQ.linearVelocity.copy(TQ.linearVelocity)):WQ.hasLinearVelocity=!1,TQ.angularVelocity?(WQ.hasAngularVelocity=!0,WQ.angularVelocity.copy(TQ.angularVelocity)):WQ.hasAngularVelocity=!1,this.dispatchEvent(MQ)),YQ&&QQ.hand){for(const ZQ of(VQ=!0,QQ.hand.values())){const $Q=RQ.getJointPose(ZQ,SQ);if(void 0===YQ.joints[ZQ.jointName]){const _Q=new LQ();_Q.matrixAutoUpdate=!1,_Q.visible=!1,YQ.joints[ZQ.jointName]=_Q,YQ.add(_Q)}const aR=YQ.joints[ZQ.jointName];null!==$Q&&(aR.matrix.fromArray($Q.transform.matrix),aR.matrix.decompose(aR.position,aR.rotation,aR.scale),aR.jointRadius=$Q.radius),aR.visible=null!==$Q}const bR=YQ.joints["index-finger-tip"],cR=YQ.joints["thumb-tip"],dR=bR.position.distanceTo(cR.position),eR=0.02,fR=0.005;YQ.inputState.pinching&&dR>eR+fR?(YQ.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:QQ.handedness,target:this})):!YQ.inputState.pinching&&dR<=eR-fR&&(YQ.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:QQ.handedness,target:this}))}else null!==XQ&&QQ.gripSpace&&null!==(UQ=RQ.getPose(QQ.gripSpace,SQ))&&(XQ.matrix.fromArray(UQ.transform.matrix),XQ.matrix.decompose(XQ.position,XQ.rotation,XQ.scale),UQ.linearVelocity?(XQ.hasLinearVelocity=!0,XQ.linearVelocity.copy(UQ.linearVelocity)):XQ.hasLinearVelocity=!1,UQ.angularVelocity?(XQ.hasAngularVelocity=!0,XQ.angularVelocity.copy(UQ.angularVelocity)):XQ.hasAngularVelocity=!1);return null!==WQ&&(WQ.visible=null!==TQ),null!==XQ&&(XQ.visible=null!==UQ),null!==YQ&&(YQ.visible=null!==VQ),this}}class gR extends Ne{constructor(hR,iR,jR,kR,lR,mR,nR,oR,pR,qR){if(1026!==(qR=void 0!==qR?qR:1026)&&1027!==qR)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===jR&&1026===qR&&(jR=1012),void 0===jR&&1027===qR&&(jR=1020),super(null,kR,lR,mR,nR,oR,qR,jR,pR),this.image={width:hR,height:iR},this.magFilter=void 0!==nR?nR:1003,this.minFilter=void 0!==oR?oR:1003,this.flipY=!1,this.generateMipmaps=!1}}gR.prototype.isDepthTexture=!0;class rR extends h{constructor(sR,tR){super();const uR=this;let vR=null,wR=1,xR=null,yR="local-floor";const zR=sR.extensions.has("WEBGL_multisampled_render_to_texture");let AR=null,BR=null,CR=null,DR=null,ER=!1,FR=null;const GR=tR.getContextAttributes();let HR=null,IR=null;const JR=[],KR=new Map(),LR=new XH();LR.layers.enable(1),LR.viewport=new hf();const MR=new XH();MR.layers.enable(2),MR.viewport=new hf();const NR=[LR,MR],OR=new JQ();OR.layers.enable(1),OR.layers.enable(2);let PR=null,QR=null;function RR(a){const b=KR.get(a.inputSource);b&&b.dispatchEvent({type:a.type,data:a.inputSource})}function SR(){KR.forEach(function(a,b){a.disconnect(b)}),KR.clear(),PR=null,QR=null,sR.setRenderTarget(HR),DR=null,CR=null,BR=null,vR=null,IR=null,YR.stop(),uR.isPresenting=!1,uR.dispatchEvent({type:"sessionend"})}function TR(a){const b=vR.inputSources;for(let c=0;c<JR.length;c++)KR.set(b[c],JR[c]);for(let d=0;d<a.removed.length;d++){const e=a.removed[d],f=KR.get(e);f&&(f.dispatchEvent({type:"disconnected",data:e}),KR.delete(e))}for(let g=0;g<a.added.length;g++){const h=a.added[g],i=KR.get(h);i&&i.dispatchEvent({type:"connected",data:h})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(a){let b=JR[a];return void 0===b&&(b=new NQ(),JR[a]=b),b.getTargetRaySpace()},this.getControllerGrip=function(a){let b=JR[a];return void 0===b&&(b=new NQ(),JR[a]=b),b.getGripSpace()},this.getHand=function(a){let b=JR[a];return void 0===b&&(b=new NQ(),JR[a]=b),b.getHandSpace()},this.setFramebufferScaleFactor=function(a){wR=a,!0===uR.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(a){yR=a,!0===uR.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return xR},this.getBaseLayer=function(){return null!==CR?CR:DR},this.getBinding=function(){return BR},this.getFrame=function(){return FR},this.getSession=function(){return vR},this.setSession=async function(a){if(null!==(vR=a)){if(HR=sR.getRenderTarget(),vR.addEventListener("select",RR),vR.addEventListener("selectstart",RR),vR.addEventListener("selectend",RR),vR.addEventListener("squeeze",RR),vR.addEventListener("squeezestart",RR),vR.addEventListener("squeezeend",RR),vR.addEventListener("end",SR),vR.addEventListener("inputsourceschange",TR),!0!==GR.xrCompatible&&await tR.makeXRCompatible(),void 0===vR.renderState.layers|| !1===sR.capabilities.isWebGL2){const b={antialias:void 0!==vR.renderState.layers||GR.antialias,alpha:GR.alpha,depth:GR.depth,stencil:GR.stencil,framebufferScaleFactor:wR};DR=new XRWebGLLayer(vR,tR,b),vR.updateRenderState({baseLayer:DR}),IR=new Rg(DR.framebufferWidth,DR.framebufferHeight,{format:1023,type:1009,encoding:sR.outputEncoding})}else{ER=GR.antialias;let c=null,d=null,e=null;GR.depth&&(e=GR.stencil?35056:33190,c=GR.stencil?1027:1026,d=GR.stencil?1020:1012);const f={colorFormat:3001===sR.outputEncoding?35907:32856,depthFormat:e,scaleFactor:wR};CR=(BR=new XRWebGLBinding(vR,tR)).createProjectionLayer(f),vR.updateRenderState({layers:[CR]}),IR=ER?new lh(CR.textureWidth,CR.textureHeight,{format:1023,type:1009,depthTexture:new gR(CR.textureWidth,CR.textureHeight,d,void 0,void 0,void 0,void 0,void 0,void 0,c),stencilBuffer:GR.stencil,ignoreDepth:CR.ignoreDepthValues,useRenderToTexture:zR,encoding:sR.outputEncoding}):new Rg(CR.textureWidth,CR.textureHeight,{format:1023,type:1009,depthTexture:new gR(CR.textureWidth,CR.textureHeight,d,void 0,void 0,void 0,void 0,void 0,void 0,c),stencilBuffer:GR.stencil,ignoreDepth:CR.ignoreDepthValues,encoding:sR.outputEncoding})}IR.isXRRenderTarget=!0,this.setFoveation(1),xR=await vR.requestReferenceSpace(yR),YR.setContext(vR),YR.start(),uR.isPresenting=!0,uR.dispatchEvent({type:"sessionstart"})}};const UR=new Xj(),VR=new Xj();function WR(a,b){null===b?a.matrixWorld.copy(a.matrix):a.matrixWorld.multiplyMatrices(b.matrixWorld,a.matrix),a.matrixWorldInverse.copy(a.matrixWorld).invert()}this.updateCamera=function(a){if(null===vR)return;OR.near=MR.near=LR.near=a.near,OR.far=MR.far=LR.far=a.far,(PR!==OR.near||QR!==OR.far)&&(vR.updateRenderState({depthNear:OR.near,depthFar:OR.far}),PR=OR.near,QR=OR.far);const b=a.parent,c=OR.cameras;WR(OR,b);for(let d=0;d<c.length;d++)WR(c[d],b);OR.matrixWorld.decompose(OR.position,OR.quaternion,OR.scale),a.position.copy(OR.position),a.quaternion.copy(OR.quaternion),a.scale.copy(OR.scale),a.matrix.copy(OR.matrix),a.matrixWorld.copy(OR.matrixWorld);const e=a.children;for(let f=0,g=e.length;f<g;f++)e[f].updateMatrixWorld(!0);2===c.length?(function(a,b,c){UR.setFromMatrixPosition(b.matrixWorld),VR.setFromMatrixPosition(c.matrixWorld);const d=UR.distanceTo(VR),e=b.projectionMatrix.elements,f=c.projectionMatrix.elements,g=e[14]/(e[10]-1),h=e[14]/(e[10]+1),i=(e[9]+1)/e[5],j=(e[9]-1)/e[5],k=(e[8]-1)/e[0],l=(f[8]+1)/f[0],m=d/(-k+l),n=-(m*k);b.matrixWorld.decompose(a.position,a.quaternion,a.scale),a.translateX(n),a.translateZ(m),a.matrixWorld.compose(a.position,a.quaternion,a.scale),a.matrixWorldInverse.copy(a.matrixWorld).invert();const o=g+m,p=h+m;a.projectionMatrix.makePerspective(g*k-n,g*l+(d-n),i*h/p*o,j*h/p*o,o,p)})(OR,LR,MR):OR.projectionMatrix.copy(LR.projectionMatrix)},this.getCamera=function(){return OR},this.getFoveation=function(){return null!==CR?CR.fixedFoveation:null!==DR?DR.fixedFoveation:void 0},this.setFoveation=function(a){null!==CR&&(CR.fixedFoveation=a),null!==DR&& void 0!==DR.fixedFoveation&&(DR.fixedFoveation=a)};let XR=null;const YR=new iL();YR.setAnimationLoop(function(a,b){if(AR=b.getViewerPose(xR),FR=b,null!==AR){const c=AR.views;null!==DR&&(sR.setRenderTargetFramebuffer(IR,DR.framebuffer),sR.setRenderTarget(IR));let d=!1;c.length!==OR.cameras.length&&(OR.cameras.length=0,d=!0);for(let e=0;e<c.length;e++){const f=c[e];let g=null;if(null!==DR)g=DR.getViewport(f);else{const h=BR.getViewSubImage(CR,f);g=h.viewport,0===e&&(sR.setRenderTargetTextures(IR,h.colorTexture,CR.ignoreDepthValues?void 0:h.depthStencilTexture),sR.setRenderTarget(IR))}const i=NR[e];i.matrix.fromArray(f.transform.matrix),i.projectionMatrix.fromArray(f.projectionMatrix),i.viewport.set(g.x,g.y,g.width,g.height),0===e&&OR.matrix.copy(i.matrix),!0===d&&OR.cameras.push(i)}}const j=vR.inputSources;for(let k=0;k<JR.length;k++){const l=JR[k],m=j[k];l.update(m,b,xR)}XR&&XR(a,b),FR=null}),this.setAnimationLoop=function(a){XR=a},this.dispose=function(){}}}function ZR(a){function b(b,c){b.opacity.value=c.opacity,c.color&&b.diffuse.value.copy(c.color),c.emissive&&b.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity),c.map&&(b.map.value=c.map),c.alphaMap&&(b.alphaMap.value=c.alphaMap),c.specularMap&&(b.specularMap.value=c.specularMap),c.alphaTest>0&&(b.alphaTest.value=c.alphaTest);const d=a.get(c).envMap;d&&(b.envMap.value=d,b.flipEnvMap.value=d.isCubeTexture&& !1===d.isRenderTargetTexture?-1:1,b.reflectivity.value=c.reflectivity,b.ior.value=c.ior,b.refractionRatio.value=c.refractionRatio),c.lightMap&&(b.lightMap.value=c.lightMap,b.lightMapIntensity.value=c.lightMapIntensity),c.aoMap&&(b.aoMap.value=c.aoMap,b.aoMapIntensity.value=c.aoMapIntensity);let e;c.map?e=c.map:c.specularMap?e=c.specularMap:c.displacementMap?e=c.displacementMap:c.normalMap?e=c.normalMap:c.bumpMap?e=c.bumpMap:c.roughnessMap?e=c.roughnessMap:c.metalnessMap?e=c.metalnessMap:c.alphaMap?e=c.alphaMap:c.emissiveMap?e=c.emissiveMap:c.clearcoatMap?e=c.clearcoatMap:c.clearcoatNormalMap?e=c.clearcoatNormalMap:c.clearcoatRoughnessMap?e=c.clearcoatRoughnessMap:c.specularIntensityMap?e=c.specularIntensityMap:c.specularColorMap?e=c.specularColorMap:c.transmissionMap?e=c.transmissionMap:c.thicknessMap?e=c.thicknessMap:c.sheenColorMap?e=c.sheenColorMap:c.sheenRoughnessMap&&(e=c.sheenRoughnessMap),void 0!==e&&(e.isWebGLRenderTarget&&(e=e.texture),!0===e.matrixAutoUpdate&&e.updateMatrix(),b.uvTransform.value.copy(e.matrix));let f;c.aoMap?f=c.aoMap:c.lightMap&&(f=c.lightMap),void 0!==f&&(f.isWebGLRenderTarget&&(f=f.texture),!0===f.matrixAutoUpdate&&f.updateMatrix(),b.uv2Transform.value.copy(f.matrix))}function c(b,c){b.roughness.value=c.roughness,b.metalness.value=c.metalness,c.roughnessMap&&(b.roughnessMap.value=c.roughnessMap),c.metalnessMap&&(b.metalnessMap.value=c.metalnessMap),c.emissiveMap&&(b.emissiveMap.value=c.emissiveMap),c.bumpMap&&(b.bumpMap.value=c.bumpMap,b.bumpScale.value=c.bumpScale,c.side===f&&(b.bumpScale.value*=-1)),c.normalMap&&(b.normalMap.value=c.normalMap,b.normalScale.value.copy(c.normalScale),c.side===f&&b.normalScale.value.negate()),c.displacementMap&&(b.displacementMap.value=c.displacementMap,b.displacementScale.value=c.displacementScale,b.displacementBias.value=c.displacementBias);const d=a.get(c).envMap;d&&(b.envMapIntensity.value=c.envMapIntensity)}return{refreshFogUniforms:function(a,b){a.fogColor.value.copy(b.color),b.isFog?(a.fogNear.value=b.near,a.fogFar.value=b.far):b.isFogExp2&&(a.fogDensity.value=b.density)},refreshMaterialUniforms:function(a,d,e,g,h){var i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I;let J,K;d.isMeshBasicMaterial?b(a,d):d.isMeshLambertMaterial?(b(a,d),i=a,(j=d).emissiveMap&&(i.emissiveMap.value=j.emissiveMap)):d.isMeshToonMaterial?(b(a,d),k=a,(l=d).gradientMap&&(k.gradientMap.value=l.gradientMap),l.emissiveMap&&(k.emissiveMap.value=l.emissiveMap),l.bumpMap&&(k.bumpMap.value=l.bumpMap,k.bumpScale.value=l.bumpScale,l.side===f&&(k.bumpScale.value*=-1)),l.normalMap&&(k.normalMap.value=l.normalMap,k.normalScale.value.copy(l.normalScale),l.side===f&&k.normalScale.value.negate()),l.displacementMap&&(k.displacementMap.value=l.displacementMap,k.displacementScale.value=l.displacementScale,k.displacementBias.value=l.displacementBias)):d.isMeshPhongMaterial?(b(a,d),m=a,n=d,m.specular.value.copy(n.specular),m.shininess.value=Math.max(n.shininess,0.0001),n.emissiveMap&&(m.emissiveMap.value=n.emissiveMap),n.bumpMap&&(m.bumpMap.value=n.bumpMap,m.bumpScale.value=n.bumpScale,n.side===f&&(m.bumpScale.value*=-1)),n.normalMap&&(m.normalMap.value=n.normalMap,m.normalScale.value.copy(n.normalScale),n.side===f&&m.normalScale.value.negate()),n.displacementMap&&(m.displacementMap.value=n.displacementMap,m.displacementScale.value=n.displacementScale,m.displacementBias.value=n.displacementBias)):d.isMeshStandardMaterial?(b(a,d),d.isMeshPhysicalMaterial?(o=a,p=d,q=h,c(o,p),o.ior.value=p.ior,p.sheen>0&&(o.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),o.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(o.sheenColorMap.value=p.sheenColorMap),p.sheenRoughnessMap&&(o.sheenRoughnessMap.value=p.sheenRoughnessMap)),p.clearcoat>0&&(o.clearcoat.value=p.clearcoat,o.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(o.clearcoatMap.value=p.clearcoatMap),p.clearcoatRoughnessMap&&(o.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap),p.clearcoatNormalMap&&(o.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),o.clearcoatNormalMap.value=p.clearcoatNormalMap,p.side===f&&o.clearcoatNormalScale.value.negate())),p.transmission>0&&(o.transmission.value=p.transmission,o.transmissionSamplerMap.value=q.texture,o.transmissionSamplerSize.value.set(q.width,q.height),p.transmissionMap&&(o.transmissionMap.value=p.transmissionMap),o.thickness.value=p.thickness,p.thicknessMap&&(o.thicknessMap.value=p.thicknessMap),o.attenuationDistance.value=p.attenuationDistance,o.attenuationColor.value.copy(p.attenuationColor)),o.specularIntensity.value=p.specularIntensity,o.specularColor.value.copy(p.specularColor),p.specularIntensityMap&&(o.specularIntensityMap.value=p.specularIntensityMap),p.specularColorMap&&(o.specularColorMap.value=p.specularColorMap)):c(a,d)):d.isMeshMatcapMaterial?(b(a,d),r=a,(s=d).matcap&&(r.matcap.value=s.matcap),s.bumpMap&&(r.bumpMap.value=s.bumpMap,r.bumpScale.value=s.bumpScale,s.side===f&&(r.bumpScale.value*=-1)),s.normalMap&&(r.normalMap.value=s.normalMap,r.normalScale.value.copy(s.normalScale),s.side===f&&r.normalScale.value.negate()),s.displacementMap&&(r.displacementMap.value=s.displacementMap,r.displacementScale.value=s.displacementScale,r.displacementBias.value=s.displacementBias)):d.isMeshDepthMaterial?(b(a,d),t=a,(u=d).displacementMap&&(t.displacementMap.value=u.displacementMap,t.displacementScale.value=u.displacementScale,t.displacementBias.value=u.displacementBias)):d.isMeshDistanceMaterial?(b(a,d),v=a,(w=d).displacementMap&&(v.displacementMap.value=w.displacementMap,v.displacementScale.value=w.displacementScale,v.displacementBias.value=w.displacementBias),v.referencePosition.value.copy(w.referencePosition),v.nearDistance.value=w.nearDistance,v.farDistance.value=w.farDistance):d.isMeshNormalMaterial?(b(a,d),x=a,(y=d).bumpMap&&(x.bumpMap.value=y.bumpMap,x.bumpScale.value=y.bumpScale,y.side===f&&(x.bumpScale.value*=-1)),y.normalMap&&(x.normalMap.value=y.normalMap,x.normalScale.value.copy(y.normalScale),y.side===f&&x.normalScale.value.negate()),y.displacementMap&&(x.displacementMap.value=y.displacementMap,x.displacementScale.value=y.displacementScale,x.displacementBias.value=y.displacementBias)):d.isLineBasicMaterial?(z=a,A=d,z.diffuse.value.copy(A.color),z.opacity.value=A.opacity,d.isLineDashedMaterial&&(B=a,C=d,B.dashSize.value=C.dashSize,B.totalSize.value=C.dashSize+C.gapSize,B.scale.value=C.scale)):d.isPointsMaterial?(D=a,E=d,F=e,G=g,D.diffuse.value.copy(E.color),D.opacity.value=E.opacity,D.size.value=E.size*F,D.scale.value=0.5*G,E.map&&(D.map.value=E.map),E.alphaMap&&(D.alphaMap.value=E.alphaMap),E.alphaTest>0&&(D.alphaTest.value=E.alphaTest),E.map?J=E.map:E.alphaMap&&(J=E.alphaMap),void 0!==J&&(!0===J.matrixAutoUpdate&&J.updateMatrix(),D.uvTransform.value.copy(J.matrix))):d.isSpriteMaterial?(H=a,I=d,H.diffuse.value.copy(I.color),H.opacity.value=I.opacity,H.rotation.value=I.rotation,I.map&&(H.map.value=I.map),I.alphaMap&&(H.alphaMap.value=I.alphaMap),I.alphaTest>0&&(H.alphaTest.value=I.alphaTest),I.map?K=I.map:I.alphaMap&&(K=I.alphaMap),void 0!==K&&(!0===K.matrixAutoUpdate&&K.updateMatrix(),H.uvTransform.value.copy(K.matrix))):d.isShadowMaterial?(a.color.value.copy(d.color),a.opacity.value=d.opacity):d.isShaderMaterial&&(d.uniformsNeedUpdate=!1)}}}function $R(a={}){const b=void 0!==a.canvas?a.canvas:function(){const a=ed("canvas");return a.style.display="block",a}(),c=void 0!==a.context?a.context:null,d=void 0!==a.alpha&&a.alpha,e=void 0===a.depth||a.depth,g=void 0===a.stencil||a.stencil,h=void 0!==a.antialias&&a.antialias,i=void 0===a.premultipliedAlpha||a.premultipliedAlpha,j=void 0!==a.preserveDrawingBuffer&&a.preserveDrawingBuffer,k=void 0!==a.powerPreference?a.powerPreference:"default",l=void 0!==a.failIfMajorPerformanceCaveat&&a.failIfMajorPerformanceCaveat;let m=null,n=null;const o=[],p=[];this.domElement=b,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=3000,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const q=this;let r=!1,s=0,t=0,u=null,v=-1,w=null;const x=new hf(),y=new hf();let z=null,A=b.width,B=b.height,C=1,D=null,E=null;const F=new hf(0,0,A,B),G=new hf(0,0,A,B);let H=!1;const I=new kK();let J=!1,K=!1,L=null;const M=new pq(),N=new Xj(),O={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function P(){return null===u?C:1}let Q=c;function R(a,c){for(let d=0;d<a.length;d++){const e=a[d],f=b.getContext(e,c);if(null!==f)return f}return null}try{const S={alpha:!0,depth:e,stencil:g,antialias:h,premultipliedAlpha:i,preserveDrawingBuffer:j,powerPreference:k,failIfMajorPerformanceCaveat:l};if("setAttribute"in b&&b.setAttribute("data-engine","three.js r137"),b.addEventListener("webglcontextlost",sa,!1),b.addEventListener("webglcontextrestored",ta,!1),null===Q){const T=["webgl2","webgl","experimental-webgl"];if(!0===q.isWebGL1Renderer&&T.shift(),Q=R(T,S),null===Q){if(R(T))throw new Error("Error creating WebGL context with your selected attributes.");throw new Error("Error creating WebGL context.")}}void 0===Q.getShaderPrecisionFormat&&(Q.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(U){throw console.error("THREE.WebGLRenderer: "+U.message),U}let V,W,X,Y,Z,$,_,aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa;function qa(){V=new jO(Q),W=new SL(Q,V,a),V.init(W),oa=new IQ(Q,V,W),X=new GQ(Q,V,W),Y=new mO(Q),Z=new oQ(),$=new HQ(Q,V,X,Z,W,oa,Y),_=new UL(q),aa=new iO(q),ba=new jL(Q,W),pa=new QL(Q,V,ba,W),ca=new kO(Q,ba,Y,pa),da=new wO(Q,ca,ba,Y),la=new vO(Q,W,$),ia=new TL(Z),ea=new nQ(q,_,aa,V,W,pa,ia),fa=new ZR(Z),ga=new sQ(),ha=new yQ(V,W),ka=new PL(q,_,X,da,d,i),ja=new FQ(q,da,W),ma=new RL(Q,V,Y,W),na=new lO(Q,V,Y,W),Y.programs=ea.programs,q.capabilities=W,q.extensions=V,q.properties=Z,q.renderLists=ga,q.shadowMap=ja,q.state=X,q.info=Y}qa();const ra=new rR(q,Q);function sa(a){a.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),r=!0}function ta(){console.log("THREE.WebGLRenderer: Context Restored."),r=!1;const a=Y.autoReset,b=ja.enabled,c=ja.autoUpdate,d=ja.needsUpdate,e=ja.type;qa(),Y.autoReset=a,ja.enabled=b,ja.autoUpdate=c,ja.needsUpdate=d,ja.type=e}function ua(a){const b=a.target;b.removeEventListener("dispose",ua),va(b)}function va(a){wa(a),Z.remove(a)}function wa(a){const b=Z.get(a).programs;void 0!==b&&(b.forEach(function(a){ea.releaseProgram(a)}),a.isShaderMaterial&&ea.releaseShaderCache(a))}this.xr=ra,this.getContext=function(){return Q},this.getContextAttributes=function(){return Q.getContextAttributes()},this.forceContextLoss=function(){const a=V.get("WEBGL_lose_context");a&&a.loseContext()},this.forceContextRestore=function(){const a=V.get("WEBGL_lose_context");a&&a.restoreContext()},this.getPixelRatio=function(){return C},this.setPixelRatio=function(a){void 0!==a&&(C=a,this.setSize(A,B,!1))},this.getSize=function(a){return a.set(A,B)},this.setSize=function(a,c,d){if(ra.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}A=a,B=c,b.width=Math.floor(a*C),b.height=Math.floor(c*C),!1!==d&&(b.style.width=a+"px",b.style.height=c+"px"),this.setViewport(0,0,a,c)},this.getDrawingBufferSize=function(a){return a.set(A*C,B*C).floor()},this.setDrawingBufferSize=function(a,c,d){A=a,B=c,C=d,b.width=Math.floor(a*d),b.height=Math.floor(c*d),this.setViewport(0,0,a,c)},this.getCurrentViewport=function(a){return a.copy(x)},this.getViewport=function(a){return a.copy(F)},this.setViewport=function(a,b,c,d){a.isVector4?F.set(a.x,a.y,a.z,a.w):F.set(a,b,c,d),X.viewport(x.copy(F).multiplyScalar(C).floor())},this.getScissor=function(a){return a.copy(G)},this.setScissor=function(a,b,c,d){a.isVector4?G.set(a.x,a.y,a.z,a.w):G.set(a,b,c,d),X.scissor(y.copy(G).multiplyScalar(C).floor())},this.getScissorTest=function(){return H},this.setScissorTest=function(a){X.setScissorTest(H=a)},this.setOpaqueSort=function(a){D=a},this.setTransparentSort=function(a){E=a},this.getClearColor=function(a){return a.copy(ka.getClearColor())},this.setClearColor=function(){ka.setClearColor.apply(ka,arguments)},this.getClearAlpha=function(){return ka.getClearAlpha()},this.setClearAlpha=function(){ka.setClearAlpha.apply(ka,arguments)},this.clear=function(a,b,c){let d=0;(void 0===a||a)&&(d|=16384),(void 0===b||b)&&(d|=256),(void 0===c||c)&&(d|=1024),Q.clear(d)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){b.removeEventListener("webglcontextlost",sa,!1),b.removeEventListener("webglcontextrestored",ta,!1),ga.dispose(),ha.dispose(),Z.dispose(),_.dispose(),aa.dispose(),da.dispose(),pa.dispose(),ea.dispose(),ra.dispose(),ra.removeEventListener("sessionstart",ya),ra.removeEventListener("sessionend",za),L&&(L.dispose(),L=null),Aa.stop()},this.renderBufferDirect=function(a,b,c,d,e,f){null===b&&(b=O);const g=e.isMesh&&0>e.matrixWorld.determinant(),h=Ia(a,b,c,d,e);X.setMaterial(d,g);let i=c.index;const j=c.attributes.position;if(null===i){if(void 0===j||0===j.count)return}else if(0===i.count)return;let k=1;!0===d.wireframe&&(i=ca.getWireframeAttribute(c),k=2),pa.setup(e,d,h,c,i);let l,m=ma;null!==i&&(l=ba.get(i),(m=na).setIndex(l));const n=null!==i?i.count:j.count,o=c.drawRange.start*k,p=c.drawRange.count*k,q=null!==f?f.start*k:0,r=null!==f?f.count*k:1/0,s=Math.max(o,q),t=Math.max(0,Math.min(n,o+p,q+r)-1-s+1);if(0!==t){if(e.isMesh)!0===d.wireframe?(X.setLineWidth(d.wireframeLinewidth*P()),m.setMode(1)):m.setMode(4);else if(e.isLine){let u=d.linewidth;void 0===u&&(u=1),X.setLineWidth(u*P()),e.isLineSegments?m.setMode(1):e.isLineLoop?m.setMode(2):m.setMode(3)}else e.isPoints?m.setMode(0):e.isSprite&&m.setMode(4);if(e.isInstancedMesh)m.renderInstances(s,t,e.count);else if(c.isInstancedBufferGeometry){const v=Math.min(c.instanceCount,c._maxInstanceCount);m.renderInstances(s,t,v)}else m.render(s,t)}},this.compile=function(a,b){(n=ha.get(a)).init(),p.push(n),a.traverseVisible(function(a){a.isLight&&a.layers.test(b.layers)&&(n.pushLight(a),a.castShadow&&n.pushShadow(a))}),n.setupLights(q.physicallyCorrectLights),a.traverse(function(b){const c=b.material;if(c)if(Array.isArray(c))for(let d=0;d<c.length;d++){const e=c[d];Ga(e,a,b)}else Ga(c,a,b)}),p.pop(),n=null};let xa=null;function ya(){Aa.stop()}function za(){Aa.start()}const Aa=new iL();function Ba(a,b,c,d){if(!1===a.visible)return;const e=a.layers.test(b.layers);if(e){if(a.isGroup)c=a.renderOrder;else if(a.isLOD)!0===a.autoUpdate&&a.update(b);else if(a.isLight)n.pushLight(a),a.castShadow&&n.pushShadow(a);else if(a.isSprite){if(!a.frustumCulled||I.intersectsSprite(a)){d&&N.setFromMatrixPosition(a.matrixWorld).applyMatrix4(M);const f=da.update(a),g=a.material;g.visible&&m.push(a,f,g,c,N.z,null)}}else if((a.isMesh||a.isLine||a.isPoints)&&(a.isSkinnedMesh&&a.skeleton.frame!==Y.render.frame&&(a.skeleton.update(),a.skeleton.frame=Y.render.frame),!a.frustumCulled||I.intersectsObject(a))){d&&N.setFromMatrixPosition(a.matrixWorld).applyMatrix4(M);const h=da.update(a),i=a.material;if(Array.isArray(i)){const j=h.groups;for(let k=0,l=j.length;k<l;k++){const o=j[k],p=i[o.materialIndex];p&&p.visible&&m.push(a,h,p,c,N.z,o)}}else i.visible&&m.push(a,h,i,c,N.z,null)}}const q=a.children;for(let r=0,s=q.length;r<s;r++)Ba(q[r],b,c,d)}function Ca(a,b,c,d){const e=a.opaque,f=a.transmissive,g=a.transparent;n.setupLightsView(c),f.length>0&&Da(e,b,c),d&&X.viewport(x.copy(d)),e.length>0&&Ea(e,b,c),f.length>0&&Ea(f,b,c),g.length>0&&Ea(g,b,c)}function Da(a,b,c){if(null===L){const d=!0===h&& !0===W.isWebGL2,e=d?lh:Rg;L=new e(1024,1024,{generateMipmaps:!0,type:null!==oa.convert(1016)?1016:1009,minFilter:1008,magFilter:1003,wrapS:1001,wrapT:1001,useRenderToTexture:V.has("WEBGL_multisampled_render_to_texture")})}const f=q.getRenderTarget();q.setRenderTarget(L),q.clear();const g=q.toneMapping;q.toneMapping=0,Ea(a,b,c),q.toneMapping=g,$.updateMultisampleRenderTarget(L),$.updateRenderTargetMipmap(L),q.setRenderTarget(f)}function Ea(a,b,c){const d=!0===b.isScene?b.overrideMaterial:null;for(let e=0,f=a.length;e<f;e++){const g=a[e],h=g.object,i=g.geometry,j=null===d?g.material:d,k=g.group;h.layers.test(c.layers)&&Fa(h,b,c,i,j,k)}}function Fa(a,b,c,d,e,g){a.onBeforeRender(q,b,c,d,e,g),a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld),a.normalMatrix.getNormalMatrix(a.modelViewMatrix),e.onBeforeRender(q,b,c,d,a,g),!0===e.transparent&&2===e.side?(e.side=f,e.needsUpdate=!0,q.renderBufferDirect(c,b,d,e,a,g),e.side=0,e.needsUpdate=!0,q.renderBufferDirect(c,b,d,e,a,g),e.side=2):q.renderBufferDirect(c,b,d,e,a,g),a.onAfterRender(q,b,c,d,e,g)}function Ga(a,b,c){!0!==b.isScene&&(b=O);const d=Z.get(a),e=n.state.lights,f=n.state.shadowsArray,g=e.state.version,h=ea.getParameters(a,e.state,f,b,c),i=ea.getProgramCacheKey(h);let j=d.programs;d.environment=a.isMeshStandardMaterial?b.environment:null,d.fog=b.fog,d.envMap=(a.isMeshStandardMaterial?aa:_).get(a.envMap||d.environment),void 0===j&&(a.addEventListener("dispose",ua),j=new Map(),d.programs=j);let k=j.get(i);if(void 0!==k){if(d.currentProgram===k&&d.lightsStateVersion===g)return Ha(a,h),k}else h.uniforms=ea.getUniforms(a),a.onBuild(c,h,q),a.onBeforeCompile(h,q),k=ea.acquireProgram(h,i),j.set(i,k),d.uniforms=h.uniforms;const l=d.uniforms;(a.isShaderMaterial||a.isRawShaderMaterial)&& !0!==a.clipping||(l.clippingPlanes=ia.uniform),Ha(a,h),d.needsLights=Ka(a),d.lightsStateVersion=g,d.needsLights&&(l.ambientLightColor.value=e.state.ambient,l.lightProbe.value=e.state.probe,l.directionalLights.value=e.state.directional,l.directionalLightShadows.value=e.state.directionalShadow,l.spotLights.value=e.state.spot,l.spotLightShadows.value=e.state.spotShadow,l.rectAreaLights.value=e.state.rectArea,l.ltc_1.value=e.state.rectAreaLTC1,l.ltc_2.value=e.state.rectAreaLTC2,l.pointLights.value=e.state.point,l.pointLightShadows.value=e.state.pointShadow,l.hemisphereLights.value=e.state.hemi,l.directionalShadowMap.value=e.state.directionalShadowMap,l.directionalShadowMatrix.value=e.state.directionalShadowMatrix,l.spotShadowMap.value=e.state.spotShadowMap,l.spotShadowMatrix.value=e.state.spotShadowMatrix,l.pointShadowMap.value=e.state.pointShadowMap,l.pointShadowMatrix.value=e.state.pointShadowMatrix);const m=k.getUniforms(),o=FP.seqWithValue(m.seq,l);return d.currentProgram=k,d.uniformsList=o,k}function Ha(a,b){const c=Z.get(a);c.outputEncoding=b.outputEncoding,c.instancing=b.instancing,c.skinning=b.skinning,c.morphTargets=b.morphTargets,c.morphNormals=b.morphNormals,c.morphTargetsCount=b.morphTargetsCount,c.numClippingPlanes=b.numClippingPlanes,c.numIntersection=b.numClipIntersection,c.vertexAlphas=b.vertexAlphas,c.vertexTangents=b.vertexTangents,c.toneMapping=b.toneMapping}function Ia(a,b,c,d,e){!0!==b.isScene&&(b=O),$.resetTextureUnits();const f=b.fog,g=d.isMeshStandardMaterial?b.environment:null,h=null===u?q.outputEncoding:!0===u.isXRRenderTarget?u.texture.encoding:3000,i=(d.isMeshStandardMaterial?aa:_).get(d.envMap||g),j=!0===d.vertexColors&&!!c.attributes.color&&4===c.attributes.color.itemSize,k=!!d.normalMap&&!!c.attributes.tangent,l=!!c.morphAttributes.position,m=!!c.morphAttributes.normal,o=c.morphAttributes.position?c.morphAttributes.position.length:0,p=d.toneMapped?q.toneMapping:0,r=Z.get(d),s=n.state.lights;if(!0===J&&(!0===K||a!==w)){const t=a===w&&d.id===v;ia.setState(d,a,t)}let x=!1;d.version===r.__version?r.needsLights&&r.lightsStateVersion!==s.state.version?x=!0:r.outputEncoding!==h?x=!0:e.isInstancedMesh&& !1===r.instancing?x=!0:e.isInstancedMesh|| !0!==r.instancing?e.isSkinnedMesh&& !1===r.skinning?x=!0:e.isSkinnedMesh|| !0!==r.skinning?r.envMap!==i?x=!0:d.fog&&r.fog!==f?x=!0:void 0!==r.numClippingPlanes&&(r.numClippingPlanes!==ia.numPlanes||r.numIntersection!==ia.numIntersection)?x=!0:r.vertexAlphas!==j?x=!0:r.vertexTangents!==k?x=!0:r.morphTargets!==l?x=!0:r.morphNormals!==m?x=!0:r.toneMapping!==p?x=!0:!0===W.isWebGL2&&r.morphTargetsCount!==o&&(x=!0):x=!0:x=!0:(x=!0,r.__version=d.version);let y=r.currentProgram;!0===x&&(y=Ga(d,b,e));let z=!1,A=!1,D=!1;const E=y.getUniforms(),F=r.uniforms;if(X.useProgram(y.program)&&(z=!0,A=!0,D=!0),d.id!==v&&(v=d.id,A=!0),z||w!==a){if(E.setValue(Q,"projectionMatrix",a.projectionMatrix),W.logarithmicDepthBuffer&&E.setValue(Q,"logDepthBufFC",2/(Math.log(a.far+1)/Math.LN2)),w!==a&&(w=a,A=!0,D=!0),d.isShaderMaterial||d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshStandardMaterial||d.envMap){const G=E.map.cameraPosition;void 0!==G&&G.setValue(Q,N.setFromMatrixPosition(a.matrixWorld))}(d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshLambertMaterial||d.isMeshBasicMaterial||d.isMeshStandardMaterial||d.isShaderMaterial)&&E.setValue(Q,"isOrthographic",!0===a.isOrthographicCamera),(d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshLambertMaterial||d.isMeshBasicMaterial||d.isMeshStandardMaterial||d.isShaderMaterial||d.isShadowMaterial||e.isSkinnedMesh)&&E.setValue(Q,"viewMatrix",a.matrixWorldInverse)}if(e.isSkinnedMesh){E.setOptional(Q,e,"bindMatrix"),E.setOptional(Q,e,"bindMatrixInverse");const H=e.skeleton;H&&(W.floatVertexTextures?(null===H.boneTexture&&H.computeBoneTexture(),E.setValue(Q,"boneTexture",H.boneTexture,$),E.setValue(Q,"boneTextureSize",H.boneTextureSize)):E.setOptional(Q,H,"boneMatrices"))}return c&&(void 0!==c.morphAttributes.position|| void 0!==c.morphAttributes.normal)&&la.update(e,c,d,y),(A||r.receiveShadow!==e.receiveShadow)&&(r.receiveShadow=e.receiveShadow,E.setValue(Q,"receiveShadow",e.receiveShadow)),A&&(E.setValue(Q,"toneMappingExposure",q.toneMappingExposure),r.needsLights&&Ja(F,D),f&&d.fog&&fa.refreshFogUniforms(F,f),fa.refreshMaterialUniforms(F,d,C,B,L),FP.upload(Q,r.uniformsList,F,$)),d.isShaderMaterial&& !0===d.uniformsNeedUpdate&&(FP.upload(Q,r.uniformsList,F,$),d.uniformsNeedUpdate=!1),d.isSpriteMaterial&&E.setValue(Q,"center",e.center),E.setValue(Q,"modelViewMatrix",e.modelViewMatrix),E.setValue(Q,"normalMatrix",e.normalMatrix),E.setValue(Q,"modelMatrix",e.matrixWorld),y}function Ja(a,b){a.ambientLightColor.needsUpdate=b,a.lightProbe.needsUpdate=b,a.directionalLights.needsUpdate=b,a.directionalLightShadows.needsUpdate=b,a.pointLights.needsUpdate=b,a.pointLightShadows.needsUpdate=b,a.spotLights.needsUpdate=b,a.spotLightShadows.needsUpdate=b,a.rectAreaLights.needsUpdate=b,a.hemisphereLights.needsUpdate=b}function Ka(a){return a.isMeshLambertMaterial||a.isMeshToonMaterial||a.isMeshPhongMaterial||a.isMeshStandardMaterial||a.isShadowMaterial||a.isShaderMaterial&& !0===a.lights}Aa.setAnimationLoop(function(a){xa&&xa(a)}),"undefined"!=typeof window&&Aa.setContext(window),this.setAnimationLoop=function(a){xa=a,ra.setAnimationLoop(a),null===a?Aa.stop():Aa.start()},ra.addEventListener("sessionstart",ya),ra.addEventListener("sessionend",za),this.render=function(a,b){if(void 0!==b&& !0!==b.isCamera){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(!0===r)return;!0===a.autoUpdate&&a.updateMatrixWorld(),null===b.parent&&b.updateMatrixWorld(),!0===ra.enabled&& !0===ra.isPresenting&&(!0===ra.cameraAutoUpdate&&ra.updateCamera(b),b=ra.getCamera()),!0===a.isScene&&a.onBeforeRender(q,a,b,u),(n=ha.get(a,p.length)).init(),p.push(n),M.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),I.setFromProjectionMatrix(M),K=this.localClippingEnabled,J=ia.init(this.clippingPlanes,K,b),(m=ga.get(a,o.length)).init(),o.push(m),Ba(a,b,0,q.sortObjects),m.finish(),!0===q.sortObjects&&m.sort(D,E),!0===J&&ia.beginShadows();const c=n.state.shadowsArray;if(ja.render(c,a,b),!0===J&&ia.endShadows(),!0===this.info.autoReset&&this.info.reset(),ka.render(m,a),n.setupLights(q.physicallyCorrectLights),b.isArrayCamera){const d=b.cameras;for(let e=0,f=d.length;e<f;e++){const g=d[e];Ca(m,a,g,g.viewport)}}else Ca(m,a,b);null!==u&&($.updateMultisampleRenderTarget(u),$.updateRenderTargetMipmap(u)),!0===a.isScene&&a.onAfterRender(q,a,b),X.buffers.depth.setTest(!0),X.buffers.depth.setMask(!0),X.buffers.color.setMask(!0),X.setPolygonOffset(!1),pa.resetDefaultState(),v=-1,w=null,p.pop(),n=p.length>0?p[p.length-1]:null,o.pop(),m=o.length>0?o[o.length-1]:null},this.getActiveCubeFace=function(){return s},this.getActiveMipmapLevel=function(){return t},this.getRenderTarget=function(){return u},this.setRenderTargetTextures=function(a,b,c){Z.get(a.texture).__webglTexture=b,Z.get(a.depthTexture).__webglTexture=c;const d=Z.get(a);d.__hasExternalTextures=!0,d.__hasExternalTextures&&(d.__autoAllocateDepthBuffer=void 0===c,!d.__autoAllocateDepthBuffer&&a.useRenderToTexture&&(console.warn("render-to-texture extension was disabled because an external texture was provided"),a.useRenderToTexture=!1,a.useRenderbuffer=!0))},this.setRenderTargetFramebuffer=function(a,b){const c=Z.get(a);c.__webglFramebuffer=b,c.__useDefaultFramebuffer=void 0===b},this.setRenderTarget=function(a,b=0,c=0){u=a,s=b,t=c;let d=!0;if(a){const e=Z.get(a);void 0!==e.__useDefaultFramebuffer?(X.bindFramebuffer(36160,null),d=!1):void 0===e.__webglFramebuffer?$.setupRenderTarget(a):e.__hasExternalTextures&&$.rebindTextures(a,Z.get(a.texture).__webglTexture,Z.get(a.depthTexture).__webglTexture)}let f=null,g=!1,h=!1;if(a){const i=a.texture;(i.isDataTexture3D||i.isDataTexture2DArray)&&(h=!0);const j=Z.get(a).__webglFramebuffer;a.isWebGLCubeRenderTarget?(f=j[b],g=!0):f=a.useRenderbuffer?Z.get(a).__webglMultisampledFramebuffer:j,x.copy(a.viewport),y.copy(a.scissor),z=a.scissorTest}else x.copy(F).multiplyScalar(C).floor(),y.copy(G).multiplyScalar(C).floor(),z=H;const k=X.bindFramebuffer(36160,f);if(k&&W.drawBuffers&&d&&X.drawBuffers(a,f),X.viewport(x),X.scissor(y),X.setScissorTest(z),g){const l=Z.get(a.texture);Q.framebufferTexture2D(36160,36064,34069+b,l.__webglTexture,c)}else if(h){const m=Z.get(a.texture),n=b||0;Q.framebufferTextureLayer(36160,36064,m.__webglTexture,c||0,n)}v=-1},this.readRenderTargetPixels=function(a,b,c,d,e,f,g){if(!(a&&a.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let h=Z.get(a).__webglFramebuffer;if(a.isWebGLCubeRenderTarget&& void 0!==g&&(h=h[g]),h){X.bindFramebuffer(36160,h);try{const i=a.texture,j=i.format,k=i.type;if(1023!==j&&oa.convert(j)!==Q.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const l=1016===k&&(V.has("EXT_color_buffer_half_float")||W.isWebGL2&&V.has("EXT_color_buffer_float"));if(1009!==k&&oa.convert(k)!==Q.getParameter(35738)&&!(1015===k&&(W.isWebGL2||V.has("OES_texture_float")||V.has("WEBGL_color_buffer_float")))&&!l){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}36053===Q.checkFramebufferStatus(36160)?b>=0&&b<=a.width-d&&c>=0&&c<=a.height-e&&Q.readPixels(b,c,d,e,oa.convert(j),oa.convert(k),f):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const m=null!==u?Z.get(u).__webglFramebuffer:null;X.bindFramebuffer(36160,m)}}},this.copyFramebufferToTexture=function(a,b,c=0){if(!0!==b.isFramebufferTexture){console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");return}const d=Math.pow(2,-c),e=Math.floor(b.image.width*d),f=Math.floor(b.image.height*d);$.setTexture2D(b,0),Q.copyTexSubImage2D(3553,c,0,0,a.x,a.y,e,f),X.unbindTexture()},this.copyTextureToTexture=function(a,b,c,d=0){const e=b.image.width,f=b.image.height,g=oa.convert(c.format),h=oa.convert(c.type);$.setTexture2D(c,0),Q.pixelStorei(37440,c.flipY),Q.pixelStorei(37441,c.premultiplyAlpha),Q.pixelStorei(3317,c.unpackAlignment),b.isDataTexture?Q.texSubImage2D(3553,d,a.x,a.y,e,f,g,h,b.image.data):b.isCompressedTexture?Q.compressedTexSubImage2D(3553,d,a.x,a.y,b.mipmaps[0].width,b.mipmaps[0].height,g,b.mipmaps[0].data):Q.texSubImage2D(3553,d,a.x,a.y,g,h,b.image),0===d&&c.generateMipmaps&&Q.generateMipmap(3553),X.unbindTexture()},this.copyTextureToTexture3D=function(a,b,c,d,e=0){if(q.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const f=a.max.x-a.min.x+1,g=a.max.y-a.min.y+1,h=a.max.z-a.min.z+1,i=oa.convert(d.format),j=oa.convert(d.type);let k;if(d.isDataTexture3D)$.setTexture3D(d,0),k=32879;else if(d.isDataTexture2DArray)$.setTexture2DArray(d,0),k=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}Q.pixelStorei(37440,d.flipY),Q.pixelStorei(37441,d.premultiplyAlpha),Q.pixelStorei(3317,d.unpackAlignment);const l=Q.getParameter(3314),m=Q.getParameter(32878),n=Q.getParameter(3316),o=Q.getParameter(3315),p=Q.getParameter(32877),r=c.isCompressedTexture?c.mipmaps[0]:c.image;Q.pixelStorei(3314,r.width),Q.pixelStorei(32878,r.height),Q.pixelStorei(3316,a.min.x),Q.pixelStorei(3315,a.min.y),Q.pixelStorei(32877,a.min.z),c.isDataTexture||c.isDataTexture3D?Q.texSubImage3D(k,e,b.x,b.y,b.z,f,g,h,i,j,r.data):c.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Q.compressedTexSubImage3D(k,e,b.x,b.y,b.z,f,g,h,i,r.data)):Q.texSubImage3D(k,e,b.x,b.y,b.z,f,g,h,i,j,r),Q.pixelStorei(3314,l),Q.pixelStorei(32878,m),Q.pixelStorei(3316,n),Q.pixelStorei(3315,o),Q.pixelStorei(32877,p),0===e&&d.generateMipmaps&&Q.generateMipmap(k),X.unbindTexture()},this.initTexture=function(a){$.setTexture2D(a,0),X.unbindTexture()},this.resetState=function(){s=0,t=0,u=null,X.reset(),pa.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}$R.prototype.isWebGLRenderer=!0,(class extends $R{}).prototype.isWebGL1Renderer=!0;class _R{constructor(aS,bS=0.00025){this.name="",this.color=new ld(aS),this.density=bS}clone(){return new _R(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}_R.prototype.isFogExp2=!0;class cS{constructor(dS,eS=1,fS=1000){this.name="",this.color=new ld(dS),this.near=eS,this.far=fS}clone(){return new cS(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}cS.prototype.isFog=!0;class gS extends Aw{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(hS,iS){return super.copy(hS,iS),null!==hS.background&&(this.background=hS.background.clone()),null!==hS.environment&&(this.environment=hS.environment.clone()),null!==hS.fog&&(this.fog=hS.fog.clone()),null!==hS.overrideMaterial&&(this.overrideMaterial=hS.overrideMaterial.clone()),this.autoUpdate=hS.autoUpdate,this.matrixAutoUpdate=hS.matrixAutoUpdate,this}toJSON(jS){const kS=super.toJSON(jS);return null!==this.fog&&(kS.object.fog=this.fog.toJSON()),kS}}gS.prototype.isScene=!0;class lS{constructor(mS,nS){this.array=mS,this.stride=nS,this.count=void 0!==mS?mS.length/nS:0,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=E()}onUploadCallback(){}set needsUpdate(oS){!0===oS&&this.version++}setUsage(pS){return this.usage=pS,this}copy(qS){return this.array=new qS.array.constructor(qS.array),this.count=qS.count,this.stride=qS.stride,this.usage=qS.usage,this}copyAt(rS,sS,tS){rS*=this.stride,tS*=sS.stride;for(let uS=0,vS=this.stride;uS<vS;uS++)this.array[rS+uS]=sS.array[tS+uS];return this}set(wS,xS=0){return this.array.set(wS,xS),this}clone(yS){void 0===yS.arrayBuffers&&(yS.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=E()),void 0===yS.arrayBuffers[this.array.buffer._uuid]&&(yS.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const zS=new this.array.constructor(yS.arrayBuffers[this.array.buffer._uuid]),AS=new this.constructor(zS,this.stride);return AS.setUsage(this.usage),AS}onUpload(BS){return this.onUploadCallback=BS,this}toJSON(CS){return void 0===CS.arrayBuffers&&(CS.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=E()),void 0===CS.arrayBuffers[this.array.buffer._uuid]&&(CS.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}lS.prototype.isInterleavedBuffer=!0;const DS=new Xj();class ES{constructor(FS,GS,HS,IS=!1){this.name="",this.data=FS,this.itemSize=GS,this.offset=HS,this.normalized=!0===IS}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(JS){this.data.needsUpdate=JS}applyMatrix4(KS){for(let LS=0,MS=this.data.count;LS<MS;LS++)DS.x=this.getX(LS),DS.y=this.getY(LS),DS.z=this.getZ(LS),DS.applyMatrix4(KS),this.setXYZ(LS,DS.x,DS.y,DS.z);return this}applyNormalMatrix(NS){for(let OS=0,PS=this.count;OS<PS;OS++)DS.x=this.getX(OS),DS.y=this.getY(OS),DS.z=this.getZ(OS),DS.applyNormalMatrix(NS),this.setXYZ(OS,DS.x,DS.y,DS.z);return this}transformDirection(QS){for(let RS=0,SS=this.count;RS<SS;RS++)DS.x=this.getX(RS),DS.y=this.getY(RS),DS.z=this.getZ(RS),DS.transformDirection(QS),this.setXYZ(RS,DS.x,DS.y,DS.z);return this}setX(TS,US){return this.data.array[TS*this.data.stride+this.offset]=US,this}setY(VS,WS){return this.data.array[VS*this.data.stride+this.offset+1]=WS,this}setZ(XS,YS){return this.data.array[XS*this.data.stride+this.offset+2]=YS,this}setW(ZS,$S){return this.data.array[ZS*this.data.stride+this.offset+3]=$S,this}getX(_S){return this.data.array[_S*this.data.stride+this.offset]}getY(aT){return this.data.array[aT*this.data.stride+this.offset+1]}getZ(bT){return this.data.array[bT*this.data.stride+this.offset+2]}getW(cT){return this.data.array[cT*this.data.stride+this.offset+3]}setXY(dT,eT,fT){return dT=dT*this.data.stride+this.offset,this.data.array[dT+0]=eT,this.data.array[dT+1]=fT,this}setXYZ(gT,hT,iT,jT){return gT=gT*this.data.stride+this.offset,this.data.array[gT+0]=hT,this.data.array[gT+1]=iT,this.data.array[gT+2]=jT,this}setXYZW(kT,lT,mT,nT,oT){return kT=kT*this.data.stride+this.offset,this.data.array[kT+0]=lT,this.data.array[kT+1]=mT,this.data.array[kT+2]=nT,this.data.array[kT+3]=oT,this}clone(pT){if(void 0!==pT)return void 0===pT.interleavedBuffers&&(pT.interleavedBuffers={}),void 0===pT.interleavedBuffers[this.data.uuid]&&(pT.interleavedBuffers[this.data.uuid]=this.data.clone(pT)),new ES(pT.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);{console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const qT=[];for(let rT=0;rT<this.count;rT++){const sT=rT*this.data.stride+this.offset;for(let tT=0;tT<this.itemSize;tT++)qT.push(this.data.array[sT+tT])}return new BA(new this.array.constructor(qT),this.itemSize,this.normalized)}}toJSON(uT){if(void 0!==uT)return void 0===uT.interleavedBuffers&&(uT.interleavedBuffers={}),void 0===uT.interleavedBuffers[this.data.uuid]&&(uT.interleavedBuffers[this.data.uuid]=this.data.toJSON(uT)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized};{console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const vT=[];for(let wT=0;wT<this.count;wT++){const xT=wT*this.data.stride+this.offset;for(let yT=0;yT<this.itemSize;yT++)vT.push(this.data.array[xT+yT])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:vT,normalized:this.normalized}}}}ES.prototype.isInterleavedBufferAttribute=!0;class zT extends eA{constructor(AT){super(),this.type="SpriteMaterial",this.color=new ld(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(AT)}copy(BT){return super.copy(BT),this.color.copy(BT.color),this.map=BT.map,this.alphaMap=BT.alphaMap,this.rotation=BT.rotation,this.sizeAttenuation=BT.sizeAttenuation,this}}zT.prototype.isSpriteMaterial=!0;let CT;const DT=new Xj(),ET=new Xj(),FT=new Xj(),GT=new L(),HT=new L(),IT=new pq(),JT=new Xj(),KT=new Xj(),LT=new Xj(),MT=new L(),NT=new L(),OT=new L();function PT(a,b,c,d,e,f){GT.subVectors(a,c).addScalar(0.5).multiply(d),void 0!==e?(HT.x=f*GT.x-e*GT.y,HT.y=e*GT.x+f*GT.y):HT.copy(GT),a.copy(b),a.x+=HT.x,a.y+=HT.y,a.applyMatrix4(IT)}(class extends Aw{constructor(QT){if(super(),this.type="Sprite",void 0===CT){CT=new uC();const RT=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]),ST=new lS(RT,5);CT.setIndex([0,1,2,0,2,3]),CT.setAttribute("position",new ES(ST,3,0,!1)),CT.setAttribute("uv",new ES(ST,2,3,!1))}this.geometry=CT,this.material=void 0!==QT?QT:new zT(),this.center=new L(0.5,0.5)}raycast(TT,UT){null===TT.camera&&console.error("THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites."),ET.setFromMatrixScale(this.matrixWorld),IT.copy(TT.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(TT.camera.matrixWorldInverse,this.matrixWorld),FT.setFromMatrixPosition(this.modelViewMatrix),TT.camera.isPerspectiveCamera&& !1===this.material.sizeAttenuation&&ET.multiplyScalar(-FT.z);const VT=this.material.rotation;let WT,XT;0!==VT&&(XT=Math.cos(VT),WT=Math.sin(VT));const YT=this.center;PT(JT.set(-0.5,-0.5,0),FT,YT,ET,WT,XT),PT(KT.set(0.5,-0.5,0),FT,YT,ET,WT,XT),PT(LT.set(0.5,0.5,0),FT,YT,ET,WT,XT),MT.set(0,0),NT.set(1,0),OT.set(1,1);let ZT=TT.ray.intersectTriangle(JT,KT,LT,!1,DT);if(null===ZT&&(PT(KT.set(-0.5,0.5,0),FT,YT,ET,WT,XT),NT.set(0,1),null===(ZT=TT.ray.intersectTriangle(JT,LT,KT,!1,DT))))return;const $T=TT.ray.origin.distanceTo(DT);$T<TT.near||$T>TT.far||UT.push({distance:$T,point:DT.clone(),uv:Dy.getUV(DT,JT,KT,LT,MT,NT,OT,new L()),face:null,object:this})}copy(_T){return super.copy(_T),void 0!==_T.center&&this.center.copy(_T.center),this.material=_T.material,this}}).prototype.isSprite=!0,new Xj(),new Xj();const aU=new Xj(),bU=new hf(),cU=new hf(),dU=new Xj(),eU=new pq();class fU extends dG{constructor(gU,hU){super(gU,hU),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new pq(),this.bindMatrixInverse=new pq()}copy(iU){return super.copy(iU),this.bindMode=iU.bindMode,this.bindMatrix.copy(iU.bindMatrix),this.bindMatrixInverse.copy(iU.bindMatrixInverse),this.skeleton=iU.skeleton,this}bind(jU,kU){this.skeleton=jU,void 0===kU&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),kU=this.matrixWorld),this.bindMatrix.copy(kU),this.bindMatrixInverse.copy(kU).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const lU=new hf(),mU=this.geometry.attributes.skinWeight;for(let nU=0,oU=mU.count;nU<oU;nU++){lU.x=mU.getX(nU),lU.y=mU.getY(nU),lU.z=mU.getZ(nU),lU.w=mU.getW(nU);const pU=1/lU.manhattanLength();pU!==1/0?lU.multiplyScalar(pU):lU.set(1,0,0,0),mU.setXYZW(nU,lU.x,lU.y,lU.z,lU.w)}}updateMatrixWorld(qU){super.updateMatrixWorld(qU),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(rU,sU){const tU=this.skeleton,uU=this.geometry;bU.fromBufferAttribute(uU.attributes.skinIndex,rU),cU.fromBufferAttribute(uU.attributes.skinWeight,rU),aU.copy(sU).applyMatrix4(this.bindMatrix),sU.set(0,0,0);for(let vU=0;vU<4;vU++){const wU=cU.getComponent(vU);if(0!==wU){const xU=bU.getComponent(vU);eU.multiplyMatrices(tU.bones[xU].matrixWorld,tU.boneInverses[xU]),sU.addScaledVector(dU.copy(aU).applyMatrix4(eU),wU)}}return sU.applyMatrix4(this.bindMatrixInverse)}}fU.prototype.isSkinnedMesh=!0;class yU extends Aw{constructor(){super(),this.type="Bone"}}yU.prototype.isBone=!0;class zU extends Ne{constructor(AU=null,BU=1,CU=1,DU,EU,FU,GU,HU,IU=1003,JU=1003,KU,LU){super(null,FU,GU,HU,IU,JU,DU,EU,KU,LU),this.image={data:AU,width:BU,height:CU},this.magFilter=IU,this.minFilter=JU,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}zU.prototype.isDataTexture=!0;const MU=new pq(),NU=new pq();class OU{constructor(PU=[],QU=[]){this.uuid=E(),this.bones=PU.slice(0),this.boneInverses=QU,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const RU=this.bones,SU=this.boneInverses;if(this.boneMatrices=new Float32Array(16*RU.length),0===SU.length)this.calculateInverses();else if(RU.length!==SU.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let TU=0,UU=this.bones.length;TU<UU;TU++)this.boneInverses.push(new pq())}}calculateInverses(){this.boneInverses.length=0;for(let VU=0,WU=this.bones.length;VU<WU;VU++){const XU=new pq();this.bones[VU]&&XU.copy(this.bones[VU].matrixWorld).invert(),this.boneInverses.push(XU)}}pose(){for(let YU=0,ZU=this.bones.length;YU<ZU;YU++){const $U=this.bones[YU];$U&&$U.matrixWorld.copy(this.boneInverses[YU]).invert()}for(let _U=0,aV=this.bones.length;_U<aV;_U++){const bV=this.bones[_U];bV&&(bV.parent&&bV.parent.isBone?(bV.matrix.copy(bV.parent.matrixWorld).invert(),bV.matrix.multiply(bV.matrixWorld)):bV.matrix.copy(bV.matrixWorld),bV.matrix.decompose(bV.position,bV.quaternion,bV.scale))}}update(){const cV=this.bones,dV=this.boneInverses,eV=this.boneMatrices,fV=this.boneTexture;for(let gV=0,hV=cV.length;gV<hV;gV++){const iV=cV[gV]?cV[gV].matrixWorld:NU;MU.multiplyMatrices(iV,dV[gV]),MU.toArray(eV,16*gV)}null!==fV&&(fV.needsUpdate=!0)}clone(){return new OU(this.bones,this.boneInverses)}computeBoneTexture(){let jV=Math.sqrt(4*this.bones.length);jV=Math.max(jV=J(jV),4);const kV=new Float32Array(jV*jV*4);kV.set(this.boneMatrices);const lV=new zU(kV,jV,jV,1023,1015);return lV.needsUpdate=!0,this.boneMatrices=kV,this.boneTexture=lV,this.boneTextureSize=jV,this}getBoneByName(mV){for(let nV=0,oV=this.bones.length;nV<oV;nV++){const pV=this.bones[nV];if(pV.name===mV)return pV}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(qV,rV){this.uuid=qV.uuid;for(let sV=0,tV=qV.bones.length;sV<tV;sV++){const uV=qV.bones[sV];let vV=rV[uV];void 0===vV&&(console.warn("THREE.Skeleton: No bone found with UUID:",uV),vV=new yU()),this.bones.push(vV),this.boneInverses.push(new pq().fromArray(qV.boneInverses[sV]))}return this.init(),this}toJSON(){const wV={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};wV.uuid=this.uuid;const xV=this.bones,yV=this.boneInverses;for(let zV=0,AV=xV.length;zV<AV;zV++){const BV=xV[zV];wV.bones.push(BV.uuid);const CV=yV[zV];wV.boneInverses.push(CV.toArray())}return wV}}class DV extends BA{constructor(EV,FV,GV,HV=1){"number"==typeof GV&&(HV=GV,GV=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(EV,FV,GV),this.meshPerAttribute=HV}copy(IV){return super.copy(IV),this.meshPerAttribute=IV.meshPerAttribute,this}toJSON(){const JV=super.toJSON();return JV.meshPerAttribute=this.meshPerAttribute,JV.isInstancedBufferAttribute=!0,JV}}DV.prototype.isInstancedBufferAttribute=!0;const KV=new pq(),LV=new pq(),MV=[],NV=new dG();(class extends dG{constructor(OV,PV,QV){super(OV,PV),this.instanceMatrix=new DV(new Float32Array(16*QV),16),this.instanceColor=null,this.count=QV,this.frustumCulled=!1}copy(RV){return super.copy(RV),this.instanceMatrix.copy(RV.instanceMatrix),null!==RV.instanceColor&&(this.instanceColor=RV.instanceColor.clone()),this.count=RV.count,this}getColorAt(SV,TV){TV.fromArray(this.instanceColor.array,3*SV)}getMatrixAt(UV,VV){VV.fromArray(this.instanceMatrix.array,16*UV)}raycast(WV,XV){const YV=this.matrixWorld,ZV=this.count;if(NV.geometry=this.geometry,NV.material=this.material,void 0!==NV.material)for(let $V=0;$V<ZV;$V++){this.getMatrixAt($V,KV),LV.multiplyMatrices(YV,KV),NV.matrixWorld=LV,NV.raycast(WV,MV);for(let _V=0,aW=MV.length;_V<aW;_V++){const bW=MV[_V];bW.instanceId=$V,bW.object=this,XV.push(bW)}MV.length=0}}setColorAt(cW,dW){null===this.instanceColor&&(this.instanceColor=new DV(new Float32Array(3*this.instanceMatrix.count),3)),dW.toArray(this.instanceColor.array,3*cW)}setMatrixAt(eW,fW){fW.toArray(this.instanceMatrix.array,16*eW)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class gW extends eA{constructor(hW){super(),this.type="LineBasicMaterial",this.color=new ld(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(hW)}copy(iW){return super.copy(iW),this.color.copy(iW.color),this.linewidth=iW.linewidth,this.linecap=iW.linecap,this.linejoin=iW.linejoin,this}}gW.prototype.isLineBasicMaterial=!0;const jW=new Xj(),kW=new Xj(),lW=new pq(),mW=new Xo(),nW=new mo();class oW extends Aw{constructor(pW=new uC(),qW=new gW()){super(),this.type="Line",this.geometry=pW,this.material=qW,this.updateMorphTargets()}copy(rW){return super.copy(rW),this.material=rW.material,this.geometry=rW.geometry,this}computeLineDistances(){const sW=this.geometry;if(sW.isBufferGeometry)if(null===sW.index){const tW=sW.attributes.position,uW=[0];for(let vW=1,wW=tW.count;vW<wW;vW++)jW.fromBufferAttribute(tW,vW-1),kW.fromBufferAttribute(tW,vW),uW[vW]=uW[vW-1],uW[vW]+=jW.distanceTo(kW);sW.setAttribute("lineDistance",new jC(uW,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else sW.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(xW,yW){const zW=this.geometry,AW=this.matrixWorld,BW=xW.params.Line.threshold,CW=zW.drawRange;if(null===zW.boundingSphere&&zW.computeBoundingSphere(),nW.copy(zW.boundingSphere),nW.applyMatrix4(AW),nW.radius+=BW,!1===xW.ray.intersectsSphere(nW))return;lW.copy(AW).invert(),mW.copy(xW.ray).applyMatrix4(lW);const DW=BW/((this.scale.x+this.scale.y+this.scale.z)/3),EW=DW*DW,FW=new Xj(),GW=new Xj(),HW=new Xj(),IW=new Xj(),JW=this.isLineSegments?2:1;if(zW.isBufferGeometry){const KW=zW.index,LW=zW.attributes,MW=LW.position;if(null!==KW){const NW=Math.max(0,CW.start),OW=Math.min(KW.count,CW.start+CW.count);for(let PW=NW,QW=OW-1;PW<QW;PW+=JW){const RW=KW.getX(PW),SW=KW.getX(PW+1);FW.fromBufferAttribute(MW,RW),GW.fromBufferAttribute(MW,SW);const TW=mW.distanceSqToSegment(FW,GW,IW,HW);if(TW>EW)continue;IW.applyMatrix4(this.matrixWorld);const UW=xW.ray.origin.distanceTo(IW);UW<xW.near||UW>xW.far||yW.push({distance:UW,point:HW.clone().applyMatrix4(this.matrixWorld),index:PW,face:null,faceIndex:null,object:this})}}else{const VW=Math.max(0,CW.start),WW=Math.min(MW.count,CW.start+CW.count);for(let XW=VW,YW=WW-1;XW<YW;XW+=JW){FW.fromBufferAttribute(MW,XW),GW.fromBufferAttribute(MW,XW+1);const ZW=mW.distanceSqToSegment(FW,GW,IW,HW);if(ZW>EW)continue;IW.applyMatrix4(this.matrixWorld);const $W=xW.ray.origin.distanceTo(IW);$W<xW.near||$W>xW.far||yW.push({distance:$W,point:HW.clone().applyMatrix4(this.matrixWorld),index:XW,face:null,faceIndex:null,object:this})}}}else zW.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const _W=this.geometry;if(_W.isBufferGeometry){const aX=_W.morphAttributes,bX=Object.keys(aX);if(bX.length>0){const cX=aX[bX[0]];if(void 0!==cX){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let dX=0,eX=cX.length;dX<eX;dX++){const fX=cX[dX].name||String(dX);this.morphTargetInfluences.push(0),this.morphTargetDictionary[fX]=dX}}}}else{const gX=_W.morphTargets;void 0!==gX&&gX.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}oW.prototype.isLine=!0;const hX=new Xj(),iX=new Xj();class jX extends oW{constructor(kX,lX){super(kX,lX),this.type="LineSegments"}computeLineDistances(){const mX=this.geometry;if(mX.isBufferGeometry)if(null===mX.index){const nX=mX.attributes.position,oX=[];for(let pX=0,qX=nX.count;pX<qX;pX+=2)hX.fromBufferAttribute(nX,pX),iX.fromBufferAttribute(nX,pX+1),oX[pX]=0===pX?0:oX[pX-1],oX[pX+1]=oX[pX]+hX.distanceTo(iX);mX.setAttribute("lineDistance",new jC(oX,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else mX.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}jX.prototype.isLineSegments=!0,(class extends oW{constructor(rX,sX){super(rX,sX),this.type="LineLoop"}}).prototype.isLineLoop=!0;class tX extends eA{constructor(uX){super(),this.type="PointsMaterial",this.color=new ld(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(uX)}copy(vX){return super.copy(vX),this.color.copy(vX.color),this.map=vX.map,this.alphaMap=vX.alphaMap,this.size=vX.size,this.sizeAttenuation=vX.sizeAttenuation,this}}tX.prototype.isPointsMaterial=!0;const wX=new pq(),xX=new Xo(),yX=new mo(),zX=new Xj();function AX(a,b,c,d,e,f,g){const h=xX.distanceSqToPoint(a);if(h<c){const i=new Xj();xX.closestPointToPoint(a,i),i.applyMatrix4(d);const j=e.ray.origin.distanceTo(i);if(j<e.near||j>e.far)return;f.push({distance:j,distanceToRay:Math.sqrt(h),point:i,index:b,face:null,object:g})}}(class extends Aw{constructor(BX=new uC(),CX=new tX()){super(),this.type="Points",this.geometry=BX,this.material=CX,this.updateMorphTargets()}copy(DX){return super.copy(DX),this.material=DX.material,this.geometry=DX.geometry,this}raycast(EX,FX){const GX=this.geometry,HX=this.matrixWorld,IX=EX.params.Points.threshold,JX=GX.drawRange;if(null===GX.boundingSphere&&GX.computeBoundingSphere(),yX.copy(GX.boundingSphere),yX.applyMatrix4(HX),yX.radius+=IX,!1===EX.ray.intersectsSphere(yX))return;wX.copy(HX).invert(),xX.copy(EX.ray).applyMatrix4(wX);const KX=IX/((this.scale.x+this.scale.y+this.scale.z)/3),LX=KX*KX;if(GX.isBufferGeometry){const MX=GX.index,NX=GX.attributes,OX=NX.position;if(null!==MX){const PX=Math.max(0,JX.start),QX=Math.min(MX.count,JX.start+JX.count);for(let RX=PX,SX=QX;RX<SX;RX++){const TX=MX.getX(RX);zX.fromBufferAttribute(OX,TX),AX(zX,TX,LX,HX,EX,FX,this)}}else{const UX=Math.max(0,JX.start),VX=Math.min(OX.count,JX.start+JX.count);for(let WX=UX,XX=VX;WX<XX;WX++)zX.fromBufferAttribute(OX,WX),AX(zX,WX,LX,HX,EX,FX,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const YX=this.geometry;if(YX.isBufferGeometry){const ZX=YX.morphAttributes,$X=Object.keys(ZX);if($X.length>0){const _X=ZX[$X[0]];if(void 0!==_X){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let aY=0,bY=_X.length;aY<bY;aY++){const cY=_X[aY].name||String(aY);this.morphTargetInfluences.push(0),this.morphTargetDictionary[cY]=aY}}}}else{const dY=YX.morphTargets;void 0!==dY&&dY.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}).prototype.isPoints=!0,(class extends Ne{constructor(eY,fY,gY,hY,iY,jY,kY,lY,mY){super(eY,fY,gY,hY,iY,jY,kY,lY,mY),this.minFilter=void 0!==jY?jY:1006,this.magFilter=void 0!==iY?iY:1006,this.generateMipmaps=!1;const nY=this;function oY(){nY.needsUpdate=!0,eY.requestVideoFrameCallback(oY)}"requestVideoFrameCallback"in eY&&eY.requestVideoFrameCallback(oY)}clone(){return new this.constructor(this.image).copy(this)}update(){const pY=this.image;!1=="requestVideoFrameCallback"in pY&&pY.readyState>=pY.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}).prototype.isVideoTexture=!0,(class extends Ne{constructor(qY,rY,sY){super({width:qY,height:rY}),this.format=sY,this.magFilter=1003,this.minFilter=1003,this.generateMipmaps=!1,this.needsUpdate=!0}}).prototype.isFramebufferTexture=!0,(class extends Ne{constructor(tY,uY,vY,wY,xY,yY,zY,AY,BY,CY,DY,EY){super(null,yY,zY,AY,BY,CY,wY,xY,DY,EY),this.image={width:uY,height:vY},this.mipmaps=tY,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0,(class extends Ne{constructor(FY,GY,HY,IY,JY,KY,LY,MY,NY){super(FY,GY,HY,IY,JY,KY,LY,MY,NY),this.needsUpdate=!0}}).prototype.isCanvasTexture=!0;class OY extends uC{constructor(PY=1,QY=8,RY=0,SY=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:PY,segments:QY,thetaStart:RY,thetaLength:SY},QY=Math.max(3,QY);const TY=[],UY=[],VY=[],WY=[],XY=new Xj(),YY=new L();UY.push(0,0,0),VY.push(0,0,1),WY.push(0.5,0.5);for(let ZY=0,$Y=3;ZY<=QY;ZY++,$Y+=3){const _Y=RY+ZY/QY*SY;XY.x=PY*Math.cos(_Y),XY.y=PY*Math.sin(_Y),UY.push(XY.x,XY.y,XY.z),VY.push(0,0,1),YY.x=(UY[$Y]/PY+1)/2,YY.y=(UY[$Y+1]/PY+1)/2,WY.push(YY.x,YY.y)}for(let aZ=1;aZ<=QY;aZ++)TY.push(aZ,aZ+1,0);this.setIndex(TY),this.setAttribute("position",new jC(UY,3)),this.setAttribute("normal",new jC(VY,3)),this.setAttribute("uv",new jC(WY,2))}static fromJSON(bZ){return new OY(bZ.radius,bZ.segments,bZ.thetaStart,bZ.thetaLength)}}class cZ extends uC{constructor(dZ=1,eZ=1,fZ=1,gZ=8,hZ=1,iZ=!1,jZ=0,kZ=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:dZ,radiusBottom:eZ,height:fZ,radialSegments:gZ,heightSegments:hZ,openEnded:iZ,thetaStart:jZ,thetaLength:kZ};const lZ=this;gZ=Math.floor(gZ),hZ=Math.floor(hZ);const mZ=[],nZ=[],oZ=[],pZ=[];let qZ=0;const rZ=[],sZ=fZ/2;let tZ=0;function uZ(a){const b=qZ,c=new L(),d=new Xj();let e=0;const f=!0===a?dZ:eZ,g=!0===a?1:-1;for(let h=1;h<=gZ;h++)nZ.push(0,sZ*g,0),oZ.push(0,g,0),pZ.push(0.5,0.5),qZ++;const i=qZ;for(let j=0;j<=gZ;j++){const k=j/gZ,l=k*kZ+jZ,m=Math.cos(l),n=Math.sin(l);d.x=f*n,d.y=sZ*g,d.z=f*m,nZ.push(d.x,d.y,d.z),oZ.push(0,g,0),c.x=0.5*m+0.5,c.y=0.5*n*g+0.5,pZ.push(c.x,c.y),qZ++}for(let o=0;o<gZ;o++){const p=b+o,q=i+o;!0===a?mZ.push(q,q+1,p):mZ.push(q+1,q,p),e+=3}lZ.addGroup(tZ,e,!0===a?1:2),tZ+=e}(function(){const a=new Xj(),b=new Xj();let c=0;const d=(eZ-dZ)/fZ;for(let e=0;e<=hZ;e++){const f=[],g=e/hZ,h=g*(eZ-dZ)+dZ;for(let i=0;i<=gZ;i++){const j=i/gZ,k=j*kZ+jZ,l=Math.sin(k),m=Math.cos(k);b.x=h*l,b.y=-g*fZ+sZ,b.z=h*m,nZ.push(b.x,b.y,b.z),a.set(l,d,m).normalize(),oZ.push(a.x,a.y,a.z),pZ.push(j,1-g),f.push(qZ++)}rZ.push(f)}for(let n=0;n<gZ;n++)for(let o=0;o<hZ;o++){const p=rZ[o][n],q=rZ[o+1][n],r=rZ[o+1][n+1],s=rZ[o][n+1];mZ.push(p,q,s),mZ.push(q,r,s),c+=6}lZ.addGroup(tZ,c,0),tZ+=c})(),!1===iZ&&(dZ>0&&uZ(!0),eZ>0&&uZ(!1)),this.setIndex(mZ),this.setAttribute("position",new jC(nZ,3)),this.setAttribute("normal",new jC(oZ,3)),this.setAttribute("uv",new jC(pZ,2))}static fromJSON(vZ){return new cZ(vZ.radiusTop,vZ.radiusBottom,vZ.height,vZ.radialSegments,vZ.heightSegments,vZ.openEnded,vZ.thetaStart,vZ.thetaLength)}}class wZ extends cZ{constructor(xZ=1,yZ=1,zZ=8,AZ=1,BZ=!1,CZ=0,DZ=2*Math.PI){super(0,xZ,yZ,zZ,AZ,BZ,CZ,DZ),this.type="ConeGeometry",this.parameters={radius:xZ,height:yZ,radialSegments:zZ,heightSegments:AZ,openEnded:BZ,thetaStart:CZ,thetaLength:DZ}}static fromJSON(EZ){return new wZ(EZ.radius,EZ.height,EZ.radialSegments,EZ.heightSegments,EZ.openEnded,EZ.thetaStart,EZ.thetaLength)}}class FZ extends uC{constructor(GZ=[],HZ=[],IZ=1,JZ=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:GZ,indices:HZ,radius:IZ,detail:JZ};const KZ=[],LZ=[];function MZ(a,b,c,d){const e=d+1,f=[];for(let g=0;g<=e;g++){f[g]=[];const h=a.clone().lerp(c,g/e),i=b.clone().lerp(c,g/e),j=e-g;for(let k=0;k<=j;k++)0===k&&g===e?f[g][k]=h:f[g][k]=h.clone().lerp(i,k/j)}for(let l=0;l<e;l++)for(let m=0;m<2*(e-l)-1;m++){const n=Math.floor(m/2);m%2==0?(NZ(f[l][n+1]),NZ(f[l+1][n]),NZ(f[l][n])):(NZ(f[l][n+1]),NZ(f[l+1][n+1]),NZ(f[l+1][n]))}}function NZ(a){KZ.push(a.x,a.y,a.z)}function OZ(a,b){const c=3*a;b.x=GZ[c+0],b.y=GZ[c+1],b.z=GZ[c+2]}function PZ(a,b,c,d){d<0&&1===a.x&&(LZ[b]=a.x-1),0===c.x&&0===c.z&&(LZ[b]=d/2/Math.PI+0.5)}function QZ(a){return Math.atan2(a.z,-a.x)}function RZ(a){return Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))}(function(a){const b=new Xj(),c=new Xj(),d=new Xj();for(let e=0;e<HZ.length;e+=3)OZ(HZ[e+0],b),OZ(HZ[e+1],c),OZ(HZ[e+2],d),MZ(b,c,d,a)})(JZ),(function(a){const b=new Xj();for(let c=0;c<KZ.length;c+=3)b.x=KZ[c+0],b.y=KZ[c+1],b.z=KZ[c+2],b.normalize().multiplyScalar(a),KZ[c+0]=b.x,KZ[c+1]=b.y,KZ[c+2]=b.z})(IZ),(function(){const a=new Xj();for(let b=0;b<KZ.length;b+=3){a.x=KZ[b+0],a.y=KZ[b+1],a.z=KZ[b+2];const c=QZ(a)/2/Math.PI+0.5,d=RZ(a)/Math.PI+0.5;LZ.push(c,1-d)}(function(){const a=new Xj(),b=new Xj(),c=new Xj(),d=new Xj(),e=new L(),f=new L(),g=new L();for(let h=0,i=0;h<KZ.length;h+=9,i+=6){a.set(KZ[h+0],KZ[h+1],KZ[h+2]),b.set(KZ[h+3],KZ[h+4],KZ[h+5]),c.set(KZ[h+6],KZ[h+7],KZ[h+8]),e.set(LZ[i+0],LZ[i+1]),f.set(LZ[i+2],LZ[i+3]),g.set(LZ[i+4],LZ[i+5]),d.copy(a).add(b).add(c).divideScalar(3);const j=QZ(d);PZ(e,i+0,a,j),PZ(f,i+2,b,j),PZ(g,i+4,c,j)}})(),(function(){for(let a=0;a<LZ.length;a+=6){const b=LZ[a+0],c=LZ[a+2],d=LZ[a+4],e=Math.max(b,c,d),f=Math.min(b,c,d);e>0.9&&f<0.1&&(b<0.2&&(LZ[a+0]+=1),c<0.2&&(LZ[a+2]+=1),d<0.2&&(LZ[a+4]+=1))}})()})(),this.setAttribute("position",new jC(KZ,3)),this.setAttribute("normal",new jC(KZ.slice(),3)),this.setAttribute("uv",new jC(LZ,2)),0===JZ?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(SZ){return new FZ(SZ.vertices,SZ.indices,SZ.radius,SZ.details)}}class TZ extends FZ{constructor(UZ=1,VZ=0){const WZ=(1+Math.sqrt(5))/2,XZ=1/WZ;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-XZ,-WZ,0,-XZ,WZ,0,XZ,-WZ,0,XZ,WZ,-XZ,-WZ,0,-XZ,WZ,0,XZ,-WZ,0,XZ,WZ,0,-WZ,0,-XZ,WZ,0,-XZ,-WZ,0,XZ,WZ,0,XZ],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],UZ,VZ),this.type="DodecahedronGeometry",this.parameters={radius:UZ,detail:VZ}}static fromJSON(YZ){return new TZ(YZ.radius,YZ.detail)}}const ZZ=new Xj(),$Z=new Xj(),_Z=new Xj(),a$=new Dy();class b${constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(c$,d$){const e$=this.getUtoTmapping(c$);return this.getPoint(e$,d$)}getPoints(f$=5){const g$=[];for(let h$=0;h$<=f$;h$++)g$.push(this.getPoint(h$/f$));return g$}getSpacedPoints(i$=5){const j$=[];for(let k$=0;k$<=i$;k$++)j$.push(this.getPointAt(k$/i$));return j$}getLength(){const l$=this.getLengths();return l$[l$.length-1]}getLengths(m$=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===m$+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const n$=[];let o$,p$=this.getPoint(0),q$=0;n$.push(0);for(let r$=1;r$<=m$;r$++)q$+=(o$=this.getPoint(r$/m$)).distanceTo(p$),n$.push(q$),p$=o$;return this.cacheArcLengths=n$,n$}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(s$,t$){const u$=this.getLengths();let v$=0;const w$=u$.length;let x$;x$=t$||s$*u$[w$-1];let y$=0,z$=w$-1,A$;for(;y$<=z$;)if((A$=u$[v$=Math.floor(y$+(z$-y$)/2)]-x$)<0)y$=v$+1;else if(A$>0)z$=v$-1;else{z$=v$;break}if(u$[v$=z$]===x$)return v$/(w$-1);const B$=u$[v$],C$=u$[v$+1];return(v$+(x$-B$)/(C$-B$))/(w$-1)}getTangent(D$,E$){const F$=0.0001;let G$=D$-F$,H$=D$+F$;G$<0&&(G$=0),H$>1&&(H$=1);const I$=this.getPoint(G$),J$=this.getPoint(H$),K$=E$||(I$.isVector2?new L():new Xj());return K$.copy(J$).sub(I$).normalize(),K$}getTangentAt(L$,M$){const N$=this.getUtoTmapping(L$);return this.getTangent(N$,M$)}computeFrenetFrames(O$,P$){const Q$=new Xj(),R$=[],S$=[],T$=[],U$=new Xj(),V$=new pq();for(let W$=0;W$<=O$;W$++){const X$=W$/O$;R$[W$]=this.getTangentAt(X$,new Xj())}S$[0]=new Xj(),T$[0]=new Xj();let Y$=Number.MAX_VALUE;const Z$=Math.abs(R$[0].x),$$=Math.abs(R$[0].y),_$=Math.abs(R$[0].z);Z$<=Y$&&(Y$=Z$,Q$.set(1,0,0)),$$<=Y$&&(Y$=$$,Q$.set(0,1,0)),_$<=Y$&&Q$.set(0,0,1),U$.crossVectors(R$[0],Q$).normalize(),S$[0].crossVectors(R$[0],U$),T$[0].crossVectors(R$[0],S$[0]);for(let a_=1;a_<=O$;a_++){if(S$[a_]=S$[a_-1].clone(),T$[a_]=T$[a_-1].clone(),U$.crossVectors(R$[a_-1],R$[a_]),U$.length()>Number.EPSILON){U$.normalize();const b_=Math.acos(F(R$[a_-1].dot(R$[a_]),-1,1));S$[a_].applyMatrix4(V$.makeRotationAxis(U$,b_))}T$[a_].crossVectors(R$[a_],S$[a_])}if(!0===P$){let c_=Math.acos(F(S$[0].dot(S$[O$]),-1,1));c_/=O$,R$[0].dot(U$.crossVectors(S$[0],S$[O$]))>0&&(c_=-c_);for(let d_=1;d_<=O$;d_++)S$[d_].applyMatrix4(V$.makeRotationAxis(R$[d_],c_*d_)),T$[d_].crossVectors(R$[d_],S$[d_])}return{tangents:R$,normals:S$,binormals:T$}}clone(){return new this.constructor().copy(this)}copy(e_){return this.arcLengthDivisions=e_.arcLengthDivisions,this}toJSON(){const f_={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return f_.arcLengthDivisions=this.arcLengthDivisions,f_.type=this.type,f_}fromJSON(g_){return this.arcLengthDivisions=g_.arcLengthDivisions,this}}class h_ extends b${constructor(i_=0,j_=0,k_=1,l_=1,m_=0,n_=2*Math.PI,o_=!1,p_=0){super(),this.type="EllipseCurve",this.aX=i_,this.aY=j_,this.xRadius=k_,this.yRadius=l_,this.aStartAngle=m_,this.aEndAngle=n_,this.aClockwise=o_,this.aRotation=p_}getPoint(q_,r_){const s_=r_||new L(),t_=2*Math.PI;let u_=this.aEndAngle-this.aStartAngle;const v_=Math.abs(u_)<Number.EPSILON;for(;u_<0;)u_+=t_;for(;u_>t_;)u_-=t_;u_<Number.EPSILON&&(u_=v_?0:t_),!0!==this.aClockwise||v_||(u_===t_?u_=-t_:u_-=t_);const w_=this.aStartAngle+q_*u_;let x_=this.aX+this.xRadius*Math.cos(w_),y_=this.aY+this.yRadius*Math.sin(w_);if(0!==this.aRotation){const z_=Math.cos(this.aRotation),A_=Math.sin(this.aRotation),B_=x_-this.aX,C_=y_-this.aY;x_=B_*z_-C_*A_+this.aX,y_=B_*A_+C_*z_+this.aY}return s_.set(x_,y_)}copy(D_){return super.copy(D_),this.aX=D_.aX,this.aY=D_.aY,this.xRadius=D_.xRadius,this.yRadius=D_.yRadius,this.aStartAngle=D_.aStartAngle,this.aEndAngle=D_.aEndAngle,this.aClockwise=D_.aClockwise,this.aRotation=D_.aRotation,this}toJSON(){const E_=super.toJSON();return E_.aX=this.aX,E_.aY=this.aY,E_.xRadius=this.xRadius,E_.yRadius=this.yRadius,E_.aStartAngle=this.aStartAngle,E_.aEndAngle=this.aEndAngle,E_.aClockwise=this.aClockwise,E_.aRotation=this.aRotation,E_}fromJSON(F_){return super.fromJSON(F_),this.aX=F_.aX,this.aY=F_.aY,this.xRadius=F_.xRadius,this.yRadius=F_.yRadius,this.aStartAngle=F_.aStartAngle,this.aEndAngle=F_.aEndAngle,this.aClockwise=F_.aClockwise,this.aRotation=F_.aRotation,this}}h_.prototype.isEllipseCurve=!0;class G_ extends h_{constructor(H_,I_,J_,K_,L_,M_){super(H_,I_,J_,J_,K_,L_,M_),this.type="ArcCurve"}}function N_(){let a=0,b=0,c=0,d=0;function e(e,f,g,h){a=e,b=g,c=-3*e+3*f-2*g-h,d=2*e-2*f+g+h}return{initCatmullRom:function(a,b,c,d,f){e(b,c,f*(c-a),f*(d-b))},initNonuniformCatmullRom:function(a,b,c,d,f,g,h){let i=(b-a)/f-(c-a)/(f+g)+(c-b)/g,j=(c-b)/g-(d-b)/(g+h)+(d-c)/h;i*=g,j*=g,e(b,c,i,j)},calc:function(e){const f=e*e;return a+b*e+c*f+d*(f*e)}}}G_.prototype.isArcCurve=!0;const O_=new Xj(),P_=new N_(),Q_=new N_(),R_=new N_();class S_ extends b${constructor(T_=[],U_=!1,V_="centripetal",W_=0.5){super(),this.type="CatmullRomCurve3",this.points=T_,this.closed=U_,this.curveType=V_,this.tension=W_}getPoint(X_,Y_=new Xj()){const Z_=Y_,$_=this.points,__=$_.length,a0=(__-(this.closed?0:1))*X_;let b0=Math.floor(a0),c0=a0-b0;this.closed?b0+=b0>0?0:(Math.floor(Math.abs(b0)/__)+1)*__:0===c0&&b0===__-1&&(b0=__-2,c0=1);let d0,e0;this.closed||b0>0?d0=$_[(b0-1)%__]:(O_.subVectors($_[0],$_[1]).add($_[0]),d0=O_);const f0=$_[b0%__],g0=$_[(b0+1)%__];if(this.closed||b0+2<__?e0=$_[(b0+2)%__]:(O_.subVectors($_[__-1],$_[__-2]).add($_[__-1]),e0=O_),"centripetal"===this.curveType||"chordal"===this.curveType){const h0="chordal"===this.curveType?0.5:0.25;let i0=Math.pow(d0.distanceToSquared(f0),h0),j0=Math.pow(f0.distanceToSquared(g0),h0),k0=Math.pow(g0.distanceToSquared(e0),h0);j0<0.0001&&(j0=1),i0<0.0001&&(i0=j0),k0<0.0001&&(k0=j0),P_.initNonuniformCatmullRom(d0.x,f0.x,g0.x,e0.x,i0,j0,k0),Q_.initNonuniformCatmullRom(d0.y,f0.y,g0.y,e0.y,i0,j0,k0),R_.initNonuniformCatmullRom(d0.z,f0.z,g0.z,e0.z,i0,j0,k0)}else"catmullrom"===this.curveType&&(P_.initCatmullRom(d0.x,f0.x,g0.x,e0.x,this.tension),Q_.initCatmullRom(d0.y,f0.y,g0.y,e0.y,this.tension),R_.initCatmullRom(d0.z,f0.z,g0.z,e0.z,this.tension));return Z_.set(P_.calc(c0),Q_.calc(c0),R_.calc(c0)),Z_}copy(l0){super.copy(l0),this.points=[];for(let m0=0,n0=l0.points.length;m0<n0;m0++){const o0=l0.points[m0];this.points.push(o0.clone())}return this.closed=l0.closed,this.curveType=l0.curveType,this.tension=l0.tension,this}toJSON(){const p0=super.toJSON();p0.points=[];for(let q0=0,r0=this.points.length;q0<r0;q0++){const s0=this.points[q0];p0.points.push(s0.toArray())}return p0.closed=this.closed,p0.curveType=this.curveType,p0.tension=this.tension,p0}fromJSON(t0){super.fromJSON(t0),this.points=[];for(let u0=0,v0=t0.points.length;u0<v0;u0++){const w0=t0.points[u0];this.points.push(new Xj().fromArray(w0))}return this.closed=t0.closed,this.curveType=t0.curveType,this.tension=t0.tension,this}}function x0(a,b,c,d,e){const f=(d-b)*0.5,g=(e-c)*0.5,h=a*a;return(2*c-2*d+f+g)*(a*h)+(-3*c+3*d-2*f-g)*h+f*a+c}function y0(a,b,c,d){var e,f;return(function(a,b){const c=1-a;return c*c*b})(a,b)+2*(1-(e=a))*e*c+(f=a)*f*d}function z0(a,b,c,d,e){var f,g;return(function(a,b){const c=1-a;return c*c*c*b})(a,b)+(function(a,b){const c=1-a;return 3*c*c*a*b})(a,c)+3*(1-(f=a))*f*f*d+(g=a)*g*g*e}S_.prototype.isCatmullRomCurve3=!0;class A0 extends b${constructor(B0=new L(),C0=new L(),D0=new L(),E0=new L()){super(),this.type="CubicBezierCurve",this.v0=B0,this.v1=C0,this.v2=D0,this.v3=E0}getPoint(F0,G0=new L()){const H0=G0,I0=this.v0,J0=this.v1,K0=this.v2,L0=this.v3;return H0.set(z0(F0,I0.x,J0.x,K0.x,L0.x),z0(F0,I0.y,J0.y,K0.y,L0.y)),H0}copy(M0){return super.copy(M0),this.v0.copy(M0.v0),this.v1.copy(M0.v1),this.v2.copy(M0.v2),this.v3.copy(M0.v3),this}toJSON(){const N0=super.toJSON();return N0.v0=this.v0.toArray(),N0.v1=this.v1.toArray(),N0.v2=this.v2.toArray(),N0.v3=this.v3.toArray(),N0}fromJSON(O0){return super.fromJSON(O0),this.v0.fromArray(O0.v0),this.v1.fromArray(O0.v1),this.v2.fromArray(O0.v2),this.v3.fromArray(O0.v3),this}}A0.prototype.isCubicBezierCurve=!0;class P0 extends b${constructor(Q0=new Xj(),R0=new Xj(),S0=new Xj(),T0=new Xj()){super(),this.type="CubicBezierCurve3",this.v0=Q0,this.v1=R0,this.v2=S0,this.v3=T0}getPoint(U0,V0=new Xj()){const W0=V0,X0=this.v0,Y0=this.v1,Z0=this.v2,$0=this.v3;return W0.set(z0(U0,X0.x,Y0.x,Z0.x,$0.x),z0(U0,X0.y,Y0.y,Z0.y,$0.y),z0(U0,X0.z,Y0.z,Z0.z,$0.z)),W0}copy(_0){return super.copy(_0),this.v0.copy(_0.v0),this.v1.copy(_0.v1),this.v2.copy(_0.v2),this.v3.copy(_0.v3),this}toJSON(){const a1=super.toJSON();return a1.v0=this.v0.toArray(),a1.v1=this.v1.toArray(),a1.v2=this.v2.toArray(),a1.v3=this.v3.toArray(),a1}fromJSON(b1){return super.fromJSON(b1),this.v0.fromArray(b1.v0),this.v1.fromArray(b1.v1),this.v2.fromArray(b1.v2),this.v3.fromArray(b1.v3),this}}P0.prototype.isCubicBezierCurve3=!0;class c1 extends b${constructor(d1=new L(),e1=new L()){super(),this.type="LineCurve",this.v1=d1,this.v2=e1}getPoint(f1,g1=new L()){const h1=g1;return 1===f1?h1.copy(this.v2):(h1.copy(this.v2).sub(this.v1),h1.multiplyScalar(f1).add(this.v1)),h1}getPointAt(i1,j1){return this.getPoint(i1,j1)}getTangent(k1,l1){const m1=l1||new L();return m1.copy(this.v2).sub(this.v1).normalize(),m1}copy(n1){return super.copy(n1),this.v1.copy(n1.v1),this.v2.copy(n1.v2),this}toJSON(){const o1=super.toJSON();return o1.v1=this.v1.toArray(),o1.v2=this.v2.toArray(),o1}fromJSON(p1){return super.fromJSON(p1),this.v1.fromArray(p1.v1),this.v2.fromArray(p1.v2),this}}c1.prototype.isLineCurve=!0;class q1 extends b${constructor(r1=new L(),s1=new L(),t1=new L()){super(),this.type="QuadraticBezierCurve",this.v0=r1,this.v1=s1,this.v2=t1}getPoint(u1,v1=new L()){const w1=v1,x1=this.v0,y1=this.v1,z1=this.v2;return w1.set(y0(u1,x1.x,y1.x,z1.x),y0(u1,x1.y,y1.y,z1.y)),w1}copy(A1){return super.copy(A1),this.v0.copy(A1.v0),this.v1.copy(A1.v1),this.v2.copy(A1.v2),this}toJSON(){const B1=super.toJSON();return B1.v0=this.v0.toArray(),B1.v1=this.v1.toArray(),B1.v2=this.v2.toArray(),B1}fromJSON(C1){return super.fromJSON(C1),this.v0.fromArray(C1.v0),this.v1.fromArray(C1.v1),this.v2.fromArray(C1.v2),this}}q1.prototype.isQuadraticBezierCurve=!0;class D1 extends b${constructor(E1=new Xj(),F1=new Xj(),G1=new Xj()){super(),this.type="QuadraticBezierCurve3",this.v0=E1,this.v1=F1,this.v2=G1}getPoint(H1,I1=new Xj()){const J1=I1,K1=this.v0,L1=this.v1,M1=this.v2;return J1.set(y0(H1,K1.x,L1.x,M1.x),y0(H1,K1.y,L1.y,M1.y),y0(H1,K1.z,L1.z,M1.z)),J1}copy(N1){return super.copy(N1),this.v0.copy(N1.v0),this.v1.copy(N1.v1),this.v2.copy(N1.v2),this}toJSON(){const O1=super.toJSON();return O1.v0=this.v0.toArray(),O1.v1=this.v1.toArray(),O1.v2=this.v2.toArray(),O1}fromJSON(P1){return super.fromJSON(P1),this.v0.fromArray(P1.v0),this.v1.fromArray(P1.v1),this.v2.fromArray(P1.v2),this}}D1.prototype.isQuadraticBezierCurve3=!0;class Q1 extends b${constructor(R1=[]){super(),this.type="SplineCurve",this.points=R1}getPoint(S1,T1=new L()){const U1=T1,V1=this.points,W1=(V1.length-1)*S1,X1=Math.floor(W1),Y1=W1-X1,Z1=V1[0===X1?X1:X1-1],$1=V1[X1],_1=V1[X1>V1.length-2?V1.length-1:X1+1],a2=V1[X1>V1.length-3?V1.length-1:X1+2];return U1.set(x0(Y1,Z1.x,$1.x,_1.x,a2.x),x0(Y1,Z1.y,$1.y,_1.y,a2.y)),U1}copy(b2){super.copy(b2),this.points=[];for(let c2=0,d2=b2.points.length;c2<d2;c2++){const e2=b2.points[c2];this.points.push(e2.clone())}return this}toJSON(){const f2=super.toJSON();f2.points=[];for(let g2=0,h2=this.points.length;g2<h2;g2++){const i2=this.points[g2];f2.points.push(i2.toArray())}return f2}fromJSON(j2){super.fromJSON(j2),this.points=[];for(let k2=0,l2=j2.points.length;k2<l2;k2++){const m2=j2.points[k2];this.points.push(new L().fromArray(m2))}return this}}Q1.prototype.isSplineCurve=!0;var n2=Object.freeze({__proto__:null,ArcCurve:G_,CatmullRomCurve3:S_,CubicBezierCurve:A0,CubicBezierCurve3:P0,EllipseCurve:h_,LineCurve:c1,LineCurve3:class extends b${constructor(o2=new Xj(),p2=new Xj()){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=o2,this.v2=p2}getPoint(q2,r2=new Xj()){const s2=r2;return 1===q2?s2.copy(this.v2):(s2.copy(this.v2).sub(this.v1),s2.multiplyScalar(q2).add(this.v1)),s2}getPointAt(t2,u2){return this.getPoint(t2,u2)}copy(v2){return super.copy(v2),this.v1.copy(v2.v1),this.v2.copy(v2.v2),this}toJSON(){const w2=super.toJSON();return w2.v1=this.v1.toArray(),w2.v2=this.v2.toArray(),w2}fromJSON(x2){return super.fromJSON(x2),this.v1.fromArray(x2.v1),this.v2.fromArray(x2.v2),this}},QuadraticBezierCurve:q1,QuadraticBezierCurve3:D1,SplineCurve:Q1});class y2 extends b${constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(z2){this.curves.push(z2)}closePath(){const A2=this.curves[0].getPoint(0),B2=this.curves[this.curves.length-1].getPoint(1);A2.equals(B2)||this.curves.push(new c1(B2,A2))}getPoint(C2,D2){const E2=C2*this.getLength(),F2=this.getCurveLengths();let G2=0;for(;G2<F2.length;){if(F2[G2]>=E2){const H2=F2[G2]-E2,I2=this.curves[G2],J2=I2.getLength(),K2=0===J2?0:1-H2/J2;return I2.getPointAt(K2,D2)}G2++}return null}getLength(){const L2=this.getCurveLengths();return L2[L2.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const M2=[];let N2=0;for(let O2=0,P2=this.curves.length;O2<P2;O2++)N2+=this.curves[O2].getLength(),M2.push(N2);return this.cacheLengths=M2,M2}getSpacedPoints(Q2=40){const R2=[];for(let S2=0;S2<=Q2;S2++)R2.push(this.getPoint(S2/Q2));return this.autoClose&&R2.push(R2[0]),R2}getPoints(T2=12){const U2=[];let V2;for(let W2=0,X2=this.curves;W2<X2.length;W2++){const Y2=X2[W2],Z2=Y2&&Y2.isEllipseCurve?2*T2:Y2&&(Y2.isLineCurve||Y2.isLineCurve3)?1:Y2&&Y2.isSplineCurve?T2*Y2.points.length:T2,$2=Y2.getPoints(Z2);for(let _2=0;_2<$2.length;_2++){const a3=$2[_2];V2&&V2.equals(a3)||(U2.push(a3),V2=a3)}}return this.autoClose&&U2.length>1&&!U2[U2.length-1].equals(U2[0])&&U2.push(U2[0]),U2}copy(b3){super.copy(b3),this.curves=[];for(let c3=0,d3=b3.curves.length;c3<d3;c3++){const e3=b3.curves[c3];this.curves.push(e3.clone())}return this.autoClose=b3.autoClose,this}toJSON(){const f3=super.toJSON();f3.autoClose=this.autoClose,f3.curves=[];for(let g3=0,h3=this.curves.length;g3<h3;g3++){const i3=this.curves[g3];f3.curves.push(i3.toJSON())}return f3}fromJSON(j3){super.fromJSON(j3),this.autoClose=j3.autoClose,this.curves=[];for(let k3=0,l3=j3.curves.length;k3<l3;k3++){const m3=j3.curves[k3];this.curves.push(new n2[m3.type]().fromJSON(m3))}return this}}class n3 extends y2{constructor(o3){super(),this.type="Path",this.currentPoint=new L(),o3&&this.setFromPoints(o3)}setFromPoints(p3){this.moveTo(p3[0].x,p3[0].y);for(let q3=1,r3=p3.length;q3<r3;q3++)this.lineTo(p3[q3].x,p3[q3].y);return this}moveTo(s3,t3){return this.currentPoint.set(s3,t3),this}lineTo(u3,v3){const w3=new c1(this.currentPoint.clone(),new L(u3,v3));return this.curves.push(w3),this.currentPoint.set(u3,v3),this}quadraticCurveTo(x3,y3,z3,A3){const B3=new q1(this.currentPoint.clone(),new L(x3,y3),new L(z3,A3));return this.curves.push(B3),this.currentPoint.set(z3,A3),this}bezierCurveTo(C3,D3,E3,F3,G3,H3){const I3=new A0(this.currentPoint.clone(),new L(C3,D3),new L(E3,F3),new L(G3,H3));return this.curves.push(I3),this.currentPoint.set(G3,H3),this}splineThru(J3){const K3=[this.currentPoint.clone()].concat(J3),L3=new Q1(K3);return this.curves.push(L3),this.currentPoint.copy(J3[J3.length-1]),this}arc(M3,N3,O3,P3,Q3,R3){const S3=this.currentPoint.x,T3=this.currentPoint.y;return this.absarc(M3+S3,N3+T3,O3,P3,Q3,R3),this}absarc(U3,V3,W3,X3,Y3,Z3){return this.absellipse(U3,V3,W3,W3,X3,Y3,Z3),this}ellipse($3,_3,a4,b4,c4,d4,e4,f4){const g4=this.currentPoint.x,h4=this.currentPoint.y;return this.absellipse($3+g4,_3+h4,a4,b4,c4,d4,e4,f4),this}absellipse(i4,j4,k4,l4,m4,n4,o4,p4){const q4=new h_(i4,j4,k4,l4,m4,n4,o4,p4);if(this.curves.length>0){const r4=q4.getPoint(0);r4.equals(this.currentPoint)||this.lineTo(r4.x,r4.y)}this.curves.push(q4);const s4=q4.getPoint(1);return this.currentPoint.copy(s4),this}copy(t4){return super.copy(t4),this.currentPoint.copy(t4.currentPoint),this}toJSON(){const u4=super.toJSON();return u4.currentPoint=this.currentPoint.toArray(),u4}fromJSON(v4){return super.fromJSON(v4),this.currentPoint.fromArray(v4.currentPoint),this}}class w4 extends n3{constructor(x4){super(x4),this.uuid=E(),this.type="Shape",this.holes=[]}getPointsHoles(y4){const z4=[];for(let A4=0,B4=this.holes.length;A4<B4;A4++)z4[A4]=this.holes[A4].getPoints(y4);return z4}extractPoints(C4){return{shape:this.getPoints(C4),holes:this.getPointsHoles(C4)}}copy(D4){super.copy(D4),this.holes=[];for(let E4=0,F4=D4.holes.length;E4<F4;E4++){const G4=D4.holes[E4];this.holes.push(G4.clone())}return this}toJSON(){const H4=super.toJSON();H4.uuid=this.uuid,H4.holes=[];for(let I4=0,J4=this.holes.length;I4<J4;I4++){const K4=this.holes[I4];H4.holes.push(K4.toJSON())}return H4}fromJSON(L4){super.fromJSON(L4),this.uuid=L4.uuid,this.holes=[];for(let M4=0,N4=L4.holes.length;M4<N4;M4++){const O4=L4.holes[M4];this.holes.push(new n3().fromJSON(O4))}return this}}const P4={triangulate:function(a,b,c=2){const d=b&&b.length,e=d?b[0]*c:a.length;let f=Q4(a,0,e,c,!0);const g=[];if(!f||f.next===f.prev)return g;let h,i,j,k,l,m,n;if(d&&(f=X4(a,b,f,c)),a.length>80*c){h=j=a[0],i=k=a[1];for(let o=c;o<e;o+=c)l=a[o],m=a[o+1],l<h&&(h=l),m<i&&(i=m),l>j&&(j=l),m>k&&(k=m);n=0!==(n=Math.max(j-h,k-i))?1/n:0}return S4(f,g,c,h,i,n),g}};function Q4(a,b,c,d,e){let f,g;if(e===s5(a,b,c,d)>0)for(f=b;f<c;f+=d)g=p5(f,a[f],a[f+1],g);else for(f=c-d;f>=b;f-=d)g=p5(f,a[f],a[f+1],g);return g&&h5(g,g.next)&&(q5(g),g=g.next),g}function R4(a,b){if(!a)return a;b||(b=a);let c=a,d;do if(d=!1,!c.steiner&&(h5(c,c.next)||0===g5(c.prev,c,c.next))){if(q5(c),(c=b=c.prev)===c.next)break;d=!0}else c=c.next;while(d||c!==b)return b}function S4(a,b,c,d,e,f,g){if(!a)return;!g&&f&&a5(a,d,e,f);let h=a,i,j;for(;a.prev!==a.next;){if(i=a.prev,j=a.next,f?U4(a,d,e,f):T4(a)){b.push(i.i/c),b.push(a.i/c),b.push(j.i/c),q5(a),a=j.next,h=j.next;continue}if((a=j)===h){g?1===g?S4(a=V4(R4(a),b,c),b,c,d,e,f,2):2===g&&W4(a,b,c,d,e,f):S4(R4(a),b,c,d,e,f,1);break}}}function T4(a){const b=a.prev,c=a,d=a.next;if(g5(b,c,d)>=0)return!1;let e=a.next.next;for(;e!==a.prev;){if(e5(b.x,b.y,c.x,c.y,d.x,d.y,e.x,e.y)&&g5(e.prev,e,e.next)>=0)return!1;e=e.next}return!0}function U4(a,b,c,d){const e=a.prev,f=a,g=a.next;if(g5(e,f,g)>=0)return!1;const h=e.x<f.x?e.x<g.x?e.x:g.x:f.x<g.x?f.x:g.x,i=e.y<f.y?e.y<g.y?e.y:g.y:f.y<g.y?f.y:g.y,j=e.x>f.x?e.x>g.x?e.x:g.x:f.x>g.x?f.x:g.x,k=e.y>f.y?e.y>g.y?e.y:g.y:f.y>g.y?f.y:g.y,l=c5(h,i,b,c,d),m=c5(j,k,b,c,d);let n=a.prevZ,o=a.nextZ;for(;n&&n.z>=l&&o&&o.z<=m;){if(n!==a.prev&&n!==a.next&&e5(e.x,e.y,f.x,f.y,g.x,g.y,n.x,n.y)&&g5(n.prev,n,n.next)>=0)return!1;if(n=n.prevZ,o!==a.prev&&o!==a.next&&e5(e.x,e.y,f.x,f.y,g.x,g.y,o.x,o.y)&&g5(o.prev,o,o.next)>=0)return!1;o=o.nextZ}for(;n&&n.z>=l;){if(n!==a.prev&&n!==a.next&&e5(e.x,e.y,f.x,f.y,g.x,g.y,n.x,n.y)&&g5(n.prev,n,n.next)>=0)return!1;n=n.prevZ}for(;o&&o.z<=m;){if(o!==a.prev&&o!==a.next&&e5(e.x,e.y,f.x,f.y,g.x,g.y,o.x,o.y)&&g5(o.prev,o,o.next)>=0)return!1;o=o.nextZ}return!0}function V4(a,b,c){let d=a;do{const e=d.prev,f=d.next.next;!h5(e,f)&&i5(e,d,d.next,f)&&m5(e,f)&&m5(f,e)&&(b.push(e.i/c),b.push(d.i/c),b.push(f.i/c),q5(d),q5(d.next),d=a=f),d=d.next}while(d!==a)return R4(d)}function W4(a,b,c,d,e,f){let g=a;do{let h=g.next.next;for(;h!==g.prev;){if(g.i!==h.i&&f5(g,h)){let i=o5(g,h);g=R4(g,g.next),i=R4(i,i.next),S4(g,b,c,d,e,f),S4(i,b,c,d,e,f);return}h=h.next}g=g.next}while(g!==a)}function X4(a,b,c,d){const e=[];let f,g,h,i,j;for(f=0,g=b.length;f<g;f++)h=b[f]*d,i=f<g-1?b[f+1]*d:a.length,j=Q4(a,h,i,d,!1),j===j.next&&(j.steiner=!0),e.push(d5(j));for(e.sort(Y4),f=0;f<e.length;f++)Z4(e[f],c),c=R4(c,c.next);return c}function Y4(a,b){return a.x-b.x}function Z4(a,b){if(b=$4(a,b)){const c=o5(b,a);R4(b,b.next),R4(c,c.next)}}function $4(a,b){let c=b;const d=a.x,e=a.y;let f=-1/0,g;do{if(e<=c.y&&e>=c.next.y&&c.next.y!==c.y){const h=c.x+(e-c.y)*(c.next.x-c.x)/(c.next.y-c.y);if(h<=d&&h>f){if(f=h,h===d){if(e===c.y)return c;if(e===c.next.y)return c.next}g=c.x<c.next.x?c:c.next}}c=c.next}while(c!==b)if(!g)return null;if(d===f)return g;const i=g,j=g.x,k=g.y;let l=1/0,m;c=g;do d>=c.x&&c.x>=j&&d!==c.x&&e5(e<k?d:f,e,j,k,e<k?f:d,e,c.x,c.y)&&(m=Math.abs(e-c.y)/(d-c.x),m5(c,a)&&(m<l||m===l&&(c.x>g.x||c.x===g.x&&_4(g,c)))&&(g=c,l=m)),c=c.next;while(c!==i)return g}function _4(a,b){return 0>g5(a.prev,a,b.prev)&&0>g5(b.next,a,a.next)}function a5(a,b,c,d){let e=a;do null===e.z&&(e.z=c5(e.x,e.y,b,c,d)),e.prevZ=e.prev,e.nextZ=e.next,e=e.next;while(e!==a)e.prevZ.nextZ=null,e.prevZ=null,b5(e)}function b5(a){let b,c,d,e,f,g,h,i,j=1;do{for(c=a,a=null,f=null,g=0;c;){for(g++,d=c,h=0,b=0;b<j&&(h++,d=d.nextZ);b++);for(i=j;h>0||i>0&&d;)0!==h&&(0===i||!d||c.z<=d.z)?(e=c,c=c.nextZ,h--):(e=d,d=d.nextZ,i--),f?f.nextZ=e:a=e,e.prevZ=f,f=e;c=d}f.nextZ=null,j*=2}while(g>1)return a}function c5(a,b,c,d,e){return a=32767*(a-c)*e,b=32767*(b-d)*e,a=(a|a<<8)&16711935,a=(a|a<<4)&252645135,a=(a|a<<2)&858993459,a=(a|a<<1)&1431655765,b=(b|b<<8)&16711935,b=(b|b<<4)&252645135,b=(b|b<<2)&858993459,b=(b|b<<1)&1431655765,a|b<<1}function d5(a){let b=a,c=a;do(b.x<c.x||b.x===c.x&&b.y<c.y)&&(c=b),b=b.next;while(b!==a)return c}function e5(a,b,c,d,e,f,g,h){return(e-g)*(b-h)-(a-g)*(f-h)>=0&&(a-g)*(d-h)-(c-g)*(b-h)>=0&&(c-g)*(f-h)-(e-g)*(d-h)>=0}function f5(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!l5(a,b)&&(m5(a,b)&&m5(b,a)&&n5(a,b)&&(g5(a.prev,a,b.prev)||g5(a,b.prev,b))||h5(a,b)&&g5(a.prev,a,a.next)>0&&g5(b.prev,b,b.next)>0)}function g5(a,b,c){return(b.y-a.y)*(c.x-b.x)-(b.x-a.x)*(c.y-b.y)}function h5(a,b){return a.x===b.x&&a.y===b.y}function i5(a,b,c,d){const e=k5(g5(a,b,c)),f=k5(g5(a,b,d)),g=k5(g5(c,d,a)),h=k5(g5(c,d,b));return e!==f&&g!==h|| !!(0===e&&j5(a,c,b))|| !!(0===f&&j5(a,d,b))|| !!(0===g&&j5(c,a,d))||!!(0===h&&j5(c,b,d))}function j5(a,b,c){return b.x<=Math.max(a.x,c.x)&&b.x>=Math.min(a.x,c.x)&&b.y<=Math.max(a.y,c.y)&&b.y>=Math.min(a.y,c.y)}function k5(a){return a>0?1:a<0?-1:0}function l5(a,b){let c=a;do{if(c.i!==a.i&&c.next.i!==a.i&&c.i!==b.i&&c.next.i!==b.i&&i5(c,c.next,a,b))return!0;c=c.next}while(c!==a)return!1}function m5(a,b){return 0>g5(a.prev,a,a.next)?g5(a,b,a.next)>=0&&g5(a,a.prev,b)>=0:0>g5(a,b,a.prev)||0>g5(a,a.next,b)}function n5(a,b){let c=a,d=!1;const e=(a.x+b.x)/2,f=(a.y+b.y)/2;do c.y>f!=c.next.y>f&&c.next.y!==c.y&&e<(c.next.x-c.x)*(f-c.y)/(c.next.y-c.y)+c.x&&(d=!d),c=c.next;while(c!==a)return d}function o5(a,b){const c=new r5(a.i,a.x,a.y),d=new r5(b.i,b.x,b.y),e=a.next,f=b.prev;return a.next=b,b.prev=a,c.next=e,e.prev=c,d.next=c,c.prev=d,f.next=d,d.prev=f,d}function p5(a,b,c,d){const e=new r5(a,b,c);return d?(e.next=d.next,e.prev=d,d.next.prev=e,d.next=e):(e.prev=e,e.next=e),e}function q5(a){a.next.prev=a.prev,a.prev.next=a.next,a.prevZ&&(a.prevZ.nextZ=a.nextZ),a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function r5(a,b,c){this.i=a,this.x=b,this.y=c,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function s5(a,b,c,d){let e=0;for(let f=b,g=c-d;f<c;f+=d)e+=(a[g]-a[f])*(a[f+1]+a[g+1]),g=f;return e}class t5{static area(u5){const v5=u5.length;let w5=0;for(let x5=v5-1,y5=0;y5<v5;x5=y5++)w5+=u5[x5].x*u5[y5].y-u5[y5].x*u5[x5].y;return 0.5*w5}static isClockWise(z5){return 0>t5.area(z5)}static triangulateShape(A5,B5){const C5=[],D5=[],E5=[];J5(A5),K5(C5,A5);let F5=A5.length;B5.forEach(J5);for(let G5=0;G5<B5.length;G5++)D5.push(F5),F5+=B5[G5].length,K5(C5,B5[G5]);const H5=P4.triangulate(C5,D5);for(let I5=0;I5<H5.length;I5+=3)E5.push(H5.slice(I5,I5+3));return E5}}function J5(a){const b=a.length;b>2&&a[b-1].equals(a[0])&&a.pop()}function K5(a,b){for(let c=0;c<b.length;c++)a.push(b[c].x),a.push(b[c].y)}class L5 extends uC{constructor(M5=new w4([new L(0.5,0.5),new L(-0.5,0.5),new L(-0.5,-0.5),new L(0.5,-0.5)]),N5={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:M5,options:N5},M5=Array.isArray(M5)?M5:[M5];const O5=this,P5=[],Q5=[];for(let R5=0,S5=M5.length;R5<S5;R5++){const T5=M5[R5];U5(T5)}function U5(a){const b=[],c=void 0!==N5.curveSegments?N5.curveSegments:12,d=void 0!==N5.steps?N5.steps:1;let e=void 0!==N5.depth?N5.depth:1,f=void 0===N5.bevelEnabled||N5.bevelEnabled,g=void 0!==N5.bevelThickness?N5.bevelThickness:0.2,h=void 0!==N5.bevelSize?N5.bevelSize:g-0.1,i=void 0!==N5.bevelOffset?N5.bevelOffset:0,j=void 0!==N5.bevelSegments?N5.bevelSegments:3;const k=N5.extrudePath,l=void 0!==N5.UVGenerator?N5.UVGenerator:d6;void 0!==N5.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),e=N5.amount);let m,n=!1,o,p,q,r;k&&(m=k.getSpacedPoints(d),n=!0,f=!1,o=k.computeFrenetFrames(d,!1),p=new Xj(),q=new Xj(),r=new Xj()),f||(j=0,g=0,h=0,i=0);const s=a.extractPoints(c);let t=s.shape;const u=s.holes,v=!t5.isClockWise(t);if(v){t=t.reverse();for(let w=0,x=u.length;w<x;w++){const y=u[w];t5.isClockWise(y)&&(u[w]=y.reverse())}}const z=t5.triangulateShape(t,u),A=t;for(let B=0,C=u.length;B<C;B++){const D=u[B];t=t.concat(D)}function E(a,b,c){return b||console.error("THREE.ExtrudeGeometry: vec does not exist"),b.clone().multiplyScalar(c).add(a)}const F=t.length,G=z.length;function H(a,b,c){let d,e,f;const g=a.x-b.x,h=a.y-b.y,i=c.x-a.x,j=c.y-a.y,k=g*g+h*h,l=g*j-h*i;if(Math.abs(l)>Number.EPSILON){const m=Math.sqrt(k),n=Math.sqrt(i*i+j*j),o=b.x-h/m,p=b.y+g/m,q=c.x-j/n,r=c.y+i/n,s=((q-o)*j-(r-p)*i)/(g*j-h*i);d=o+g*s-a.x,e=p+h*s-a.y;const t=d*d+e*e;if(t<=2)return new L(d,e);f=Math.sqrt(t/2)}else{let u=!1;g>Number.EPSILON?i>Number.EPSILON&&(u=!0):g< -Number.EPSILON?i< -Number.EPSILON&&(u=!0):Math.sign(h)===Math.sign(j)&&(u=!0),u?(d=-h,e=g,f=Math.sqrt(k)):(d=g,e=h,f=Math.sqrt(k/2))}return new L(d/f,e/f)}const I=[];for(let J=0,K=A.length,M=K-1,N=J+1;J<K;J++,M++,N++)M===K&&(M=0),N===K&&(N=0),I[J]=H(A[J],A[M],A[N]);const O=[];let P,Q=I.concat();for(let R=0,S=u.length;R<S;R++){const T=u[R];P=[];for(let U=0,V=T.length,W=V-1,X=U+1;U<V;U++,W++,X++)W===V&&(W=0),X===V&&(X=0),P[U]=H(T[U],T[W],T[X]);O.push(P),Q=Q.concat(P)}for(let Y=0;Y<j;Y++){const Z=Y/j,$=g*Math.cos(Z*Math.PI/2),_=h*Math.sin(Z*Math.PI/2)+i;for(let aa=0,ba=A.length;aa<ba;aa++){const ca=E(A[aa],I[aa],_);Da(ca.x,ca.y,-$)}for(let da=0,ea=u.length;da<ea;da++){const fa=u[da];P=O[da];for(let ga=0,ha=fa.length;ga<ha;ga++){const ia=E(fa[ga],P[ga],_);Da(ia.x,ia.y,-$)}}}const ja=h+i;for(let ka=0;ka<F;ka++){const la=f?E(t[ka],Q[ka],ja):t[ka];n?(q.copy(o.normals[0]).multiplyScalar(la.x),p.copy(o.binormals[0]).multiplyScalar(la.y),r.copy(m[0]).add(q).add(p),Da(r.x,r.y,r.z)):Da(la.x,la.y,0)}for(let ma=1;ma<=d;ma++)for(let na=0;na<F;na++){const oa=f?E(t[na],Q[na],ja):t[na];n?(q.copy(o.normals[ma]).multiplyScalar(oa.x),p.copy(o.binormals[ma]).multiplyScalar(oa.y),r.copy(m[ma]).add(q).add(p),Da(r.x,r.y,r.z)):Da(oa.x,oa.y,e/d*ma)}for(let pa=j-1;pa>=0;pa--){const qa=pa/j,ra=g*Math.cos(qa*Math.PI/2),sa=h*Math.sin(qa*Math.PI/2)+i;for(let ta=0,ua=A.length;ta<ua;ta++){const va=E(A[ta],I[ta],sa);Da(va.x,va.y,e+ra)}for(let wa=0,xa=u.length;wa<xa;wa++){const ya=u[wa];P=O[wa];for(let za=0,Aa=ya.length;za<Aa;za++){const Ba=E(ya[za],P[za],sa);n?Da(Ba.x,Ba.y+m[d-1].y,m[d-1].x+ra):Da(Ba.x,Ba.y,e+ra)}}}function Ca(a,b){let c=a.length;for(;--c>=0;){const e=c;let f=c-1;f<0&&(f=a.length-1);for(let g=0,h=d+2*j;g<h;g++){const i=F*g,k=F*(g+1),l=b+e+i,m=b+f+i,n=b+f+k,o=b+e+k;Fa(l,m,n,o)}}}function Da(a,c,d){b.push(a),b.push(c),b.push(d)}function Ea(a,b,c){Ga(a),Ga(b),Ga(c);const d=P5.length/3,e=l.generateTopUV(O5,P5,d-3,d-2,d-1);Ha(e[0]),Ha(e[1]),Ha(e[2])}function Fa(a,b,c,d){Ga(a),Ga(b),Ga(d),Ga(b),Ga(c),Ga(d);const e=P5.length/3,f=l.generateSideWallUV(O5,P5,e-6,e-3,e-2,e-1);Ha(f[0]),Ha(f[1]),Ha(f[3]),Ha(f[1]),Ha(f[2]),Ha(f[3])}function Ga(a){P5.push(b[3*a+0]),P5.push(b[3*a+1]),P5.push(b[3*a+2])}function Ha(a){Q5.push(a.x),Q5.push(a.y)}(function(){const a=P5.length/3;if(f){let b=0,c=F*b;for(let e=0;e<G;e++){const g=z[e];Ea(g[2]+c,g[1]+c,g[0]+c)}c=F*(b=d+2*j);for(let h=0;h<G;h++){const i=z[h];Ea(i[0]+c,i[1]+c,i[2]+c)}}else{for(let k=0;k<G;k++){const l=z[k];Ea(l[2],l[1],l[0])}for(let m=0;m<G;m++){const n=z[m];Ea(n[0]+F*d,n[1]+F*d,n[2]+F*d)}}O5.addGroup(a,P5.length/3-a,0)})(),(function(){const a=P5.length/3;let b=0;Ca(A,b),b+=A.length;for(let c=0,d=u.length;c<d;c++){const e=u[c];Ca(e,b),b+=e.length}O5.addGroup(a,P5.length/3-a,1)})()}this.setAttribute("position",new jC(P5,3)),this.setAttribute("uv",new jC(Q5,2)),this.computeVertexNormals()}toJSON(){const V5=super.toJSON(),W5=this.parameters.shapes,X5=this.parameters.options;return e6(W5,X5,V5)}static fromJSON(Y5,Z5){const $5=[];for(let _5=0,a6=Y5.shapes.length;_5<a6;_5++){const b6=Z5[Y5.shapes[_5]];$5.push(b6)}const c6=Y5.options.extrudePath;return void 0!==c6&&(Y5.options.extrudePath=new n2[c6.type]().fromJSON(c6)),new L5($5,Y5.options)}}const d6={generateTopUV:function(a,b,c,d,e){const f=b[3*c],g=b[3*c+1],h=b[3*d],i=b[3*d+1],j=b[3*e],k=b[3*e+1];return[new L(f,g),new L(h,i),new L(j,k)]},generateSideWallUV:function(a,b,c,d,e,f){const g=b[3*c],h=b[3*c+1],i=b[3*c+2],j=b[3*d],k=b[3*d+1],l=b[3*d+2],m=b[3*e],n=b[3*e+1],o=b[3*e+2],p=b[3*f],q=b[3*f+1],r=b[3*f+2];return Math.abs(h-k)<Math.abs(g-j)?[new L(g,1-i),new L(j,1-l),new L(m,1-o),new L(p,1-r)]:[new L(h,1-i),new L(k,1-l),new L(n,1-o),new L(q,1-r)]}};function e6(a,b,c){if(c.shapes=[],Array.isArray(a))for(let d=0,e=a.length;d<e;d++){const f=a[d];c.shapes.push(f.uuid)}else c.shapes.push(a.uuid);return void 0!==b.extrudePath&&(c.options.extrudePath=b.extrudePath.toJSON()),c}class f6 extends FZ{constructor(g6=1,h6=0){const i6=(1+Math.sqrt(5))/2;super([-1,i6,0,1,i6,0,-1,-i6,0,1,-i6,0,0,-1,i6,0,1,i6,0,-1,-i6,0,1,-i6,i6,0,-1,i6,0,1,-i6,0,-1,-i6,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],g6,h6),this.type="IcosahedronGeometry",this.parameters={radius:g6,detail:h6}}static fromJSON(j6){return new f6(j6.radius,j6.detail)}}class k6 extends uC{constructor(l6=[new L(0,0.5),new L(0.5,0),new L(0,-0.5)],m6=12,n6=0,o6=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:l6,segments:m6,phiStart:n6,phiLength:o6},m6=Math.floor(m6),o6=F(o6,0,2*Math.PI);const p6=[],q6=[],r6=[],s6=[],t6=[],u6=1/m6,v6=new Xj(),w6=new L(),x6=new Xj(),y6=new Xj(),z6=new Xj();let A6=0,B6=0;for(let C6=0;C6<=l6.length-1;C6++)switch(C6){case 0:A6=l6[C6+1].x-l6[C6].x,B6=l6[C6+1].y-l6[C6].y,x6.x=1*B6,x6.y=-A6,x6.z=0*B6,z6.copy(x6),x6.normalize(),s6.push(x6.x,x6.y,x6.z);break;case l6.length-1:s6.push(z6.x,z6.y,z6.z);break;default:A6=l6[C6+1].x-l6[C6].x,B6=l6[C6+1].y-l6[C6].y,x6.x=1*B6,x6.y=-A6,x6.z=0*B6,y6.copy(x6),x6.x+=z6.x,x6.y+=z6.y,x6.z+=z6.z,x6.normalize(),s6.push(x6.x,x6.y,x6.z),z6.copy(y6)}for(let D6=0;D6<=m6;D6++){const E6=n6+D6*u6*o6,F6=Math.sin(E6),G6=Math.cos(E6);for(let H6=0;H6<=l6.length-1;H6++){v6.x=l6[H6].x*F6,v6.y=l6[H6].y,v6.z=l6[H6].x*G6,q6.push(v6.x,v6.y,v6.z),w6.x=D6/m6,w6.y=H6/(l6.length-1),r6.push(w6.x,w6.y);const I6=s6[3*H6+0]*F6,J6=s6[3*H6+1],K6=s6[3*H6+0]*G6;t6.push(I6,J6,K6)}}for(let L6=0;L6<m6;L6++)for(let M6=0;M6<l6.length-1;M6++){const N6=M6+L6*l6.length,O6=N6,P6=N6+l6.length,Q6=N6+l6.length+1,R6=N6+1;p6.push(O6,P6,R6),p6.push(Q6,R6,P6)}this.setIndex(p6),this.setAttribute("position",new jC(q6,3)),this.setAttribute("uv",new jC(r6,2)),this.setAttribute("normal",new jC(t6,3))}static fromJSON(S6){return new k6(S6.points,S6.segments,S6.phiStart,S6.phiLength)}}class T6 extends FZ{constructor(U6=1,V6=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],U6,V6),this.type="OctahedronGeometry",this.parameters={radius:U6,detail:V6}}static fromJSON(W6){return new T6(W6.radius,W6.detail)}}class X6 extends uC{constructor(Y6=0.5,Z6=1,$6=8,_6=1,a7=0,b7=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:Y6,outerRadius:Z6,thetaSegments:$6,phiSegments:_6,thetaStart:a7,thetaLength:b7},$6=Math.max(3,$6),_6=Math.max(1,_6);const c7=[],d7=[],e7=[],f7=[];let g7=Y6;const h7=(Z6-Y6)/_6,i7=new Xj(),j7=new L();for(let k7=0;k7<=_6;k7++){for(let l7=0;l7<=$6;l7++){const m7=a7+l7/$6*b7;i7.x=g7*Math.cos(m7),i7.y=g7*Math.sin(m7),d7.push(i7.x,i7.y,i7.z),e7.push(0,0,1),j7.x=(i7.x/Z6+1)/2,j7.y=(i7.y/Z6+1)/2,f7.push(j7.x,j7.y)}g7+=h7}for(let n7=0;n7<_6;n7++){const o7=n7*($6+1);for(let p7=0;p7<$6;p7++){const q7=p7+o7,r7=q7,s7=q7+$6+1,t7=q7+$6+2,u7=q7+1;c7.push(r7,s7,u7),c7.push(s7,t7,u7)}}this.setIndex(c7),this.setAttribute("position",new jC(d7,3)),this.setAttribute("normal",new jC(e7,3)),this.setAttribute("uv",new jC(f7,2))}static fromJSON(v7){return new X6(v7.innerRadius,v7.outerRadius,v7.thetaSegments,v7.phiSegments,v7.thetaStart,v7.thetaLength)}}class w7 extends uC{constructor(x7=new w4([new L(0,0.5),new L(-0.5,-0.5),new L(0.5,-0.5)]),y7=12){super(),this.type="ShapeGeometry",this.parameters={shapes:x7,curveSegments:y7};const z7=[],A7=[],B7=[],C7=[];let D7=0,E7=0;if(!1===Array.isArray(x7))G7(x7);else for(let F7=0;F7<x7.length;F7++)G7(x7[F7]),this.addGroup(D7,E7,F7),D7+=E7,E7=0;function G7(a){const b=A7.length/3,c=a.extractPoints(y7);let d=c.shape;const e=c.holes;!1===t5.isClockWise(d)&&(d=d.reverse());for(let f=0,g=e.length;f<g;f++){const h=e[f];!0===t5.isClockWise(h)&&(e[f]=h.reverse())}const i=t5.triangulateShape(d,e);for(let j=0,k=e.length;j<k;j++){const l=e[j];d=d.concat(l)}for(let m=0,n=d.length;m<n;m++){const o=d[m];A7.push(o.x,o.y,0),B7.push(0,0,1),C7.push(o.x,o.y)}for(let p=0,q=i.length;p<q;p++){const r=i[p],s=r[0]+b,t=r[1]+b,u=r[2]+b;z7.push(s,t,u),E7+=3}}this.setIndex(z7),this.setAttribute("position",new jC(A7,3)),this.setAttribute("normal",new jC(B7,3)),this.setAttribute("uv",new jC(C7,2))}toJSON(){const H7=super.toJSON(),I7=this.parameters.shapes;return P7(I7,H7)}static fromJSON(J7,K7){const L7=[];for(let M7=0,N7=J7.shapes.length;M7<N7;M7++){const O7=K7[J7.shapes[M7]];L7.push(O7)}return new w7(L7,J7.curveSegments)}}function P7(a,b){if(b.shapes=[],Array.isArray(a))for(let c=0,d=a.length;c<d;c++){const e=a[c];b.shapes.push(e.uuid)}else b.shapes.push(a.uuid);return b}class Q7 extends uC{constructor(R7=1,S7=32,T7=16,U7=0,V7=2*Math.PI,W7=0,X7=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:R7,widthSegments:S7,heightSegments:T7,phiStart:U7,phiLength:V7,thetaStart:W7,thetaLength:X7},S7=Math.max(3,Math.floor(S7)),T7=Math.max(2,Math.floor(T7));const Y7=Math.min(W7+X7,Math.PI);let Z7=0;const $7=[],_7=new Xj(),a8=new Xj(),b8=[],c8=[],d8=[],e8=[];for(let f8=0;f8<=T7;f8++){const g8=[],h8=f8/T7;let i8=0;0==f8&&0==W7?i8=0.5/S7:f8==T7&&Y7==Math.PI&&(i8=-0.5/S7);for(let j8=0;j8<=S7;j8++){const k8=j8/S7;_7.x=-R7*Math.cos(U7+k8*V7)*Math.sin(W7+h8*X7),_7.y=R7*Math.cos(W7+h8*X7),_7.z=R7*Math.sin(U7+k8*V7)*Math.sin(W7+h8*X7),c8.push(_7.x,_7.y,_7.z),a8.copy(_7).normalize(),d8.push(a8.x,a8.y,a8.z),e8.push(k8+i8,1-h8),g8.push(Z7++)}$7.push(g8)}for(let l8=0;l8<T7;l8++)for(let m8=0;m8<S7;m8++){const n8=$7[l8][m8+1],o8=$7[l8][m8],p8=$7[l8+1][m8],q8=$7[l8+1][m8+1];(0!==l8||W7>0)&&b8.push(n8,o8,q8),(l8!==T7-1||Y7<Math.PI)&&b8.push(o8,p8,q8)}this.setIndex(b8),this.setAttribute("position",new jC(c8,3)),this.setAttribute("normal",new jC(d8,3)),this.setAttribute("uv",new jC(e8,2))}static fromJSON(r8){return new Q7(r8.radius,r8.widthSegments,r8.heightSegments,r8.phiStart,r8.phiLength,r8.thetaStart,r8.thetaLength)}}class s8 extends FZ{constructor(t8=1,u8=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t8,u8),this.type="TetrahedronGeometry",this.parameters={radius:t8,detail:u8}}static fromJSON(v8){return new s8(v8.radius,v8.detail)}}class w8 extends uC{constructor(x8=1,y8=0.4,z8=8,A8=6,B8=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:x8,tube:y8,radialSegments:z8,tubularSegments:A8,arc:B8},z8=Math.floor(z8),A8=Math.floor(A8);const C8=[],D8=[],E8=[],F8=[],G8=new Xj(),H8=new Xj(),I8=new Xj();for(let J8=0;J8<=z8;J8++)for(let K8=0;K8<=A8;K8++){const L8=K8/A8*B8,M8=J8/z8*Math.PI*2;H8.x=(x8+y8*Math.cos(M8))*Math.cos(L8),H8.y=(x8+y8*Math.cos(M8))*Math.sin(L8),H8.z=y8*Math.sin(M8),D8.push(H8.x,H8.y,H8.z),G8.x=x8*Math.cos(L8),G8.y=x8*Math.sin(L8),I8.subVectors(H8,G8).normalize(),E8.push(I8.x,I8.y,I8.z),F8.push(K8/A8),F8.push(J8/z8)}for(let N8=1;N8<=z8;N8++)for(let O8=1;O8<=A8;O8++){const P8=(A8+1)*N8+O8-1,Q8=(A8+1)*(N8-1)+O8-1,R8=(A8+1)*(N8-1)+O8,S8=(A8+1)*N8+O8;C8.push(P8,Q8,S8),C8.push(Q8,R8,S8)}this.setIndex(C8),this.setAttribute("position",new jC(D8,3)),this.setAttribute("normal",new jC(E8,3)),this.setAttribute("uv",new jC(F8,2))}static fromJSON(T8){return new w8(T8.radius,T8.tube,T8.radialSegments,T8.tubularSegments,T8.arc)}}class U8 extends uC{constructor(V8=1,W8=0.4,X8=64,Y8=8,Z8=2,$8=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:V8,tube:W8,tubularSegments:X8,radialSegments:Y8,p:Z8,q:$8},X8=Math.floor(X8),Y8=Math.floor(Y8);const _8=[],a9=[],b9=[],c9=[],d9=new Xj(),e9=new Xj(),f9=new Xj(),g9=new Xj(),h9=new Xj(),i9=new Xj(),j9=new Xj();for(let k9=0;k9<=X8;++k9){const l9=k9/X8*Z8*Math.PI*2;w9(l9,Z8,$8,V8,f9),w9(l9+0.01,Z8,$8,V8,g9),i9.subVectors(g9,f9),j9.addVectors(g9,f9),h9.crossVectors(i9,j9),j9.crossVectors(h9,i9),h9.normalize(),j9.normalize();for(let m9=0;m9<=Y8;++m9){const n9=m9/Y8*Math.PI*2,o9=-W8*Math.cos(n9),p9=W8*Math.sin(n9);d9.x=f9.x+(o9*j9.x+p9*h9.x),d9.y=f9.y+(o9*j9.y+p9*h9.y),d9.z=f9.z+(o9*j9.z+p9*h9.z),a9.push(d9.x,d9.y,d9.z),e9.subVectors(d9,f9).normalize(),b9.push(e9.x,e9.y,e9.z),c9.push(k9/X8),c9.push(m9/Y8)}}for(let q9=1;q9<=X8;q9++)for(let r9=1;r9<=Y8;r9++){const s9=(Y8+1)*(q9-1)+(r9-1),t9=(Y8+1)*q9+(r9-1),u9=(Y8+1)*q9+r9,v9=(Y8+1)*(q9-1)+r9;_8.push(s9,t9,v9),_8.push(t9,u9,v9)}function w9(a,b,c,d,e){const f=c/b*a,g=Math.cos(f);e.x=d*(2+g)*0.5*Math.cos(a),e.y=d*(2+g)*Math.sin(a)*0.5,e.z=d*Math.sin(f)*0.5}this.setIndex(_8),this.setAttribute("position",new jC(a9,3)),this.setAttribute("normal",new jC(b9,3)),this.setAttribute("uv",new jC(c9,2))}static fromJSON(x9){return new U8(x9.radius,x9.tube,x9.tubularSegments,x9.radialSegments,x9.p,x9.q)}}class y9 extends uC{constructor(z9=new D1(new Xj(-1,-1,0),new Xj(-1,1,0),new Xj(1,1,0)),A9=64,B9=1,C9=8,D9=!1){super(),this.type="TubeGeometry",this.parameters={path:z9,tubularSegments:A9,radius:B9,radialSegments:C9,closed:D9};const E9=z9.computeFrenetFrames(A9,D9);this.tangents=E9.tangents,this.normals=E9.normals,this.binormals=E9.binormals;const F9=new Xj(),G9=new Xj(),H9=new L();let I9=new Xj();const J9=[],K9=[],L9=[],M9=[];function N9(a){I9=z9.getPointAt(a/A9,I9);const b=E9.normals[a],c=E9.binormals[a];for(let d=0;d<=C9;d++){const e=d/C9*Math.PI*2,f=Math.sin(e),g=-Math.cos(e);G9.x=g*b.x+f*c.x,G9.y=g*b.y+f*c.y,G9.z=g*b.z+f*c.z,G9.normalize(),K9.push(G9.x,G9.y,G9.z),F9.x=I9.x+B9*G9.x,F9.y=I9.y+B9*G9.y,F9.z=I9.z+B9*G9.z,J9.push(F9.x,F9.y,F9.z)}}(function(){for(let a=0;a<A9;a++)N9(a);N9(!1===D9?A9:0),(function(){for(let a=0;a<=A9;a++)for(let b=0;b<=C9;b++)H9.x=a/A9,H9.y=b/C9,L9.push(H9.x,H9.y)})(),(function(){for(let a=1;a<=A9;a++)for(let b=1;b<=C9;b++){const c=(C9+1)*(a-1)+(b-1),d=(C9+1)*a+(b-1),e=(C9+1)*a+b,f=(C9+1)*(a-1)+b;M9.push(c,d,f),M9.push(d,e,f)}})()})(),this.setIndex(M9),this.setAttribute("position",new jC(J9,3)),this.setAttribute("normal",new jC(K9,3)),this.setAttribute("uv",new jC(L9,2))}toJSON(){const O9=super.toJSON();return O9.path=this.parameters.path.toJSON(),O9}static fromJSON(P9){return new y9(new n2[P9.path.type]().fromJSON(P9.path),P9.tubularSegments,P9.radius,P9.radialSegments,P9.closed)}}function Q9(a,b,c){const d=`${a.x},${a.y},${a.z}-${b.x},${b.y},${b.z}`,e=`${b.x},${b.y},${b.z}-${a.x},${a.y},${a.z}`;return!0!==c.has(d)&& !0!==c.has(e)&&(c.add(d,e),!0)}Object.freeze({__proto__:null,BoxGeometry:mH,BoxBufferGeometry:mH,CircleGeometry:OY,CircleBufferGeometry:OY,ConeGeometry:wZ,ConeBufferGeometry:wZ,CylinderGeometry:cZ,CylinderBufferGeometry:cZ,DodecahedronGeometry:TZ,DodecahedronBufferGeometry:TZ,EdgesGeometry:class extends uC{constructor(R9=null,S9=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:R9,thresholdAngle:S9},null!==R9){const T9=4,U9=Math.pow(10,T9),V9=Math.cos(C*S9),W9=R9.getIndex(),X9=R9.getAttribute("position"),Y9=W9?W9.count:X9.count,Z9=[0,0,0],$9=["a","b","c"],_9=new Array(3),aaa={},baa=[];for(let caa=0;caa<Y9;caa+=3){W9?(Z9[0]=W9.getX(caa),Z9[1]=W9.getX(caa+1),Z9[2]=W9.getX(caa+2)):(Z9[0]=caa,Z9[1]=caa+1,Z9[2]=caa+2);const{a:daa,b:eaa,c:faa}=a$;if(daa.fromBufferAttribute(X9,Z9[0]),eaa.fromBufferAttribute(X9,Z9[1]),faa.fromBufferAttribute(X9,Z9[2]),a$.getNormal(_Z),_9[0]=`${Math.round(daa.x*U9)},${Math.round(daa.y*U9)},${Math.round(daa.z*U9)}`,_9[1]=`${Math.round(eaa.x*U9)},${Math.round(eaa.y*U9)},${Math.round(eaa.z*U9)}`,_9[2]=`${Math.round(faa.x*U9)},${Math.round(faa.y*U9)},${Math.round(faa.z*U9)}`,_9[0]!==_9[1]&&_9[1]!==_9[2]&&_9[2]!==_9[0])for(let gaa=0;gaa<3;gaa++){const haa=(gaa+1)%3,iaa=_9[gaa],jaa=_9[haa],kaa=a$[$9[gaa]],laa=a$[$9[haa]],maa=`${iaa}_${jaa}`,naa=`${jaa}_${iaa}`;naa in aaa&&aaa[naa]?(_Z.dot(aaa[naa].normal)<=V9&&(baa.push(kaa.x,kaa.y,kaa.z),baa.push(laa.x,laa.y,laa.z)),aaa[naa]=null):maa in aaa||(aaa[maa]={index0:Z9[gaa],index1:Z9[haa],normal:_Z.clone()})}}for(const oaa in aaa)if(aaa[oaa]){const{index0:paa,index1:qaa}=aaa[oaa];ZZ.fromBufferAttribute(X9,paa),$Z.fromBufferAttribute(X9,qaa),baa.push(ZZ.x,ZZ.y,ZZ.z),baa.push($Z.x,$Z.y,$Z.z)}this.setAttribute("position",new jC(baa,3))}}},ExtrudeGeometry:L5,ExtrudeBufferGeometry:L5,IcosahedronGeometry:f6,IcosahedronBufferGeometry:f6,LatheGeometry:k6,LatheBufferGeometry:k6,OctahedronGeometry:T6,OctahedronBufferGeometry:T6,PlaneGeometry:kL,PlaneBufferGeometry:kL,PolyhedronGeometry:FZ,PolyhedronBufferGeometry:FZ,RingGeometry:X6,RingBufferGeometry:X6,ShapeGeometry:w7,ShapeBufferGeometry:w7,SphereGeometry:Q7,SphereBufferGeometry:Q7,TetrahedronGeometry:s8,TetrahedronBufferGeometry:s8,TorusGeometry:w8,TorusBufferGeometry:w8,TorusKnotGeometry:U8,TorusKnotBufferGeometry:U8,TubeGeometry:y9,TubeBufferGeometry:y9,WireframeGeometry:class extends uC{constructor(raa=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:raa},null!==raa){const saa=[],taa=new Set(),uaa=new Xj(),vaa=new Xj();if(null!==raa.index){const waa=raa.attributes.position,xaa=raa.index;let yaa=raa.groups;0===yaa.length&&(yaa=[{start:0,count:xaa.count,materialIndex:0}]);for(let zaa=0,Aaa=yaa.length;zaa<Aaa;++zaa){const Baa=yaa[zaa],Caa=Baa.start,Daa=Baa.count;for(let Eaa=Caa,Faa=Caa+Daa;Eaa<Faa;Eaa+=3)for(let Gaa=0;Gaa<3;Gaa++){const Haa=xaa.getX(Eaa+Gaa),Iaa=xaa.getX(Eaa+(Gaa+1)%3);uaa.fromBufferAttribute(waa,Haa),vaa.fromBufferAttribute(waa,Iaa),!0===Q9(uaa,vaa,taa)&&(saa.push(uaa.x,uaa.y,uaa.z),saa.push(vaa.x,vaa.y,vaa.z))}}}else{const Jaa=raa.attributes.position;for(let Kaa=0,Laa=Jaa.count/3;Kaa<Laa;Kaa++)for(let Maa=0;Maa<3;Maa++){const Naa=3*Kaa+Maa,Oaa=3*Kaa+(Maa+1)%3;uaa.fromBufferAttribute(Jaa,Naa),vaa.fromBufferAttribute(Jaa,Oaa),!0===Q9(uaa,vaa,taa)&&(saa.push(uaa.x,uaa.y,uaa.z),saa.push(vaa.x,vaa.y,vaa.z))}}this.setAttribute("position",new jC(saa,3))}}}});class Paa extends eA{constructor(Qaa){super(),this.type="ShadowMaterial",this.color=new ld(0),this.transparent=!0,this.setValues(Qaa)}copy(Raa){return super.copy(Raa),this.color.copy(Raa.color),this}}Paa.prototype.isShadowMaterial=!0;class Saa extends eA{constructor(Taa){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new ld(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ld(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new L(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(Taa)}copy(Uaa){return super.copy(Uaa),this.defines={STANDARD:""},this.color.copy(Uaa.color),this.roughness=Uaa.roughness,this.metalness=Uaa.metalness,this.map=Uaa.map,this.lightMap=Uaa.lightMap,this.lightMapIntensity=Uaa.lightMapIntensity,this.aoMap=Uaa.aoMap,this.aoMapIntensity=Uaa.aoMapIntensity,this.emissive.copy(Uaa.emissive),this.emissiveMap=Uaa.emissiveMap,this.emissiveIntensity=Uaa.emissiveIntensity,this.bumpMap=Uaa.bumpMap,this.bumpScale=Uaa.bumpScale,this.normalMap=Uaa.normalMap,this.normalMapType=Uaa.normalMapType,this.normalScale.copy(Uaa.normalScale),this.displacementMap=Uaa.displacementMap,this.displacementScale=Uaa.displacementScale,this.displacementBias=Uaa.displacementBias,this.roughnessMap=Uaa.roughnessMap,this.metalnessMap=Uaa.metalnessMap,this.alphaMap=Uaa.alphaMap,this.envMap=Uaa.envMap,this.envMapIntensity=Uaa.envMapIntensity,this.refractionRatio=Uaa.refractionRatio,this.wireframe=Uaa.wireframe,this.wireframeLinewidth=Uaa.wireframeLinewidth,this.wireframeLinecap=Uaa.wireframeLinecap,this.wireframeLinejoin=Uaa.wireframeLinejoin,this.flatShading=Uaa.flatShading,this}}Saa.prototype.isMeshStandardMaterial=!0;class Vaa extends Saa{constructor(Waa){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new L(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return F(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(a){this.ior=(1+0.4*a)/(1-0.4*a)}}),this.sheenColor=new ld(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new ld(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new ld(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(Waa)}get sheen(){return this._sheen}set sheen(Xaa){this._sheen>0!=Xaa>0&&this.version++,this._sheen=Xaa}get clearcoat(){return this._clearcoat}set clearcoat(Yaa){this._clearcoat>0!=Yaa>0&&this.version++,this._clearcoat=Yaa}get transmission(){return this._transmission}set transmission(Zaa){this._transmission>0!=Zaa>0&&this.version++,this._transmission=Zaa}copy($aa){return super.copy($aa),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=$aa.clearcoat,this.clearcoatMap=$aa.clearcoatMap,this.clearcoatRoughness=$aa.clearcoatRoughness,this.clearcoatRoughnessMap=$aa.clearcoatRoughnessMap,this.clearcoatNormalMap=$aa.clearcoatNormalMap,this.clearcoatNormalScale.copy($aa.clearcoatNormalScale),this.ior=$aa.ior,this.sheen=$aa.sheen,this.sheenColor.copy($aa.sheenColor),this.sheenColorMap=$aa.sheenColorMap,this.sheenRoughness=$aa.sheenRoughness,this.sheenRoughnessMap=$aa.sheenRoughnessMap,this.transmission=$aa.transmission,this.transmissionMap=$aa.transmissionMap,this.thickness=$aa.thickness,this.thicknessMap=$aa.thicknessMap,this.attenuationDistance=$aa.attenuationDistance,this.attenuationColor.copy($aa.attenuationColor),this.specularIntensity=$aa.specularIntensity,this.specularIntensityMap=$aa.specularIntensityMap,this.specularColor.copy($aa.specularColor),this.specularColorMap=$aa.specularColorMap,this}}Vaa.prototype.isMeshPhysicalMaterial=!0;class _aa extends eA{constructor(aba){super(),this.type="MeshPhongMaterial",this.color=new ld(16777215),this.specular=new ld(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ld(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new L(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(aba)}copy(bba){return super.copy(bba),this.color.copy(bba.color),this.specular.copy(bba.specular),this.shininess=bba.shininess,this.map=bba.map,this.lightMap=bba.lightMap,this.lightMapIntensity=bba.lightMapIntensity,this.aoMap=bba.aoMap,this.aoMapIntensity=bba.aoMapIntensity,this.emissive.copy(bba.emissive),this.emissiveMap=bba.emissiveMap,this.emissiveIntensity=bba.emissiveIntensity,this.bumpMap=bba.bumpMap,this.bumpScale=bba.bumpScale,this.normalMap=bba.normalMap,this.normalMapType=bba.normalMapType,this.normalScale.copy(bba.normalScale),this.displacementMap=bba.displacementMap,this.displacementScale=bba.displacementScale,this.displacementBias=bba.displacementBias,this.specularMap=bba.specularMap,this.alphaMap=bba.alphaMap,this.envMap=bba.envMap,this.combine=bba.combine,this.reflectivity=bba.reflectivity,this.refractionRatio=bba.refractionRatio,this.wireframe=bba.wireframe,this.wireframeLinewidth=bba.wireframeLinewidth,this.wireframeLinecap=bba.wireframeLinecap,this.wireframeLinejoin=bba.wireframeLinejoin,this.flatShading=bba.flatShading,this}}_aa.prototype.isMeshPhongMaterial=!0;class cba extends eA{constructor(dba){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new ld(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ld(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new L(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(dba)}copy(eba){return super.copy(eba),this.color.copy(eba.color),this.map=eba.map,this.gradientMap=eba.gradientMap,this.lightMap=eba.lightMap,this.lightMapIntensity=eba.lightMapIntensity,this.aoMap=eba.aoMap,this.aoMapIntensity=eba.aoMapIntensity,this.emissive.copy(eba.emissive),this.emissiveMap=eba.emissiveMap,this.emissiveIntensity=eba.emissiveIntensity,this.bumpMap=eba.bumpMap,this.bumpScale=eba.bumpScale,this.normalMap=eba.normalMap,this.normalMapType=eba.normalMapType,this.normalScale.copy(eba.normalScale),this.displacementMap=eba.displacementMap,this.displacementScale=eba.displacementScale,this.displacementBias=eba.displacementBias,this.alphaMap=eba.alphaMap,this.wireframe=eba.wireframe,this.wireframeLinewidth=eba.wireframeLinewidth,this.wireframeLinecap=eba.wireframeLinecap,this.wireframeLinejoin=eba.wireframeLinejoin,this}}cba.prototype.isMeshToonMaterial=!0;class fba extends eA{constructor(gba){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new L(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(gba)}copy(hba){return super.copy(hba),this.bumpMap=hba.bumpMap,this.bumpScale=hba.bumpScale,this.normalMap=hba.normalMap,this.normalMapType=hba.normalMapType,this.normalScale.copy(hba.normalScale),this.displacementMap=hba.displacementMap,this.displacementScale=hba.displacementScale,this.displacementBias=hba.displacementBias,this.wireframe=hba.wireframe,this.wireframeLinewidth=hba.wireframeLinewidth,this.flatShading=hba.flatShading,this}}fba.prototype.isMeshNormalMaterial=!0;class iba extends eA{constructor(jba){super(),this.type="MeshLambertMaterial",this.color=new ld(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ld(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(jba)}copy(kba){return super.copy(kba),this.color.copy(kba.color),this.map=kba.map,this.lightMap=kba.lightMap,this.lightMapIntensity=kba.lightMapIntensity,this.aoMap=kba.aoMap,this.aoMapIntensity=kba.aoMapIntensity,this.emissive.copy(kba.emissive),this.emissiveMap=kba.emissiveMap,this.emissiveIntensity=kba.emissiveIntensity,this.specularMap=kba.specularMap,this.alphaMap=kba.alphaMap,this.envMap=kba.envMap,this.combine=kba.combine,this.reflectivity=kba.reflectivity,this.refractionRatio=kba.refractionRatio,this.wireframe=kba.wireframe,this.wireframeLinewidth=kba.wireframeLinewidth,this.wireframeLinecap=kba.wireframeLinecap,this.wireframeLinejoin=kba.wireframeLinejoin,this}}iba.prototype.isMeshLambertMaterial=!0;class lba extends eA{constructor(mba){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new ld(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new L(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(mba)}copy(nba){return super.copy(nba),this.defines={MATCAP:""},this.color.copy(nba.color),this.matcap=nba.matcap,this.map=nba.map,this.bumpMap=nba.bumpMap,this.bumpScale=nba.bumpScale,this.normalMap=nba.normalMap,this.normalMapType=nba.normalMapType,this.normalScale.copy(nba.normalScale),this.displacementMap=nba.displacementMap,this.displacementScale=nba.displacementScale,this.displacementBias=nba.displacementBias,this.alphaMap=nba.alphaMap,this.flatShading=nba.flatShading,this}}lba.prototype.isMeshMatcapMaterial=!0;class oba extends gW{constructor(pba){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(pba)}copy(qba){return super.copy(qba),this.scale=qba.scale,this.dashSize=qba.dashSize,this.gapSize=qba.gapSize,this}}oba.prototype.isLineDashedMaterial=!0,Object.freeze({__proto__:null,ShadowMaterial:Paa,SpriteMaterial:zT,RawShaderMaterial:uM,ShaderMaterial:FH,PointsMaterial:tX,MeshPhysicalMaterial:Vaa,MeshStandardMaterial:Saa,MeshPhongMaterial:_aa,MeshToonMaterial:cba,MeshNormalMaterial:fba,MeshLambertMaterial:iba,MeshDepthMaterial:zQ,MeshDistanceMaterial:CQ,MeshBasicMaterial:wA,MeshMatcapMaterial:lba,LineDashedMaterial:oba,LineBasicMaterial:gW,Material:eA});const rba={arraySlice:function(a,b,c){return rba.isTypedArray(a)?new a.constructor(a.subarray(b,void 0!==c?c:a.length)):a.slice(b,c)},convertArray:function(a,b,c){return a&&(c||a.constructor!==b)?"number"==typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a):a},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){const b=a.length,c=new Array(b);for(let d=0;d!==b;++d)c[d]=d;return c.sort(function(b,c){return a[b]-a[c]}),c},sortedArray:function(a,b,c){const d=a.length,e=new a.constructor(d);for(let f=0,g=0;g!==d;++f){const h=c[f]*b;for(let i=0;i!==b;++i)e[g++]=a[h+i]}return e},flattenJSON:function(a,b,c,d){let e=1,f=a[0];for(;void 0!==f&& void 0===f[d];)f=a[e++];if(void 0===f)return;let g=f[d];if(void 0!==g)if(Array.isArray(g))do void 0!==(g=f[d])&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)else if(void 0!==g.toArray)do void 0!==(g=f[d])&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)else do void 0!==(g=f[d])&&(b.push(f.time),c.push(g)),f=a[e++];while(void 0!==f)},subclip:function(a,b,c,d,e=30){const f=a.clone();f.name=b;const g=[];for(let h=0;h<f.tracks.length;++h){const i=f.tracks[h],j=i.getValueSize(),k=[],l=[];for(let m=0;m<i.times.length;++m){const n=i.times[m]*e;if(!(n<c)&&!(n>=d)){k.push(i.times[m]);for(let o=0;o<j;++o)l.push(i.values[m*j+o])}}0!==k.length&&(i.times=rba.convertArray(k,i.times.constructor),i.values=rba.convertArray(l,i.values.constructor),g.push(i))}f.tracks=g;let p=1/0;for(let q=0;q<f.tracks.length;++q)p>f.tracks[q].times[0]&&(p=f.tracks[q].times[0]);for(let r=0;r<f.tracks.length;++r)f.tracks[r].shift(-1*p);return f.resetDuration(),f},makeClipAdditive:function(a,b=0,c=a,d=30){d<=0&&(d=30);const e=c.tracks.length,f=b/d;for(let g=0;g<e;++g){const h=c.tracks[g],i=h.ValueTypeName;if("bool"===i||"string"===i)continue;const j=a.tracks.find(function(a){return a.name===h.name&&a.ValueTypeName===i});if(void 0===j)continue;let k=0;const l=h.getValueSize();h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(k=l/3);let m=0;const n=j.getValueSize();j.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(m=n/3);const o=h.times.length-1;let p;if(f<=h.times[0]){const q=k,r=l-k;p=rba.arraySlice(h.values,q,r)}else if(f>=h.times[o]){const s=o*l+k,t=s+l-k;p=rba.arraySlice(h.values,s,t)}else{const u=h.createInterpolant(),v=k,w=l-k;u.evaluate(f),p=rba.arraySlice(u.resultBuffer,v,w)}if("quaternion"===i){const x=new qh().fromArray(p).normalize().conjugate();x.toArray(p)}const y=j.times.length;for(let z=0;z<y;++z){const A=z*n+m;if("quaternion"===i)qh.multiplyQuaternionsFlat(j.values,A,p,0,j.values,A);else{const B=n-2*m;for(let C=0;C<B;++C)j.values[A+C]-=p[C]}}}return a.blendMode=2501,a}};class sba{constructor(tba,uba,vba,wba){this.parameterPositions=tba,this._cachedIndex=0,this.resultBuffer=void 0!==wba?wba:new uba.constructor(vba),this.sampleValues=uba,this.valueSize=vba,this.settings=null,this.DefaultSettings_={}}evaluate(xba){const yba=this.parameterPositions;let zba=this._cachedIndex,Aba=yba[zba],Bba=yba[zba-1];validate_interval:{seek:{let Cba;linear_scan:{forward_scan:if(!(xba<Aba)){for(let Dba=zba+2;;){if(void 0===Aba){if(xba<Bba)break forward_scan;return zba=yba.length,this._cachedIndex=zba,this.afterEnd_(zba-1,xba,Bba)}if(zba===Dba)break;if(Bba=Aba,xba<(Aba=yba[++zba]))break seek}Cba=yba.length;break linear_scan}if(!(xba>=Bba)){const Eba=yba[1];xba<Eba&&(zba=2,Bba=Eba);for(let Fba=zba-2;;){if(void 0===Bba)return this._cachedIndex=0,this.beforeStart_(0,xba,Aba);if(zba===Fba)break;if(Aba=Bba,xba>=(Bba=yba[--zba-1]))break seek}Cba=zba,zba=0;break linear_scan}break validate_interval}for(;zba<Cba;){const Gba=zba+Cba>>>1;xba<yba[Gba]?Cba=Gba:zba=Gba+1}if(Aba=yba[zba],Bba=yba[zba-1],void 0===Bba)return this._cachedIndex=0,this.beforeStart_(0,xba,Aba);if(void 0===Aba)return zba=yba.length,this._cachedIndex=zba,this.afterEnd_(zba-1,Bba,xba)}this._cachedIndex=zba,this.intervalChanged_(zba,Bba,Aba)}return this.interpolate_(zba,Bba,xba,Aba)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(Hba){const Iba=this.resultBuffer,Jba=this.sampleValues,Kba=this.valueSize,Lba=Hba*Kba;for(let Mba=0;Mba!==Kba;++Mba)Iba[Mba]=Jba[Lba+Mba];return Iba}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}sba.prototype.beforeStart_=sba.prototype.copySampleValue_,sba.prototype.afterEnd_=sba.prototype.copySampleValue_;class Nba extends sba{constructor(Oba,Pba,Qba,Rba){super(Oba,Pba,Qba,Rba),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(Sba,Tba,Uba){const Vba=this.parameterPositions;let Wba=Sba-2,Xba=Sba+1,Yba=Vba[Wba],Zba=Vba[Xba];if(void 0===Yba)switch(this.getSettings_().endingStart){case 2401:Wba=Sba,Yba=2*Tba-Uba;break;case 2402:Wba=Vba.length-2,Yba=Tba+Vba[Wba]-Vba[Wba+1];break;default:Wba=Sba,Yba=Uba}if(void 0===Zba)switch(this.getSettings_().endingEnd){case 2401:Xba=Sba,Zba=2*Uba-Tba;break;case 2402:Xba=1,Zba=Uba+Vba[1]-Vba[0];break;default:Xba=Sba-1,Zba=Tba}const $ba=(Uba-Tba)*0.5,_ba=this.valueSize;this._weightPrev=$ba/(Tba-Yba),this._weightNext=$ba/(Zba-Uba),this._offsetPrev=Wba*_ba,this._offsetNext=Xba*_ba}interpolate_(aca,bca,cca,dca){const eca=this.resultBuffer,fca=this.sampleValues,gca=this.valueSize,hca=aca*gca,ica=hca-gca,jca=this._offsetPrev,kca=this._offsetNext,lca=this._weightPrev,mca=this._weightNext,nca=(cca-bca)/(dca-bca),oca=nca*nca,pca=oca*nca,qca=-lca*pca+2*lca*oca-lca*nca,rca=(1+lca)*pca+(-1.5-2*lca)*oca+(-0.5+lca)*nca+1,sca=(-1-mca)*pca+(1.5+mca)*oca+0.5*nca,tca=mca*pca-mca*oca;for(let uca=0;uca!==gca;++uca)eca[uca]=qca*fca[jca+uca]+rca*fca[ica+uca]+sca*fca[hca+uca]+tca*fca[kca+uca];return eca}}class vca extends sba{constructor(wca,xca,yca,zca){super(wca,xca,yca,zca)}interpolate_(Aca,Bca,Cca,Dca){const Eca=this.resultBuffer,Fca=this.sampleValues,Gca=this.valueSize,Hca=Aca*Gca,Ica=Hca-Gca,Jca=(Cca-Bca)/(Dca-Bca),Kca=1-Jca;for(let Lca=0;Lca!==Gca;++Lca)Eca[Lca]=Fca[Ica+Lca]*Kca+Fca[Hca+Lca]*Jca;return Eca}}class Mca extends sba{constructor(Nca,Oca,Pca,Qca){super(Nca,Oca,Pca,Qca)}interpolate_(Rca){return this.copySampleValue_(Rca-1)}}class Sca{constructor(Tca,Uca,Vca,Wca){if(void 0===Tca)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===Uca||0===Uca.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+Tca);this.name=Tca,this.times=rba.convertArray(Uca,this.TimeBufferType),this.values=rba.convertArray(Vca,this.ValueBufferType),this.setInterpolation(Wca||this.DefaultInterpolation)}static toJSON(Xca){const Yca=Xca.constructor;let Zca;if(Yca.toJSON!==this.toJSON)Zca=Yca.toJSON(Xca);else{Zca={name:Xca.name,times:rba.convertArray(Xca.times,Array),values:rba.convertArray(Xca.values,Array)};const $ca=Xca.getInterpolation();$ca!==Xca.DefaultInterpolation&&(Zca.interpolation=$ca)}return Zca.type=Xca.ValueTypeName,Zca}InterpolantFactoryMethodDiscrete(_ca){return new Mca(this.times,this.values,this.getValueSize(),_ca)}InterpolantFactoryMethodLinear(ada){return new vca(this.times,this.values,this.getValueSize(),ada)}InterpolantFactoryMethodSmooth(bda){return new Nba(this.times,this.values,this.getValueSize(),bda)}setInterpolation(cda){let dda;switch(cda){case 2300:dda=this.InterpolantFactoryMethodDiscrete;break;case 2301:dda=this.InterpolantFactoryMethodLinear;break;case 2302:dda=this.InterpolantFactoryMethodSmooth;break}if(void 0===dda){const eda="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant)if(cda!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(eda);return console.warn("THREE.KeyframeTrack:",eda),this}return this.createInterpolant=dda,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}}getValueSize(){return this.values.length/this.times.length}shift(fda){if(0!==fda){const gda=this.times;for(let hda=0,ida=gda.length;hda!==ida;++hda)gda[hda]+=fda}return this}scale(jda){if(1!==jda){const kda=this.times;for(let lda=0,mda=kda.length;lda!==mda;++lda)kda[lda]*=jda}return this}trim(nda,oda){const pda=this.times,qda=pda.length;let rda=0,sda=qda-1;for(;rda!==qda&&pda[rda]<nda;)++rda;for(;-1!==sda&&pda[sda]>oda;)--sda;if(++sda,0!==rda||sda!==qda){rda>=sda&&(rda=(sda=Math.max(sda,1))-1);const tda=this.getValueSize();this.times=rba.arraySlice(pda,rda,sda),this.values=rba.arraySlice(this.values,rda*tda,sda*tda)}return this}validate(){let uda=!0;const vda=this.getValueSize();vda-Math.floor(vda)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),uda=!1);const wda=this.times,xda=this.values,yda=wda.length;0===yda&&(console.error("THREE.KeyframeTrack: Track is empty.",this),uda=!1);let zda=null;for(let Ada=0;Ada!==yda;Ada++){const Bda=wda[Ada];if("number"==typeof Bda&&isNaN(Bda)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,Ada,Bda),uda=!1;break}if(null!==zda&&zda>Bda){console.error("THREE.KeyframeTrack: Out of order keys.",this,Ada,Bda,zda),uda=!1;break}zda=Bda}if(void 0!==xda&&rba.isTypedArray(xda))for(let Cda=0,Dda=xda.length;Cda!==Dda;++Cda){const Eda=xda[Cda];if(isNaN(Eda)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,Cda,Eda),uda=!1;break}}return uda}optimize(){const Fda=rba.arraySlice(this.times),Gda=rba.arraySlice(this.values),Hda=this.getValueSize(),Ida=2302===this.getInterpolation(),Jda=Fda.length-1;let Kda=1;for(let Lda=1;Lda<Jda;++Lda){let Mda=!1;const Nda=Fda[Lda],Oda=Fda[Lda+1];if(Nda!==Oda&&(1!==Lda||Nda!==Fda[0]))if(Ida)Mda=!0;else{const Pda=Lda*Hda,Qda=Pda-Hda,Rda=Pda+Hda;for(let Sda=0;Sda!==Hda;++Sda){const Tda=Gda[Pda+Sda];if(Tda!==Gda[Qda+Sda]||Tda!==Gda[Rda+Sda]){Mda=!0;break}}}if(Mda){if(Lda!==Kda){Fda[Kda]=Fda[Lda];const Uda=Lda*Hda,Vda=Kda*Hda;for(let Wda=0;Wda!==Hda;++Wda)Gda[Vda+Wda]=Gda[Uda+Wda]}++Kda}}if(Jda>0){Fda[Kda]=Fda[Jda];for(let Xda=Jda*Hda,Yda=Kda*Hda,Zda=0;Zda!==Hda;++Zda)Gda[Yda+Zda]=Gda[Xda+Zda];++Kda}return Kda!==Fda.length?(this.times=rba.arraySlice(Fda,0,Kda),this.values=rba.arraySlice(Gda,0,Kda*Hda)):(this.times=Fda,this.values=Gda),this}clone(){const $da=rba.arraySlice(this.times,0),_da=rba.arraySlice(this.values,0),aea=this.constructor,bea=new aea(this.name,$da,_da);return bea.createInterpolant=this.createInterpolant,bea}}Sca.prototype.TimeBufferType=Float32Array,Sca.prototype.ValueBufferType=Float32Array,Sca.prototype.DefaultInterpolation=2301;class cea extends Sca{}cea.prototype.ValueTypeName="bool",cea.prototype.ValueBufferType=Array,cea.prototype.DefaultInterpolation=2300,cea.prototype.InterpolantFactoryMethodLinear=void 0,cea.prototype.InterpolantFactoryMethodSmooth=void 0;class dea extends Sca{}dea.prototype.ValueTypeName="color";class eea extends Sca{}eea.prototype.ValueTypeName="number";class fea extends sba{constructor(gea,hea,iea,jea){super(gea,hea,iea,jea)}interpolate_(kea,lea,mea,nea){const oea=this.resultBuffer,pea=this.sampleValues,qea=this.valueSize,rea=(mea-lea)/(nea-lea);let sea=kea*qea;for(let tea=sea+qea;sea!==tea;sea+=4)qh.slerpFlat(oea,0,pea,sea-qea,pea,sea,rea);return oea}}class uea extends Sca{InterpolantFactoryMethodLinear(vea){return new fea(this.times,this.values,this.getValueSize(),vea)}}uea.prototype.ValueTypeName="quaternion",uea.prototype.DefaultInterpolation=2301,uea.prototype.InterpolantFactoryMethodSmooth=void 0;class wea extends Sca{}wea.prototype.ValueTypeName="string",wea.prototype.ValueBufferType=Array,wea.prototype.DefaultInterpolation=2300,wea.prototype.InterpolantFactoryMethodLinear=void 0,wea.prototype.InterpolantFactoryMethodSmooth=void 0;class xea extends Sca{}xea.prototype.ValueTypeName="vector";class yea{constructor(zea,Aea=-1,Bea,Cea=2500){this.name=zea,this.tracks=Bea,this.duration=Aea,this.blendMode=Cea,this.uuid=E(),this.duration<0&&this.resetDuration()}static parse(Dea){const Eea=[],Fea=Dea.tracks,Gea=1/(Dea.fps||1);for(let Hea=0,Iea=Fea.length;Hea!==Iea;++Hea)Eea.push(Wfa(Fea[Hea]).scale(Gea));const Jea=new this(Dea.name,Dea.duration,Eea,Dea.blendMode);return Jea.uuid=Dea.uuid,Jea}static toJSON(Kea){const Lea=[],Mea=Kea.tracks,Nea={name:Kea.name,duration:Kea.duration,tracks:Lea,uuid:Kea.uuid,blendMode:Kea.blendMode};for(let Oea=0,Pea=Mea.length;Oea!==Pea;++Oea)Lea.push(Sca.toJSON(Mea[Oea]));return Nea}static CreateFromMorphTargetSequence(Qea,Rea,Sea,Tea){const Uea=Rea.length,Vea=[];for(let Wea=0;Wea<Uea;Wea++){let Xea=[],Yea=[];Xea.push((Wea+Uea-1)%Uea,Wea,(Wea+1)%Uea),Yea.push(0,1,0);const Zea=rba.getKeyframeOrder(Xea);Xea=rba.sortedArray(Xea,1,Zea),Yea=rba.sortedArray(Yea,1,Zea),Tea||0!==Xea[0]||(Xea.push(Uea),Yea.push(Yea[0])),Vea.push(new eea(".morphTargetInfluences["+Rea[Wea].name+"]",Xea,Yea).scale(1/Sea))}return new this(Qea,-1,Vea)}static findByName($ea,_ea){let afa=$ea;if(!Array.isArray($ea)){const bfa=$ea;afa=bfa.geometry&&bfa.geometry.animations||bfa.animations}for(let cfa=0;cfa<afa.length;cfa++)if(afa[cfa].name===_ea)return afa[cfa];return null}static CreateClipsFromMorphTargetSequences(dfa,efa,ffa){const gfa={},hfa=/^([\w-]*?)([\d]+)$/;for(let ifa=0,jfa=dfa.length;ifa<jfa;ifa++){const kfa=dfa[ifa],lfa=kfa.name.match(hfa);if(lfa&&lfa.length>1){const mfa=lfa[1];let nfa=gfa[mfa];nfa||(gfa[mfa]=nfa=[]),nfa.push(kfa)}}const ofa=[];for(const pfa in gfa)ofa.push(this.CreateFromMorphTargetSequence(pfa,gfa[pfa],efa,ffa));return ofa}static parseAnimation(qfa,rfa){if(!qfa)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const sfa=function(a,b,c,d,e){if(0!==c.length){const f=[],g=[];rba.flattenJSON(c,f,g,d),0!==f.length&&e.push(new a(b,f,g))}},tfa=[],ufa=qfa.name||"default",vfa=qfa.fps||30,wfa=qfa.blendMode;let xfa=qfa.length|| -1;const yfa=qfa.hierarchy||[];for(let zfa=0;zfa<yfa.length;zfa++){const Afa=yfa[zfa].keys;if(Afa&&0!==Afa.length)if(Afa[0].morphTargets){const Bfa={};let Cfa;for(Cfa=0;Cfa<Afa.length;Cfa++)if(Afa[Cfa].morphTargets)for(let Dfa=0;Dfa<Afa[Cfa].morphTargets.length;Dfa++)Bfa[Afa[Cfa].morphTargets[Dfa]]=-1;for(const Efa in Bfa){const Ffa=[],Gfa=[];for(let Hfa=0;Hfa!==Afa[Cfa].morphTargets.length;++Hfa){const Ifa=Afa[Cfa];Ffa.push(Ifa.time),Gfa.push(Ifa.morphTarget===Efa?1:0)}tfa.push(new eea(".morphTargetInfluence["+Efa+"]",Ffa,Gfa))}xfa=Bfa.length*(vfa||1)}else{const Jfa=".bones["+rfa[zfa].name+"]";sfa(xea,Jfa+".position",Afa,"pos",tfa),sfa(uea,Jfa+".quaternion",Afa,"rot",tfa),sfa(xea,Jfa+".scale",Afa,"scl",tfa)}}if(0===tfa.length)return null;const Kfa=new this(ufa,xfa,tfa,wfa);return Kfa}resetDuration(){const Lfa=this.tracks;let Mfa=0;for(let Nfa=0,Ofa=Lfa.length;Nfa!==Ofa;++Nfa){const Pfa=this.tracks[Nfa];Mfa=Math.max(Mfa,Pfa.times[Pfa.times.length-1])}return this.duration=Mfa,this}trim(){for(let Qfa=0;Qfa<this.tracks.length;Qfa++)this.tracks[Qfa].trim(0,this.duration);return this}validate(){let Rfa=!0;for(let Sfa=0;Sfa<this.tracks.length;Sfa++)Rfa=Rfa&&this.tracks[Sfa].validate();return Rfa}optimize(){for(let Tfa=0;Tfa<this.tracks.length;Tfa++)this.tracks[Tfa].optimize();return this}clone(){const Ufa=[];for(let Vfa=0;Vfa<this.tracks.length;Vfa++)Ufa.push(this.tracks[Vfa].clone());return new this.constructor(this.name,this.duration,Ufa,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Wfa(a){if(void 0===a.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const b=function(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return eea;case"vector":case"vector2":case"vector3":case"vector4":return xea;case"color":return dea;case"quaternion":return uea;case"bool":case"boolean":return cea;case"string":return wea}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+a)}(a.type);if(void 0===a.times){const c=[],d=[];rba.flattenJSON(a.keys,c,d,"value"),a.times=c,a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)}const Xfa={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},Yfa=new class{constructor(Zfa,$fa,_fa){const aga=this;let bga=!1,cga=0,dga=0,ega;const fga=[];this.onStart=void 0,this.onLoad=Zfa,this.onProgress=$fa,this.onError=_fa,this.itemStart=function(a){dga++,!1===bga&& void 0!==aga.onStart&&aga.onStart(a,cga,dga),bga=!0},this.itemEnd=function(a){cga++,void 0!==aga.onProgress&&aga.onProgress(a,cga,dga),cga===dga&&(bga=!1,void 0!==aga.onLoad&&aga.onLoad())},this.itemError=function(a){void 0!==aga.onError&&aga.onError(a)},this.resolveURL=function(a){return ega?ega(a):a},this.setURLModifier=function(a){return ega=a,this},this.addHandler=function(a,b){return fga.push(a,b),this},this.removeHandler=function(a){const b=fga.indexOf(a);return -1!==b&&fga.splice(b,2),this},this.getHandler=function(a){for(let b=0,c=fga.length;b<c;b+=2){const d=fga[b],e=fga[b+1];if(d.global&&(d.lastIndex=0),d.test(a))return e}return null}}}();class gga{constructor(hga){this.manager=void 0!==hga?hga:Yfa,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(iga,jga){const kga=this;return new Promise(function(a,b){kga.load(iga,a,jga,b)})}parse(){}setCrossOrigin(lga){return this.crossOrigin=lga,this}setWithCredentials(mga){return this.withCredentials=mga,this}setPath(nga){return this.path=nga,this}setResourcePath(oga){return this.resourcePath=oga,this}setRequestHeader(pga){return this.requestHeader=pga,this}}const qga={};class rga extends gga{constructor(sga){super(sga)}load(tga,uga,vga,wga){void 0===tga&&(tga=""),void 0!==this.path&&(tga=this.path+tga),tga=this.manager.resolveURL(tga);const xga=Xfa.get(tga);if(void 0!==xga)return this.manager.itemStart(tga),setTimeout(()=>{uga&&uga(xga),this.manager.itemEnd(tga)},0),xga;if(void 0!==qga[tga]){qga[tga].push({onLoad:uga,onProgress:vga,onError:wga});return}qga[tga]=[],qga[tga].push({onLoad:uga,onProgress:vga,onError:wga});const yga=new Request(tga,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),zga=this.mimeType,Aga=this.responseType;fetch(yga).then(a=>{if(200===a.status||0===a.status){if(0===a.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream|| void 0===a.body.getReader)return a;const b=qga[tga],c=a.body.getReader(),d=a.headers.get("Content-Length"),e=d?parseInt(d):0,f=0!==e;let g=0;const h=new ReadableStream({start(a){d();function d(){c.read().then(({done:c,value:h})=>{if(c)a.close();else{g+=h.byteLength;const i=new ProgressEvent("progress",{lengthComputable:f,loaded:g,total:e});for(let j=0,k=b.length;j<k;j++){const l=b[j];l.onProgress&&l.onProgress(i)}a.enqueue(h),d()}})}}});return new Response(h)}throw Error(`fetch for "${a.url}" responded with ${a.status}: ${a.statusText}`)}).then(a=>{switch(Aga){case"arraybuffer":return a.arrayBuffer();case"blob":return a.blob();case"document":return a.text().then(a=>{const b=new DOMParser();return b.parseFromString(a,zga)});case"json":return a.json();default:if(void 0===zga)return a.text();{const b=/charset="?([^;"\s]*)"?/i,c=b.exec(zga),d=c&&c[1]?c[1].toLowerCase():void 0,e=new TextDecoder(d);return a.arrayBuffer().then(a=>e.decode(a))}}}).then(a=>{Xfa.add(tga,a);const b=qga[tga];delete qga[tga];for(let c=0,d=b.length;c<d;c++){const e=b[c];e.onLoad&&e.onLoad(a)}}).catch(a=>{const b=qga[tga];if(void 0===b)throw this.manager.itemError(tga),a;delete qga[tga];for(let c=0,d=b.length;c<d;c++){const e=b[c];e.onError&&e.onError(a)}this.manager.itemError(tga)}).finally(()=>{this.manager.itemEnd(tga)}),this.manager.itemStart(tga)}setResponseType(Bga){return this.responseType=Bga,this}setMimeType(Cga){return this.mimeType=Cga,this}}class Dga extends gga{constructor(Ega){super(Ega)}load(Fga,Gga,Hga,Iga){void 0!==this.path&&(Fga=this.path+Fga),Fga=this.manager.resolveURL(Fga);const Jga=this,Kga=Xfa.get(Fga);if(void 0!==Kga)return Jga.manager.itemStart(Fga),setTimeout(function(){Gga&&Gga(Kga),Jga.manager.itemEnd(Fga)},0),Kga;const Lga=ed("img");function Mga(){Oga(),Xfa.add(Fga,this),Gga&&Gga(this),Jga.manager.itemEnd(Fga)}function Nga(a){Oga(),Iga&&Iga(a),Jga.manager.itemError(Fga),Jga.manager.itemEnd(Fga)}function Oga(){Lga.removeEventListener("load",Mga,!1),Lga.removeEventListener("error",Nga,!1)}return Lga.addEventListener("load",Mga,!1),Lga.addEventListener("error",Nga,!1),"data:"!==Fga.substr(0,5)&& void 0!==this.crossOrigin&&(Lga.crossOrigin=this.crossOrigin),Jga.manager.itemStart(Fga),Lga.src=Fga,Lga}}class Pga extends gga{constructor(Qga){super(Qga)}load(Rga,Sga,Tga,Uga){const Vga=new SI(),Wga=new Dga(this.manager);Wga.setCrossOrigin(this.crossOrigin),Wga.setPath(this.path);let Xga=0;function Yga(a){Wga.load(Rga[a],function(b){Vga.images[a]=b,Xga++,6===Xga&&(Vga.needsUpdate=!0,Sga&&Sga(Vga))},void 0,Uga)}for(let Zga=0;Zga<Rga.length;++Zga)Yga(Zga);return Vga}}class $ga extends gga{constructor(_ga){super(_ga)}load(aha,bha,cha,dha){const eha=new Ne(),fha=new Dga(this.manager);return fha.setCrossOrigin(this.crossOrigin),fha.setPath(this.path),fha.load(aha,function(a){eha.image=a,eha.needsUpdate=!0,void 0!==bha&&bha(eha)},cha,dha),eha}}class gha extends Aw{constructor(hha,iha=1){super(),this.type="Light",this.color=new ld(hha),this.intensity=iha}dispose(){}copy(jha){return super.copy(jha),this.color.copy(jha.color),this.intensity=jha.intensity,this}toJSON(kha){const lha=super.toJSON(kha);return lha.object.color=this.color.getHex(),lha.object.intensity=this.intensity,void 0!==this.groundColor&&(lha.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(lha.object.distance=this.distance),void 0!==this.angle&&(lha.object.angle=this.angle),void 0!==this.decay&&(lha.object.decay=this.decay),void 0!==this.penumbra&&(lha.object.penumbra=this.penumbra),void 0!==this.shadow&&(lha.object.shadow=this.shadow.toJSON()),lha}}gha.prototype.isLight=!0,(class extends gha{constructor(mha,nha,oha){super(mha,oha),this.type="HemisphereLight",this.position.copy(Aw.DefaultUp),this.updateMatrix(),this.groundColor=new ld(nha)}copy(pha){return gha.prototype.copy.call(this,pha),this.groundColor.copy(pha.groundColor),this}}).prototype.isHemisphereLight=!0;const qha=new pq(),rha=new Xj(),sha=new Xj();class tha{constructor(uha){this.camera=uha,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new L(512,512),this.map=null,this.mapPass=null,this.matrix=new pq(),this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new kK(),this._frameExtents=new L(1,1),this._viewportCount=1,this._viewports=[new hf(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(vha){const wha=this.camera,xha=this.matrix;rha.setFromMatrixPosition(vha.matrixWorld),wha.position.copy(rha),sha.setFromMatrixPosition(vha.target.matrixWorld),wha.lookAt(sha),wha.updateMatrixWorld(),qha.multiplyMatrices(wha.projectionMatrix,wha.matrixWorldInverse),this._frustum.setFromProjectionMatrix(qha),xha.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1),xha.multiply(wha.projectionMatrix),xha.multiply(wha.matrixWorldInverse)}getViewport(yha){return this._viewports[yha]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(zha){return this.camera=zha.camera.clone(),this.bias=zha.bias,this.radius=zha.radius,this.mapSize.copy(zha.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const Aha={};return 0!==this.bias&&(Aha.bias=this.bias),0!==this.normalBias&&(Aha.normalBias=this.normalBias),1!==this.radius&&(Aha.radius=this.radius),(512!==this.mapSize.x||512!==this.mapSize.y)&&(Aha.mapSize=this.mapSize.toArray()),Aha.camera=this.camera.toJSON(!1).object,delete Aha.camera.matrix,Aha}}class Bha extends tha{constructor(){super(new XH(50,1,0.5,500)),this.focus=1}updateMatrices(Cha){const Dha=this.camera,Eha=2*D*Cha.angle*this.focus,Fha=this.mapSize.width/this.mapSize.height,Gha=Cha.distance||Dha.far;(Eha!==Dha.fov||Fha!==Dha.aspect||Gha!==Dha.far)&&(Dha.fov=Eha,Dha.aspect=Fha,Dha.far=Gha,Dha.updateProjectionMatrix()),super.updateMatrices(Cha)}copy(Hha){return super.copy(Hha),this.focus=Hha.focus,this}}Bha.prototype.isSpotLightShadow=!0,(class extends gha{constructor(Iha,Jha,Kha=0,Lha=Math.PI/3,Mha=0,Nha=1){super(Iha,Jha),this.type="SpotLight",this.position.copy(Aw.DefaultUp),this.updateMatrix(),this.target=new Aw(),this.distance=Kha,this.angle=Lha,this.penumbra=Mha,this.decay=Nha,this.shadow=new Bha()}get power(){return this.intensity*Math.PI}set power(Oha){this.intensity=Oha/Math.PI}dispose(){this.shadow.dispose()}copy(Pha){return super.copy(Pha),this.distance=Pha.distance,this.angle=Pha.angle,this.penumbra=Pha.penumbra,this.decay=Pha.decay,this.target=Pha.target.clone(),this.shadow=Pha.shadow.clone(),this}}).prototype.isSpotLight=!0;const Qha=new pq(),Rha=new Xj(),Sha=new Xj();class Tha extends tha{constructor(){super(new XH(90,1,0.5,500)),this._frameExtents=new L(4,2),this._viewportCount=6,this._viewports=[new hf(2,1,1,1),new hf(0,1,1,1),new hf(3,1,1,1),new hf(1,1,1,1),new hf(3,0,1,1),new hf(1,0,1,1)],this._cubeDirections=[new Xj(1,0,0),new Xj(-1,0,0),new Xj(0,0,1),new Xj(0,0,-1),new Xj(0,1,0),new Xj(0,-1,0)],this._cubeUps=[new Xj(0,1,0),new Xj(0,1,0),new Xj(0,1,0),new Xj(0,1,0),new Xj(0,0,1),new Xj(0,0,-1)]}updateMatrices(Uha,Vha=0){const Wha=this.camera,Xha=this.matrix,Yha=Uha.distance||Wha.far;Yha!==Wha.far&&(Wha.far=Yha,Wha.updateProjectionMatrix()),Rha.setFromMatrixPosition(Uha.matrixWorld),Wha.position.copy(Rha),Sha.copy(Wha.position),Sha.add(this._cubeDirections[Vha]),Wha.up.copy(this._cubeUps[Vha]),Wha.lookAt(Sha),Wha.updateMatrixWorld(),Xha.makeTranslation(-Rha.x,-Rha.y,-Rha.z),Qha.multiplyMatrices(Wha.projectionMatrix,Wha.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Qha)}}Tha.prototype.isPointLightShadow=!0,(class extends gha{constructor(Zha,$ha,_ha=0,aia=1){super(Zha,$ha),this.type="PointLight",this.distance=_ha,this.decay=aia,this.shadow=new Tha()}get power(){return 4*this.intensity*Math.PI}set power(bia){this.intensity=bia/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(cia){return super.copy(cia),this.distance=cia.distance,this.decay=cia.decay,this.shadow=cia.shadow.clone(),this}}).prototype.isPointLight=!0;class dia extends tha{constructor(){super(new VL(-5,5,5,-5,0.5,500))}}dia.prototype.isDirectionalLightShadow=!0;class eia extends gha{constructor(fia,gia){super(fia,gia),this.type="DirectionalLight",this.position.copy(Aw.DefaultUp),this.updateMatrix(),this.target=new Aw(),this.shadow=new dia()}dispose(){this.shadow.dispose()}copy(hia){return super.copy(hia),this.target=hia.target.clone(),this.shadow=hia.shadow.clone(),this}}eia.prototype.isDirectionalLight=!0,(class extends gha{constructor(iia,jia){super(iia,jia),this.type="AmbientLight"}}).prototype.isAmbientLight=!0,(class extends gha{constructor(kia,lia,mia=10,nia=10){super(kia,lia),this.type="RectAreaLight",this.width=mia,this.height=nia}get power(){return this.intensity*this.width*this.height*Math.PI}set power(oia){this.intensity=oia/(this.width*this.height*Math.PI)}copy(pia){return super.copy(pia),this.width=pia.width,this.height=pia.height,this}toJSON(qia){const ria=super.toJSON(qia);return ria.object.width=this.width,ria.object.height=this.height,ria}}).prototype.isRectAreaLight=!0;class sia{constructor(){this.coefficients=[];for(let tia=0;tia<9;tia++)this.coefficients.push(new Xj())}set(uia){for(let via=0;via<9;via++)this.coefficients[via].copy(uia[via]);return this}zero(){for(let wia=0;wia<9;wia++)this.coefficients[wia].set(0,0,0);return this}getAt(xia,yia){const zia=xia.x,Aia=xia.y,Bia=xia.z,Cia=this.coefficients;return yia.copy(Cia[0]).multiplyScalar(0.282095),yia.addScaledVector(Cia[1],0.488603*Aia),yia.addScaledVector(Cia[2],0.488603*Bia),yia.addScaledVector(Cia[3],0.488603*zia),yia.addScaledVector(Cia[4],1.092548*(zia*Aia)),yia.addScaledVector(Cia[5],1.092548*(Aia*Bia)),yia.addScaledVector(Cia[6],0.315392*(3*Bia*Bia-1)),yia.addScaledVector(Cia[7],1.092548*(zia*Bia)),yia.addScaledVector(Cia[8],0.546274*(zia*zia-Aia*Aia)),yia}getIrradianceAt(Dia,Eia){const Fia=Dia.x,Gia=Dia.y,Hia=Dia.z,Iia=this.coefficients;return Eia.copy(Iia[0]).multiplyScalar(0.886227),Eia.addScaledVector(Iia[1],1.023328*Gia),Eia.addScaledVector(Iia[2],1.023328*Hia),Eia.addScaledVector(Iia[3],1.023328*Fia),Eia.addScaledVector(Iia[4],0.858086*Fia*Gia),Eia.addScaledVector(Iia[5],0.858086*Gia*Hia),Eia.addScaledVector(Iia[6],0.743125*Hia*Hia-0.247708),Eia.addScaledVector(Iia[7],0.858086*Fia*Hia),Eia.addScaledVector(Iia[8],0.429043*(Fia*Fia-Gia*Gia)),Eia}add(Jia){for(let Kia=0;Kia<9;Kia++)this.coefficients[Kia].add(Jia.coefficients[Kia]);return this}addScaledSH(Lia,Mia){for(let Nia=0;Nia<9;Nia++)this.coefficients[Nia].addScaledVector(Lia.coefficients[Nia],Mia);return this}scale(Oia){for(let Pia=0;Pia<9;Pia++)this.coefficients[Pia].multiplyScalar(Oia);return this}lerp(Qia,Ria){for(let Sia=0;Sia<9;Sia++)this.coefficients[Sia].lerp(Qia.coefficients[Sia],Ria);return this}equals(Tia){for(let Uia=0;Uia<9;Uia++)if(!this.coefficients[Uia].equals(Tia.coefficients[Uia]))return!1;return!0}copy(Via){return this.set(Via.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(Wia,Xia=0){const Yia=this.coefficients;for(let Zia=0;Zia<9;Zia++)Yia[Zia].fromArray(Wia,Xia+3*Zia);return this}toArray($ia=[],_ia=0){const aja=this.coefficients;for(let bja=0;bja<9;bja++)aja[bja].toArray($ia,_ia+3*bja);return $ia}static getBasisAt(cja,dja){const eja=cja.x,fja=cja.y,gja=cja.z;dja[0]=0.282095,dja[1]=0.488603*fja,dja[2]=0.488603*gja,dja[3]=0.488603*eja,dja[4]=1.092548*eja*fja,dja[5]=1.092548*fja*gja,dja[6]=0.315392*(3*gja*gja-1),dja[7]=1.092548*eja*gja,dja[8]=0.546274*(eja*eja-fja*fja)}}sia.prototype.isSphericalHarmonics3=!0;class hja extends gha{constructor(ija=new sia(),jja=1){super(void 0,jja),this.sh=ija}copy(kja){return super.copy(kja),this.sh.copy(kja.sh),this}fromJSON(lja){return this.intensity=lja.intensity,this.sh.fromArray(lja.sh),this}toJSON(mja){const nja=super.toJSON(mja);return nja.object.sh=this.sh.toArray(),nja}}hja.prototype.isLightProbe=!0;class oja{static decodeText(pja){if("undefined"!=typeof TextDecoder)return new TextDecoder().decode(pja);let qja="";for(let rja=0,sja=pja.length;rja<sja;rja++)qja+=String.fromCharCode(pja[rja]);try{return decodeURIComponent(escape(qja))}catch(tja){return qja}}static extractUrlBase(uja){const vja=uja.lastIndexOf("/");return -1===vja?"./":uja.substr(0,vja+1)}static resolveURL(wja,xja){return"string"!=typeof wja||""===wja?"":(/^https?:\/\//i.test(xja)&&/^\//.test(wja)&&(xja=xja.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(wja))?wja:/^data:.*,.*$/i.test(wja)?wja:/^blob:.*$/i.test(wja)?wja:xja+wja}}(class extends uC{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(yja){return super.copy(yja),this.instanceCount=yja.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const zja=super.toJSON(this);return zja.instanceCount=this.instanceCount,zja.isInstancedBufferGeometry=!0,zja}}).prototype.isInstancedBufferGeometry=!0,(class extends gga{constructor(Aja){super(Aja),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(Bja){return this.options=Bja,this}load(Cja,Dja,Eja,Fja){void 0===Cja&&(Cja=""),void 0!==this.path&&(Cja=this.path+Cja),Cja=this.manager.resolveURL(Cja);const Gja=this,Hja=Xfa.get(Cja);if(void 0!==Hja)return Gja.manager.itemStart(Cja),setTimeout(function(){Dja&&Dja(Hja),Gja.manager.itemEnd(Cja)},0),Hja;const Ija={};Ija.credentials="anonymous"===this.crossOrigin?"same-origin":"include",Ija.headers=this.requestHeader,fetch(Cja,Ija).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,Object.assign(Gja.options,{colorSpaceConversion:"none"}))}).then(function(a){Xfa.add(Cja,a),Dja&&Dja(a),Gja.manager.itemEnd(Cja)}).catch(function(a){Fja&&Fja(a),Gja.manager.itemError(Cja),Gja.manager.itemEnd(Cja)}),Gja.manager.itemStart(Cja)}}).prototype.isImageBitmapLoader=!0;let Jja;const Kja={getContext:function(){return void 0===Jja&&(Jja=new(window.AudioContext||window.webkitAudioContext)()),Jja},setContext:function(a){Jja=a}};class Lja extends gga{constructor(Mja){super(Mja)}load(Nja,Oja,Pja,Qja){const Rja=this,Sja=new rga(this.manager);Sja.setResponseType("arraybuffer"),Sja.setPath(this.path),Sja.setRequestHeader(this.requestHeader),Sja.setWithCredentials(this.withCredentials),Sja.load(Nja,function(a){try{const b=a.slice(0),c=Kja.getContext();c.decodeAudioData(b,function(a){Oja(a)})}catch(d){Qja?Qja(d):console.error(d),Rja.manager.itemError(Nja)}},Pja,Qja)}}(class extends hja{constructor(Tja,Uja,Vja=1){super(void 0,Vja);const Wja=new ld().set(Tja),Xja=new ld().set(Uja),Yja=new Xj(Wja.r,Wja.g,Wja.b),Zja=new Xj(Xja.r,Xja.g,Xja.b),$ja=Math.sqrt(Math.PI);this.sh.coefficients[0].copy(Yja).add(Zja).multiplyScalar($ja),this.sh.coefficients[1].copy(Yja).sub(Zja).multiplyScalar($ja*Math.sqrt(0.75))}}).prototype.isHemisphereLightProbe=!0,(class extends hja{constructor(_ja,aka=1){super(void 0,aka);const bka=new ld().set(_ja);this.sh.coefficients[0].set(bka.r,bka.g,bka.b).multiplyScalar(2*Math.sqrt(Math.PI))}}).prototype.isAmbientLightProbe=!0,new pq(),new pq(),new pq(),new Xj(),new qh(),new Xj(),new Xj(),new Xj(),new qh(),new Xj(),new Xj();class cka{constructor(dka,eka,fka){this.binding=dka,this.valueSize=fka;let gka,hka,ika;switch(eka){case"quaternion":gka=this._slerp,hka=this._slerpAdditive,ika=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*fka),this._workIndex=5;break;case"string":case"bool":gka=this._select,hka=this._select,ika=this._setAdditiveIdentityOther,this.buffer=new Array(5*fka);break;default:gka=this._lerp,hka=this._lerpAdditive,ika=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*fka)}this._mixBufferRegion=gka,this._mixBufferRegionAdditive=hka,this._setIdentity=ika,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(jka,kka){const lka=this.buffer,mka=this.valueSize,nka=jka*mka+mka;let oka=this.cumulativeWeight;if(0===oka){for(let pka=0;pka!==mka;++pka)lka[nka+pka]=lka[pka];oka=kka}else{oka+=kka;const qka=kka/oka;this._mixBufferRegion(lka,nka,0,qka,mka)}this.cumulativeWeight=oka}accumulateAdditive(rka){const ska=this.buffer,tka=this.valueSize,uka=tka*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(ska,uka,0,rka,tka),this.cumulativeWeightAdditive+=rka}apply(vka){const wka=this.valueSize,xka=this.buffer,yka=vka*wka+wka,zka=this.cumulativeWeight,Aka=this.cumulativeWeightAdditive,Bka=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,zka<1){const Cka=wka*this._origIndex;this._mixBufferRegion(xka,yka,Cka,1-zka,wka)}Aka>0&&this._mixBufferRegionAdditive(xka,yka,this._addIndex*wka,1,wka);for(let Dka=wka,Eka=wka+wka;Dka!==Eka;++Dka)if(xka[Dka]!==xka[Dka+wka]){Bka.setValue(xka,yka);break}}saveOriginalState(){const Fka=this.binding,Gka=this.buffer,Hka=this.valueSize,Ika=Hka*this._origIndex;Fka.getValue(Gka,Ika);for(let Jka=Hka,Kka=Ika;Jka!==Kka;++Jka)Gka[Jka]=Gka[Ika+Jka%Hka];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const Lka=3*this.valueSize;this.binding.setValue(this.buffer,Lka)}_setAdditiveIdentityNumeric(){const Mka=this._addIndex*this.valueSize,Nka=Mka+this.valueSize;for(let Oka=Mka;Oka<Nka;Oka++)this.buffer[Oka]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const Pka=this._origIndex*this.valueSize,Qka=this._addIndex*this.valueSize;for(let Rka=0;Rka<this.valueSize;Rka++)this.buffer[Qka+Rka]=this.buffer[Pka+Rka]}_select(Ska,Tka,Uka,Vka,Wka){if(Vka>=0.5)for(let Xka=0;Xka!==Wka;++Xka)Ska[Tka+Xka]=Ska[Uka+Xka]}_slerp(Yka,Zka,$ka,_ka){qh.slerpFlat(Yka,Zka,Yka,Zka,Yka,$ka,_ka)}_slerpAdditive(ala,bla,cla,dla,ela){const fla=this._workIndex*ela;qh.multiplyQuaternionsFlat(ala,fla,ala,bla,ala,cla),qh.slerpFlat(ala,bla,ala,bla,ala,fla,dla)}_lerp(gla,hla,ila,jla,kla){const lla=1-jla;for(let mla=0;mla!==kla;++mla){const nla=hla+mla;gla[nla]=gla[nla]*lla+gla[ila+mla]*jla}}_lerpAdditive(ola,pla,qla,rla,sla){for(let tla=0;tla!==sla;++tla){const ula=pla+tla;ola[ula]=ola[ula]+ola[qla+tla]*rla}}}const vla="\\[\\]\\.:\\/",wla=new RegExp("["+vla+"]","g"),xla="[^"+vla+"]",yla="[^"+vla.replace("\\.","")+"]",zla=/((?:WC+[\/:])*)/.source.replace("WC",xla),Ala=/(WCOD+)?/.source.replace("WCOD",yla),Bla=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",xla),Cla=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",xla),Dla=new RegExp("^"+zla+Ala+Bla+Cla+"$"),Ela=["material","materials","bones"];class Fla{constructor(Gla,Hla,Ila){this.path=Hla,this.parsedPath=Ila||Fla.parseTrackName(Hla),this.node=Fla.findNode(Gla,this.parsedPath.nodeName)||Gla,this.rootNode=Gla,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(Jla,Kla,Lla){return Jla&&Jla.isAnimationObjectGroup?new Fla.Composite(Jla,Kla,Lla):new Fla(Jla,Kla,Lla)}static sanitizeNodeName(Mla){return Mla.replace(/\s/g,"_").replace(wla,"")}static parseTrackName(Nla){const Ola=Dla.exec(Nla);if(!Ola)throw new Error("PropertyBinding: Cannot parse trackName: "+Nla);const Pla={nodeName:Ola[2],objectName:Ola[3],objectIndex:Ola[4],propertyName:Ola[5],propertyIndex:Ola[6]},Qla=Pla.nodeName&&Pla.nodeName.lastIndexOf(".");if(void 0!==Qla&& -1!==Qla){const Rla=Pla.nodeName.substring(Qla+1);-1!==Ela.indexOf(Rla)&&(Pla.nodeName=Pla.nodeName.substring(0,Qla),Pla.objectName=Rla)}if(null===Pla.propertyName||0===Pla.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+Nla);return Pla}static findNode(Sla,Tla){if(!Tla||""===Tla||"."===Tla|| -1===Tla||Tla===Sla.name||Tla===Sla.uuid)return Sla;if(Sla.skeleton){const Ula=Sla.skeleton.getBoneByName(Tla);if(void 0!==Ula)return Ula}if(Sla.children){const Vla=function(a){for(let b=0;b<a.length;b++){const c=a[b];if(c.name===Tla||c.uuid===Tla)return c;const d=Vla(c.children);if(d)return d}return null},Wla=Vla(Sla.children);if(Wla)return Wla}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(Xla,Yla){Xla[Yla]=this.targetObject[this.propertyName]}_getValue_array(Zla,$la){const _la=this.resolvedProperty;for(let ama=0,bma=_la.length;ama!==bma;++ama)Zla[$la++]=_la[ama]}_getValue_arrayElement(cma,dma){cma[dma]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(ema,fma){this.resolvedProperty.toArray(ema,fma)}_setValue_direct(gma,hma){this.targetObject[this.propertyName]=gma[hma]}_setValue_direct_setNeedsUpdate(ima,jma){this.targetObject[this.propertyName]=ima[jma],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(kma,lma){this.targetObject[this.propertyName]=kma[lma],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(mma,nma){const oma=this.resolvedProperty;for(let pma=0,qma=oma.length;pma!==qma;++pma)oma[pma]=mma[nma++]}_setValue_array_setNeedsUpdate(rma,sma){const tma=this.resolvedProperty;for(let uma=0,vma=tma.length;uma!==vma;++uma)tma[uma]=rma[sma++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(wma,xma){const yma=this.resolvedProperty;for(let zma=0,Ama=yma.length;zma!==Ama;++zma)yma[zma]=wma[xma++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(Bma,Cma){this.resolvedProperty[this.propertyIndex]=Bma[Cma]}_setValue_arrayElement_setNeedsUpdate(Dma,Ema){this.resolvedProperty[this.propertyIndex]=Dma[Ema],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(Fma,Gma){this.resolvedProperty[this.propertyIndex]=Fma[Gma],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(Hma,Ima){this.resolvedProperty.fromArray(Hma,Ima)}_setValue_fromArray_setNeedsUpdate(Jma,Kma){this.resolvedProperty.fromArray(Jma,Kma),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(Lma,Mma){this.resolvedProperty.fromArray(Lma,Mma),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(Nma,Oma){this.bind(),this.getValue(Nma,Oma)}_setValue_unbound(Pma,Qma){this.bind(),this.setValue(Pma,Qma)}bind(){let Rma=this.node;const Sma=this.parsedPath,Tma=Sma.objectName,Uma=Sma.propertyName;let Vma=Sma.propertyIndex;if(Rma||(Rma=Fla.findNode(this.rootNode,Sma.nodeName)||this.rootNode,this.node=Rma),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!Rma){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(Tma){let Wma=Sma.objectIndex;switch(Tma){case"materials":if(!Rma.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!Rma.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}Rma=Rma.material.materials;break;case"bones":if(!Rma.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}Rma=Rma.skeleton.bones;for(let Xma=0;Xma<Rma.length;Xma++)if(Rma[Xma].name===Wma){Wma=Xma;break}break;default:if(void 0===Rma[Tma]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}Rma=Rma[Tma]}if(void 0!==Wma){if(void 0===Rma[Wma]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,Rma);return}Rma=Rma[Wma]}}const Yma=Rma[Uma];if(void 0===Yma){const Zma=Sma.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+Zma+"."+Uma+" but it wasn't found.",Rma);return}let $ma=this.Versioning.None;this.targetObject=Rma,void 0!==Rma.needsUpdate?$ma=this.Versioning.NeedsUpdate:void 0!==Rma.matrixWorldNeedsUpdate&&($ma=this.Versioning.MatrixWorldNeedsUpdate);let _ma=this.BindingType.Direct;if(void 0!==Vma){if("morphTargetInfluences"===Uma){if(!Rma.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(Rma.geometry.isBufferGeometry){if(!Rma.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}void 0!==Rma.morphTargetDictionary[Vma]&&(Vma=Rma.morphTargetDictionary[Vma])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}_ma=this.BindingType.ArrayElement,this.resolvedProperty=Yma,this.propertyIndex=Vma}else void 0!==Yma.fromArray&& void 0!==Yma.toArray?(_ma=this.BindingType.HasFromToArray,this.resolvedProperty=Yma):Array.isArray(Yma)?(_ma=this.BindingType.EntireArray,this.resolvedProperty=Yma):this.propertyName=Uma;this.getValue=this.GetterByBindingType[_ma],this.setValue=this.SetterByBindingTypeAndVersioning[_ma][$ma]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Fla.Composite=class{constructor(ana,bna,cna){const dna=cna||Fla.parseTrackName(bna);this._targetGroup=ana,this._bindings=ana.subscribe_(bna,dna)}getValue(ena,fna){this.bind();const gna=this._targetGroup.nCachedObjects_,hna=this._bindings[gna];void 0!==hna&&hna.getValue(ena,fna)}setValue(ina,jna){const kna=this._bindings;for(let lna=this._targetGroup.nCachedObjects_,mna=kna.length;lna!==mna;++lna)kna[lna].setValue(ina,jna)}bind(){const nna=this._bindings;for(let ona=this._targetGroup.nCachedObjects_,pna=nna.length;ona!==pna;++ona)nna[ona].bind()}unbind(){const qna=this._bindings;for(let rna=this._targetGroup.nCachedObjects_,sna=qna.length;rna!==sna;++rna)qna[rna].unbind()}},Fla.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Fla.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Fla.prototype.GetterByBindingType=[Fla.prototype._getValue_direct,Fla.prototype._getValue_array,Fla.prototype._getValue_arrayElement,Fla.prototype._getValue_toArray,],Fla.prototype.SetterByBindingTypeAndVersioning=[[Fla.prototype._setValue_direct,Fla.prototype._setValue_direct_setNeedsUpdate,Fla.prototype._setValue_direct_setMatrixWorldNeedsUpdate,],[Fla.prototype._setValue_array,Fla.prototype._setValue_array_setNeedsUpdate,Fla.prototype._setValue_array_setMatrixWorldNeedsUpdate,],[Fla.prototype._setValue_arrayElement,Fla.prototype._setValue_arrayElement_setNeedsUpdate,Fla.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,],[Fla.prototype._setValue_fromArray,Fla.prototype._setValue_fromArray_setNeedsUpdate,Fla.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,]],(class{constructor(){this.uuid=E(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const tna={};this._indicesByUUID=tna;for(let una=0,vna=arguments.length;una!==vna;++una)tna[arguments[una].uuid]=una;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={},this.stats={objects:{get total(){return this._objects.length},get inUse(){return this.total-this.nCachedObjects_}},get bindingsPerObject(){return this._bindings.length}}}add(){const wna=this._objects,xna=this._indicesByUUID,yna=this._paths,zna=this._parsedPaths,Ana=this._bindings,Bna=Ana.length;let Cna,Dna=wna.length,Ena=this.nCachedObjects_;for(let Fna=0,Gna=arguments.length;Fna!==Gna;++Fna){const Hna=arguments[Fna],Ina=Hna.uuid;let Jna=xna[Ina];if(void 0===Jna){Jna=Dna++,xna[Ina]=Jna,wna.push(Hna);for(let Kna=0,Lna=Bna;Kna!==Lna;++Kna)Ana[Kna].push(new Fla(Hna,yna[Kna],zna[Kna]))}else if(Jna<Ena){Cna=wna[Jna];const Mna=--Ena,Nna=wna[Mna];xna[Nna.uuid]=Jna,wna[Jna]=Nna,xna[Ina]=Mna,wna[Mna]=Hna;for(let Ona=0,Pna=Bna;Ona!==Pna;++Ona){const Qna=Ana[Ona],Rna=Qna[Mna];let Sna=Qna[Jna];Qna[Jna]=Rna,void 0===Sna&&(Sna=new Fla(Hna,yna[Ona],zna[Ona])),Qna[Mna]=Sna}}else wna[Jna]!==Cna&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=Ena}remove(){const Tna=this._objects,Una=this._indicesByUUID,Vna=this._bindings,Wna=Vna.length;let Xna=this.nCachedObjects_;for(let Yna=0,Zna=arguments.length;Yna!==Zna;++Yna){const $na=arguments[Yna],_na=$na.uuid,aoa=Una[_na];if(void 0!==aoa&&aoa>=Xna){const boa=Xna++,coa=Tna[boa];Una[coa.uuid]=aoa,Tna[aoa]=coa,Una[_na]=boa,Tna[boa]=$na;for(let doa=0,eoa=Wna;doa!==eoa;++doa){const foa=Vna[doa],goa=foa[boa],hoa=foa[aoa];foa[aoa]=goa,foa[boa]=hoa}}}this.nCachedObjects_=Xna}uncache(){const ioa=this._objects,joa=this._indicesByUUID,koa=this._bindings,loa=koa.length;let moa=this.nCachedObjects_,noa=ioa.length;for(let ooa=0,poa=arguments.length;ooa!==poa;++ooa){const qoa=arguments[ooa],roa=qoa.uuid,soa=joa[roa];if(void 0!==soa)if(delete joa[roa],soa<moa){const toa=--moa,uoa=ioa[toa],voa=--noa,woa=ioa[voa];joa[uoa.uuid]=soa,ioa[soa]=uoa,joa[woa.uuid]=toa,ioa[toa]=woa,ioa.pop();for(let xoa=0,yoa=loa;xoa!==yoa;++xoa){const zoa=koa[xoa],Aoa=zoa[toa],Boa=zoa[voa];zoa[soa]=Aoa,zoa[toa]=Boa,zoa.pop()}}else{const Coa=--noa,Doa=ioa[Coa];Coa>0&&(joa[Doa.uuid]=soa),ioa[soa]=Doa,ioa.pop();for(let Eoa=0,Foa=loa;Eoa!==Foa;++Eoa){const Goa=koa[Eoa];Goa[soa]=Goa[Coa],Goa.pop()}}}this.nCachedObjects_=moa}subscribe_(Hoa,Ioa){const Joa=this._bindingsIndicesByPath;let Koa=Joa[Hoa];const Loa=this._bindings;if(void 0!==Koa)return Loa[Koa];const Moa=this._paths,Noa=this._parsedPaths,Ooa=this._objects,Poa=Ooa.length,Qoa=this.nCachedObjects_,Roa=new Array(Poa);Koa=Loa.length,Joa[Hoa]=Koa,Moa.push(Hoa),Noa.push(Ioa),Loa.push(Roa);for(let Soa=Qoa,Toa=Ooa.length;Soa!==Toa;++Soa){const Uoa=Ooa[Soa];Roa[Soa]=new Fla(Uoa,Hoa,Ioa)}return Roa}unsubscribe_(Voa){const Woa=this._bindingsIndicesByPath,Xoa=Woa[Voa];if(void 0!==Xoa){const Yoa=this._paths,Zoa=this._parsedPaths,$oa=this._bindings,_oa=$oa.length-1,apa=$oa[_oa],bpa=Voa[_oa];Woa[bpa]=Xoa,$oa[Xoa]=apa,$oa.pop(),Zoa[Xoa]=Zoa[_oa],Zoa.pop(),Yoa[Xoa]=Yoa[_oa],Yoa.pop()}}}).prototype.isAnimationObjectGroup=!0;class cpa{constructor(dpa,epa,fpa=null,gpa=epa.blendMode){this._mixer=dpa,this._clip=epa,this._localRoot=fpa,this.blendMode=gpa;const hpa=epa.tracks,ipa=hpa.length,jpa=new Array(ipa),kpa={endingStart:2400,endingEnd:2400};for(let lpa=0;lpa!==ipa;++lpa){const mpa=hpa[lpa].createInterpolant(null);jpa[lpa]=mpa,mpa.settings=kpa}this._interpolantSettings=kpa,this._interpolants=jpa,this._propertyBindings=new Array(ipa),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(npa){return this._startTime=npa,this}setLoop(opa,ppa){return this.loop=opa,this.repetitions=ppa,this}setEffectiveWeight(qpa){return this.weight=qpa,this._effectiveWeight=this.enabled?qpa:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(rpa){return this._scheduleFading(rpa,0,1)}fadeOut(spa){return this._scheduleFading(spa,1,0)}crossFadeFrom(tpa,upa,vpa){if(tpa.fadeOut(upa),this.fadeIn(upa),vpa){const wpa=this._clip.duration,xpa=tpa._clip.duration,ypa=xpa/wpa,zpa=wpa/xpa;tpa.warp(1,ypa,upa),this.warp(zpa,1,upa)}return this}crossFadeTo(Apa,Bpa,Cpa){return Apa.crossFadeFrom(this,Bpa,Cpa)}stopFading(){const Dpa=this._weightInterpolant;return null!==Dpa&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(Dpa)),this}setEffectiveTimeScale(Epa){return this.timeScale=Epa,this._effectiveTimeScale=this.paused?0:Epa,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(Fpa){return this.timeScale=this._clip.duration/Fpa,this.stopWarping()}syncWith(Gpa){return this.time=Gpa.time,this.timeScale=Gpa.timeScale,this.stopWarping()}halt(Hpa){return this.warp(this._effectiveTimeScale,0,Hpa)}warp(Ipa,Jpa,Kpa){const Lpa=this._mixer,Mpa=Lpa.time,Npa=this.timeScale;let Opa=this._timeScaleInterpolant;null===Opa&&(Opa=Lpa._lendControlInterpolant(),this._timeScaleInterpolant=Opa);const Ppa=Opa.parameterPositions,Qpa=Opa.sampleValues;return Ppa[0]=Mpa,Ppa[1]=Mpa+Kpa,Qpa[0]=Ipa/Npa,Qpa[1]=Jpa/Npa,this}stopWarping(){const Rpa=this._timeScaleInterpolant;return null!==Rpa&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(Rpa)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(Spa,Tpa,Upa,Vpa){if(!this.enabled){this._updateWeight(Spa);return}const Wpa=this._startTime;if(null!==Wpa){const Xpa=(Spa-Wpa)*Upa;if(Xpa<0||0===Upa)return;this._startTime=null,Tpa=Upa*Xpa}Tpa*=this._updateTimeScale(Spa);const Ypa=this._updateTime(Tpa),Zpa=this._updateWeight(Spa);if(Zpa>0){const $pa=this._interpolants,_pa=this._propertyBindings;switch(this.blendMode){case 2501:for(let aqa=0,bqa=$pa.length;aqa!==bqa;++aqa)$pa[aqa].evaluate(Ypa),_pa[aqa].accumulateAdditive(Zpa);break;case 2500:default:for(let cqa=0,dqa=$pa.length;cqa!==dqa;++cqa)$pa[cqa].evaluate(Ypa),_pa[cqa].accumulate(Vpa,Zpa)}}}_updateWeight(eqa){let fqa=0;if(this.enabled){fqa=this.weight;const gqa=this._weightInterpolant;if(null!==gqa){const hqa=gqa.evaluate(eqa)[0];fqa*=hqa,eqa>gqa.parameterPositions[1]&&(this.stopFading(),0===hqa&&(this.enabled=!1))}}return this._effectiveWeight=fqa,fqa}_updateTimeScale(iqa){let jqa=0;if(!this.paused){jqa=this.timeScale;const kqa=this._timeScaleInterpolant;if(null!==kqa){const lqa=kqa.evaluate(iqa)[0];jqa*=lqa,iqa>kqa.parameterPositions[1]&&(this.stopWarping(),0===jqa?this.paused=!0:this.timeScale=jqa)}}return this._effectiveTimeScale=jqa,jqa}_updateTime(mqa){const nqa=this._clip.duration,oqa=this.loop;let pqa=this.time+mqa,qqa=this._loopCount;const rqa=2202===oqa;if(0===mqa)return -1===qqa?pqa:rqa&&(1&qqa)==1?nqa-pqa:pqa;if(2200===oqa){-1===qqa&&(this._loopCount=0,this._setEndings(!0,!0,!1));handle_stop:{if(pqa>=nqa)pqa=nqa;else if(pqa<0)pqa=0;else{this.time=pqa;break handle_stop}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=pqa,this._mixer.dispatchEvent({type:"finished",action:this,direction:mqa<0?-1:1})}}else{if(-1===qqa&&(mqa>=0?(qqa=0,this._setEndings(!0,0===this.repetitions,rqa)):this._setEndings(0===this.repetitions,!0,rqa)),pqa>=nqa||pqa<0){const sqa=Math.floor(pqa/nqa);pqa-=nqa*sqa,qqa+=Math.abs(sqa);const tqa=this.repetitions-qqa;if(tqa<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,pqa=mqa>0?nqa:0,this.time=pqa,this._mixer.dispatchEvent({type:"finished",action:this,direction:mqa>0?1:-1});else{if(1===tqa){const uqa=mqa<0;this._setEndings(uqa,!uqa,rqa)}else this._setEndings(!1,!1,rqa);this._loopCount=qqa,this.time=pqa,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:sqa})}}else this.time=pqa;if(rqa&&(1&qqa)==1)return nqa-pqa}return pqa}_setEndings(vqa,wqa,xqa){const yqa=this._interpolantSettings;xqa?(yqa.endingStart=2401,yqa.endingEnd=2401):(vqa?yqa.endingStart=this.zeroSlopeAtStart?2401:2400:yqa.endingStart=2402,wqa?yqa.endingEnd=this.zeroSlopeAtEnd?2401:2400:yqa.endingEnd=2402)}_scheduleFading(zqa,Aqa,Bqa){const Cqa=this._mixer,Dqa=Cqa.time;let Eqa=this._weightInterpolant;null===Eqa&&(Eqa=Cqa._lendControlInterpolant(),this._weightInterpolant=Eqa);const Fqa=Eqa.parameterPositions,Gqa=Eqa.sampleValues;return Fqa[0]=Dqa,Gqa[0]=Aqa,Fqa[1]=Dqa+zqa,Gqa[1]=Bqa,this}}(class extends h{constructor(Hqa){super(),this._root=Hqa,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(Iqa,Jqa){const Kqa=Iqa._localRoot||this._root,Lqa=Iqa._clip.tracks,Mqa=Lqa.length,Nqa=Iqa._propertyBindings,Oqa=Iqa._interpolants,Pqa=Kqa.uuid,Qqa=this._bindingsByRootAndName;let Rqa=Qqa[Pqa];void 0===Rqa&&(Rqa={},Qqa[Pqa]=Rqa);for(let Sqa=0;Sqa!==Mqa;++Sqa){const Tqa=Lqa[Sqa],Uqa=Tqa.name;let Vqa=Rqa[Uqa];if(void 0!==Vqa)++Vqa.referenceCount,Nqa[Sqa]=Vqa;else{if(void 0!==(Vqa=Nqa[Sqa])){null===Vqa._cacheIndex&&(++Vqa.referenceCount,this._addInactiveBinding(Vqa,Pqa,Uqa));continue}const Wqa=Jqa&&Jqa._propertyBindings[Sqa].binding.parsedPath;Vqa=new cka(Fla.create(Kqa,Uqa,Wqa),Tqa.ValueTypeName,Tqa.getValueSize()),++Vqa.referenceCount,this._addInactiveBinding(Vqa,Pqa,Uqa),Nqa[Sqa]=Vqa}Oqa[Sqa].resultBuffer=Vqa.buffer}}_activateAction(Xqa){if(!this._isActiveAction(Xqa)){if(null===Xqa._cacheIndex){const Yqa=(Xqa._localRoot||this._root).uuid,Zqa=Xqa._clip.uuid,$qa=this._actionsByClip[Zqa];this._bindAction(Xqa,$qa&&$qa.knownActions[0]),this._addInactiveAction(Xqa,Zqa,Yqa)}const _qa=Xqa._propertyBindings;for(let ara=0,bra=_qa.length;ara!==bra;++ara){const cra=_qa[ara];0==cra.useCount++&&(this._lendBinding(cra),cra.saveOriginalState())}this._lendAction(Xqa)}}_deactivateAction(dra){if(this._isActiveAction(dra)){const era=dra._propertyBindings;for(let fra=0,gra=era.length;fra!==gra;++fra){const hra=era[fra];0== --hra.useCount&&(hra.restoreOriginalState(),this._takeBackBinding(hra))}this._takeBackAction(dra)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0,this.stats={actions:{get total(){return this._actions.length},get inUse(){return this._nActiveActions}},bindings:{get total(){return this._bindings.length},get inUse(){return this._nActiveBindings}},controlInterpolants:{get total(){return this._controlInterpolants.length},get inUse(){return this._nActiveControlInterpolants}}}}_isActiveAction(ira){const jra=ira._cacheIndex;return null!==jra&&jra<this._nActiveActions}_addInactiveAction(kra,lra,mra){const nra=this._actions,ora=this._actionsByClip;let pra=ora[lra];if(void 0===pra)pra={knownActions:[kra],actionByRoot:{}},kra._byClipCacheIndex=0,ora[lra]=pra;else{const qra=pra.knownActions;kra._byClipCacheIndex=qra.length,qra.push(kra)}kra._cacheIndex=nra.length,nra.push(kra),pra.actionByRoot[mra]=kra}_removeInactiveAction(rra){const sra=this._actions,tra=sra[sra.length-1],ura=rra._cacheIndex;tra._cacheIndex=ura,sra[ura]=tra,sra.pop(),rra._cacheIndex=null;const vra=rra._clip.uuid,wra=this._actionsByClip,xra=wra[vra],yra=xra.knownActions,zra=yra[yra.length-1],Ara=rra._byClipCacheIndex;zra._byClipCacheIndex=Ara,yra[Ara]=zra,yra.pop(),rra._byClipCacheIndex=null;const Bra=xra.actionByRoot,Cra=(rra._localRoot||this._root).uuid;delete Bra[Cra],0===yra.length&&delete wra[vra],this._removeInactiveBindingsForAction(rra)}_removeInactiveBindingsForAction(Dra){const Era=Dra._propertyBindings;for(let Fra=0,Gra=Era.length;Fra!==Gra;++Fra){const Hra=Era[Fra];0== --Hra.referenceCount&&this._removeInactiveBinding(Hra)}}_lendAction(Ira){const Jra=this._actions,Kra=Ira._cacheIndex,Lra=this._nActiveActions++,Mra=Jra[Lra];Ira._cacheIndex=Lra,Jra[Lra]=Ira,Mra._cacheIndex=Kra,Jra[Kra]=Mra}_takeBackAction(Nra){const Ora=this._actions,Pra=Nra._cacheIndex,Qra=--this._nActiveActions,Rra=Ora[Qra];Nra._cacheIndex=Qra,Ora[Qra]=Nra,Rra._cacheIndex=Pra,Ora[Pra]=Rra}_addInactiveBinding(Sra,Tra,Ura){const Vra=this._bindingsByRootAndName,Wra=this._bindings;let Xra=Vra[Tra];void 0===Xra&&(Xra={},Vra[Tra]=Xra),Xra[Ura]=Sra,Sra._cacheIndex=Wra.length,Wra.push(Sra)}_removeInactiveBinding(Yra){const Zra=this._bindings,$ra=Yra.binding,_ra=$ra.rootNode.uuid,asa=$ra.path,bsa=this._bindingsByRootAndName,csa=bsa[_ra],dsa=Zra[Zra.length-1],esa=Yra._cacheIndex;dsa._cacheIndex=esa,Zra[esa]=dsa,Zra.pop(),delete csa[asa],0===Object.keys(csa).length&&delete bsa[_ra]}_lendBinding(fsa){const gsa=this._bindings,hsa=fsa._cacheIndex,isa=this._nActiveBindings++,jsa=gsa[isa];fsa._cacheIndex=isa,gsa[isa]=fsa,jsa._cacheIndex=hsa,gsa[hsa]=jsa}_takeBackBinding(ksa){const lsa=this._bindings,msa=ksa._cacheIndex,nsa=--this._nActiveBindings,osa=lsa[nsa];ksa._cacheIndex=nsa,lsa[nsa]=ksa,osa._cacheIndex=msa,lsa[msa]=osa}_lendControlInterpolant(){const psa=this._controlInterpolants,qsa=this._nActiveControlInterpolants++;let rsa=psa[qsa];return void 0===rsa&&((rsa=new vca(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=qsa,psa[qsa]=rsa),rsa}_takeBackControlInterpolant(ssa){const tsa=this._controlInterpolants,usa=ssa.__cacheIndex,vsa=--this._nActiveControlInterpolants,wsa=tsa[vsa];ssa.__cacheIndex=vsa,tsa[vsa]=ssa,wsa.__cacheIndex=usa,tsa[usa]=wsa}clipAction(xsa,ysa,zsa){const Asa=ysa||this._root,Bsa=Asa.uuid;let Csa="string"==typeof xsa?yea.findByName(Asa,xsa):xsa;const Dsa=null!==Csa?Csa.uuid:xsa,Esa=this._actionsByClip[Dsa];let Fsa=null;if(void 0===zsa&&(zsa=null!==Csa?Csa.blendMode:2500),void 0!==Esa){const Gsa=Esa.actionByRoot[Bsa];if(void 0!==Gsa&&Gsa.blendMode===zsa)return Gsa;Fsa=Esa.knownActions[0],null===Csa&&(Csa=Fsa._clip)}if(null===Csa)return null;const Hsa=new cpa(this,Csa,ysa,zsa);return this._bindAction(Hsa,Fsa),this._addInactiveAction(Hsa,Dsa,Bsa),Hsa}existingAction(Isa,Jsa){const Ksa=Jsa||this._root,Lsa=Ksa.uuid,Msa="string"==typeof Isa?yea.findByName(Ksa,Isa):Isa,Nsa=Msa?Msa.uuid:Isa,Osa=this._actionsByClip[Nsa];return void 0!==Osa?Osa.actionByRoot[Lsa]||null:null}stopAllAction(){const Psa=this._actions,Qsa=this._nActiveActions;for(let Rsa=Qsa-1;Rsa>=0;--Rsa)Psa[Rsa].stop();return this}update(Ssa){Ssa*=this.timeScale;const Tsa=this._actions,Usa=this._nActiveActions,Vsa=this.time+=Ssa,Wsa=Math.sign(Ssa),Xsa=this._accuIndex^=1;for(let Ysa=0;Ysa!==Usa;++Ysa){const Zsa=Tsa[Ysa];Zsa._update(Vsa,Ssa,Wsa,Xsa)}const $sa=this._bindings,_sa=this._nActiveBindings;for(let ata=0;ata!==_sa;++ata)$sa[ata].apply(Xsa);return this}setTime(bta){this.time=0;for(let cta=0;cta<this._actions.length;cta++)this._actions[cta].time=0;return this.update(bta)}getRoot(){return this._root}uncacheClip(dta){const eta=this._actions,fta=dta.uuid,gta=this._actionsByClip,hta=gta[fta];if(void 0!==hta){const ita=hta.knownActions;for(let jta=0,kta=ita.length;jta!==kta;++jta){const lta=ita[jta];this._deactivateAction(lta);const mta=lta._cacheIndex,nta=eta[eta.length-1];lta._cacheIndex=null,lta._byClipCacheIndex=null,nta._cacheIndex=mta,eta[mta]=nta,eta.pop(),this._removeInactiveBindingsForAction(lta)}delete gta[fta]}}uncacheRoot(ota){const pta=ota.uuid,qta=this._actionsByClip;for(const rta in qta){const sta=qta[rta].actionByRoot,tta=sta[pta];void 0!==tta&&(this._deactivateAction(tta),this._removeInactiveAction(tta))}const uta=this._bindingsByRootAndName,vta=uta[pta];if(void 0!==vta)for(const wta in vta){const xta=vta[wta];xta.restoreOriginalState(),this._removeInactiveBinding(xta)}}uncacheAction(yta,zta){const Ata=this.existingAction(yta,zta);null!==Ata&&(this._deactivateAction(Ata),this._removeInactiveAction(Ata))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Bta{constructor(Cta){"string"==typeof Cta&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),Cta=arguments[1]),this.value=Cta}clone(){return new Bta(void 0===this.value.clone?this.value:this.value.clone())}}function Dta(a,b,c,d){if(a.layers.test(b.layers)&&a.raycast(b,c),!0===d){const e=a.children;for(let f=0,g=e.length;f<g;f++)Dta(e[f],b,c,!0)}}(class extends lS{constructor(Eta,Fta,Gta=1){super(Eta,Fta),this.meshPerAttribute=Gta}copy(Hta){return super.copy(Hta),this.meshPerAttribute=Hta.meshPerAttribute,this}clone(Ita){const Jta=super.clone(Ita);return Jta.meshPerAttribute=this.meshPerAttribute,Jta}toJSON(Kta){const Lta=super.toJSON(Kta);return Lta.isInstancedInterleavedBuffer=!0,Lta.meshPerAttribute=this.meshPerAttribute,Lta}}).prototype.isInstancedInterleavedBuffer=!0,(class{constructor(Mta,Nta,Ota,Pta,Qta){this.buffer=Mta,this.type=Nta,this.itemSize=Ota,this.elementSize=Pta,this.count=Qta,this.version=0}set needsUpdate(Rta){!0===Rta&&this.version++}setBuffer(Sta){return this.buffer=Sta,this}setType(Tta,Uta){return this.type=Tta,this.elementSize=Uta,this}setItemSize(Vta){return this.itemSize=Vta,this}setCount(Wta){return this.count=Wta,this}}).prototype.isGLBufferAttribute=!0;class Xta{constructor(Yta=1,Zta=0,$ta=0){return this.radius=Yta,this.phi=Zta,this.theta=$ta,this}set(_ta,aua,bua){return this.radius=_ta,this.phi=aua,this.theta=bua,this}copy(cua){return this.radius=cua.radius,this.phi=cua.phi,this.theta=cua.theta,this}makeSafe(){return this.phi=Math.max(0.000001,Math.min(Math.PI-0.000001,this.phi)),this}setFromVector3(dua){return this.setFromCartesianCoords(dua.x,dua.y,dua.z)}setFromCartesianCoords(eua,fua,gua){return this.radius=Math.sqrt(eua*eua+fua*fua+gua*gua),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(eua,gua),this.phi=Math.acos(F(fua/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const hua=new L();class iua{constructor(jua=new L(Infinity,Infinity),kua=new L(-1/0,-1/0)){this.min=jua,this.max=kua}set(lua,mua){return this.min.copy(lua),this.max.copy(mua),this}setFromPoints(nua){this.makeEmpty();for(let oua=0,pua=nua.length;oua<pua;oua++)this.expandByPoint(nua[oua]);return this}setFromCenterAndSize(qua,rua){const sua=hua.copy(rua).multiplyScalar(0.5);return this.min.copy(qua).sub(sua),this.max.copy(qua).add(sua),this}clone(){return new this.constructor().copy(this)}copy(tua){return this.min.copy(tua.min),this.max.copy(tua.max),this}makeEmpty(){return this.min.x=this.min.y=Infinity,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(uua){return this.isEmpty()?uua.set(0,0):uua.addVectors(this.min,this.max).multiplyScalar(0.5)}getSize(vua){return this.isEmpty()?vua.set(0,0):vua.subVectors(this.max,this.min)}expandByPoint(wua){return this.min.min(wua),this.max.max(wua),this}expandByVector(xua){return this.min.sub(xua),this.max.add(xua),this}expandByScalar(yua){return this.min.addScalar(-yua),this.max.addScalar(yua),this}containsPoint(zua){return!(zua.x<this.min.x)&&!(zua.x>this.max.x)&&!(zua.y<this.min.y)&&!(zua.y>this.max.y)}containsBox(Aua){return this.min.x<=Aua.min.x&&Aua.max.x<=this.max.x&&this.min.y<=Aua.min.y&&Aua.max.y<=this.max.y}getParameter(Bua,Cua){return Cua.set((Bua.x-this.min.x)/(this.max.x-this.min.x),(Bua.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(Dua){return!(Dua.max.x<this.min.x)&&!(Dua.min.x>this.max.x)&&!(Dua.max.y<this.min.y)&&!(Dua.min.y>this.max.y)}clampPoint(Eua,Fua){return Fua.copy(Eua).clamp(this.min,this.max)}distanceToPoint(Gua){const Hua=hua.copy(Gua).clamp(this.min,this.max);return Hua.sub(Gua).length()}intersect(Iua){return this.min.max(Iua.min),this.max.min(Iua.max),this}union(Jua){return this.min.min(Jua.min),this.max.max(Jua.max),this}translate(Kua){return this.min.add(Kua),this.max.add(Kua),this}equals(Lua){return Lua.min.equals(this.min)&&Lua.max.equals(this.max)}}iua.prototype.isBox2=!0;const Mua=new Xj(),Nua=new Xj(),Oua=new Xj(),Pua=new Xj(),Qua=new pq(),Rua=new pq();function Sua(a){const b=[];a&&a.isBone&&b.push(a);for(let c=0;c<a.children.length;c++)b.push.apply(b,Sua(a.children[c]));return b}new Xj(),new ld(),new ld();const Tua=new Xj(),Uua=new Xj(),Vua=new Xj();class Wua extends Aw{constructor(Xua,Yua,Zua){super(),this.light=Xua,this.light.updateMatrixWorld(),this.matrix=Xua.matrixWorld,this.matrixAutoUpdate=!1,this.color=Zua,void 0===Yua&&(Yua=1);let $ua=new uC();$ua.setAttribute("position",new jC([-Yua,Yua,0,Yua,Yua,0,Yua,-Yua,0,-Yua,-Yua,0,-Yua,Yua,0],3));const _ua=new gW({fog:!1,toneMapped:!1});this.lightPlane=new oW($ua,_ua),this.add(this.lightPlane),($ua=new uC()).setAttribute("position",new jC([0,0,0,0,0,1],3)),this.targetLine=new oW($ua,_ua),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){Tua.setFromMatrixPosition(this.light.matrixWorld),Uua.setFromMatrixPosition(this.light.target.matrixWorld),Vua.subVectors(Uua,Tua),this.lightPlane.lookAt(Uua),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Uua),this.targetLine.scale.z=Vua.length()}}new Xj(),new PH(),new Bm(),new Xj();class ava extends jX{constructor(bva=1){const cva=new uC();cva.setAttribute("position",new jC([0,0,0,bva,0,0,0,0,0,0,bva,0,0,0,0,0,0,bva],3)),cva.setAttribute("color",new jC([1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1],3));const dva=new gW({vertexColors:!0,toneMapped:!1});super(cva,dva),this.type="AxesHelper"}setColors(eva,fva,gva){const hva=new ld(),iva=this.geometry.attributes.color.array;return hva.set(eva),hva.toArray(iva,0),hva.toArray(iva,3),hva.set(fva),hva.toArray(iva,6),hva.toArray(iva,9),hva.set(gva),hva.toArray(iva,12),hva.toArray(iva,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}const jva=new Float32Array(1);new Int32Array(jva.buffer),b$.create=function(a,b){return console.log("THREE.Curve.create() has been deprecated"),a.prototype=Object.create(b$.prototype),a.prototype.constructor=a,a.prototype.getPoint=b,a},n3.prototype.fromPoints=function(a){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(a)},(class extends jX{constructor(kva=10,lva=10,mva=4473924,nva=8947848){mva=new ld(mva),nva=new ld(nva);const ova=lva/2,pva=kva/lva,qva=kva/2,rva=[],sva=[];for(let tva=0,uva=0,vva=-qva;tva<=lva;tva++,vva+=pva){rva.push(-qva,0,vva,qva,0,vva),rva.push(vva,0,-qva,vva,0,qva);const wva=tva===ova?mva:nva;wva.toArray(sva,uva),uva+=3,wva.toArray(sva,uva),uva+=3,wva.toArray(sva,uva),uva+=3,wva.toArray(sva,uva),uva+=3}const xva=new uC();xva.setAttribute("position",new jC(rva,3)),xva.setAttribute("color",new jC(sva,3));const yva=new gW({vertexColors:!0,toneMapped:!1});super(xva,yva),this.type="GridHelper"}}).prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},(class extends jX{constructor(zva){const Ava=Sua(zva),Bva=new uC(),Cva=[],Dva=[],Eva=new ld(0,0,1),Fva=new ld(0,1,0);for(let Gva=0;Gva<Ava.length;Gva++){const Hva=Ava[Gva];Hva.parent&&Hva.parent.isBone&&(Cva.push(0,0,0),Cva.push(0,0,0),Dva.push(Eva.r,Eva.g,Eva.b),Dva.push(Fva.r,Fva.g,Fva.b))}Bva.setAttribute("position",new jC(Cva,3)),Bva.setAttribute("color",new jC(Dva,3));const Iva=new gW({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(Bva,Iva),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=zva,this.bones=Ava,this.matrix=zva.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(Jva){const Kva=this.bones,Lva=this.geometry,Mva=Lva.getAttribute("position");Rua.copy(this.root.matrixWorld).invert();for(let Nva=0,Ova=0;Nva<Kva.length;Nva++){const Pva=Kva[Nva];Pva.parent&&Pva.parent.isBone&&(Qua.multiplyMatrices(Rua,Pva.matrixWorld),Pua.setFromMatrixPosition(Qua),Mva.setXYZ(Ova,Pua.x,Pua.y,Pua.z),Qua.multiplyMatrices(Rua,Pva.parent.matrixWorld),Pua.setFromMatrixPosition(Qua),Mva.setXYZ(Ova+1,Pua.x,Pua.y,Pua.z),Ova+=2)}Lva.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(Jva)}}).prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},gga.prototype.extractUrlBase=function(a){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),oja.extractUrlBase(a)},gga.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},iua.prototype.center=function(a){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(a)},iua.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},iua.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},iua.prototype.size=function(a){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(a)},Bm.prototype.center=function(a){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(a)},Bm.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Bm.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},Bm.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)},Bm.prototype.size=function(a){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(a)},mo.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},kK.prototype.setFromMatrix=function(a){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(a)},(class{constructor(Qva=new Xj(),Rva=new Xj()){this.start=Qva,this.end=Rva}set(Sva,Tva){return this.start.copy(Sva),this.end.copy(Tva),this}copy(Uva){return this.start.copy(Uva.start),this.end.copy(Uva.end),this}getCenter(Vva){return Vva.addVectors(this.start,this.end).multiplyScalar(0.5)}delta(Wva){return Wva.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(Xva,Yva){return this.delta(Yva).multiplyScalar(Xva).add(this.start)}closestPointToPointParameter(Zva,$va){Mua.subVectors(Zva,this.start),Nua.subVectors(this.end,this.start);const _va=Nua.dot(Nua),awa=Nua.dot(Mua);let bwa=awa/_va;return $va&&(bwa=F(bwa,0,1)),bwa}closestPointToPoint(cwa,dwa,ewa){const fwa=this.closestPointToPointParameter(cwa,dwa);return this.delta(ewa).multiplyScalar(fwa).add(this.start)}applyMatrix4(gwa){return this.start.applyMatrix4(gwa),this.end.applyMatrix4(gwa),this}equals(hwa){return hwa.start.equals(this.start)&&hwa.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}).prototype.center=function(a){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(a)},ab.prototype.flattenToArrayOffset=function(a,b){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,b)},ab.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},ab.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},ab.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},ab.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},ab.prototype.getInverse=function(a){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()},pq.prototype.extractPosition=function(a){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(a)},pq.prototype.flattenToArrayOffset=function(a,b){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,b)},pq.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new Xj().setFromMatrixColumn(this,3)},pq.prototype.setRotationFromQuaternion=function(a){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(a)},pq.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},pq.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},pq.prototype.multiplyVector4=function(a){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},pq.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},pq.prototype.rotateAxis=function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),a.transformDirection(this)},pq.prototype.crossVector=function(a){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},pq.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},pq.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},pq.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},pq.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},pq.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},pq.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},pq.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},pq.prototype.makeFrustum=function(a,b,c,d,e,f){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(a,b,d,c,e,f)},pq.prototype.getInverse=function(a){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()},xJ.prototype.isIntersectionLine=function(a){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(a)},qh.prototype.multiplyVector3=function(a){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),a.applyQuaternion(this)},qh.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Xo.prototype.isIntersectionBox=function(a){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},Xo.prototype.isIntersectionPlane=function(a){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(a)},Xo.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)},Dy.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},Dy.prototype.barycoordFromPoint=function(a,b){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(a,b)},Dy.prototype.midpoint=function(a){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(a)},Dy.prototypenormal=function(a){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(a)},Dy.prototype.plane=function(a){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(a)},Dy.barycoordFromPoint=function(a,b,c,d,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Dy.getBarycoord(a,b,c,d,e)},Dy.normal=function(a,b,c,d){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Dy.getNormal(a,b,c,d)},w4.prototype.extractAllPoints=function(a){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(a)},w4.prototype.extrude=function(a){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new L5(this,a)},w4.prototype.makeGeometry=function(a){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new w7(this,a)},L.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},L.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)},L.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Xj.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},Xj.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},Xj.prototype.getPositionFromMatrix=function(a){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(a)},Xj.prototype.getScaleFromMatrix=function(a){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(a)},Xj.prototype.getColumnFromMatrix=function(a,b){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(b,a)},Xj.prototype.applyProjection=function(a){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(a)},Xj.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},Xj.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)},Xj.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},hf.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},hf.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Aw.prototype.getChildByName=function(a){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(a)},Aw.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},Aw.prototype.translate=function(a,b){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(b,a)},Aw.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},Aw.prototype.applyMatrix=function(a){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)},Object.defineProperties(Aw.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),dG.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(dG.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),fU.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},XH.prototype.setLens=function(a,b){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==b&&(this.filmGauge=b),this.setFocalLength(a)},Object.defineProperties(gha.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=a}}}),Object.defineProperties(BA.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),35048===this.usage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(35048)}}}),BA.prototype.setDynamic=function(a){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===a?35048:35044),this},BA.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},BA.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},uC.prototype.addIndex=function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(a)},uC.prototype.addAttribute=function(a,b){return(console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),b&&b.isBufferAttribute||b&&b.isInterleavedBufferAttribute)?"index"===a?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(b),this):this.setAttribute(a,b):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(a,new BA(arguments[1],arguments[2])))},uC.prototype.addDrawCall=function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(a,b)},uC.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},uC.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},uC.prototype.removeAttribute=function(a){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(a)},uC.prototype.applyMatrix=function(a){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)},Object.defineProperties(uC.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),lS.prototype.setDynamic=function(a){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===a?35048:35044),this},lS.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},L5.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},L5.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},L5.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},gS.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},Bta.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(eA.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new ld()}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===a}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(a){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=a}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(FH.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=a}}}),$R.prototype.clearTarget=function(a,b,c,d){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(a),this.clear(b,c,d)},$R.prototype.animate=function(a){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(a)},$R.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},$R.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},$R.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},$R.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},$R.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},$R.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},$R.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},$R.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},$R.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},$R.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},$R.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},$R.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},$R.prototype.enableScissorTest=function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(a)},$R.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},$R.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},$R.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},$R.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},$R.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},$R.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},$R.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},$R.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},$R.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},$R.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties($R.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=a}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(a){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===a?3001:3000}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}}),Object.defineProperties(FQ.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Rg.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=a}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=a}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=a}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=a}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=a}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=a}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=a}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=a}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=a}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=a}}}),(class extends Aw{constructor(iwa){super(),this.type="Audio",this.listener=iwa,this.context=iwa.context,this.gain=this.context.createGain(),this.gain.connect(iwa.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(jwa){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=jwa,this.connect(),this}setMediaElementSource(kwa){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(kwa),this.connect(),this}setMediaStreamSource(lwa){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(lwa),this.connect(),this}setBuffer(mwa){return this.buffer=mwa,this.sourceType="buffer",this.autoplay&&this.play(),this}play(nwa=0){if(!0===this.isPlaying){console.warn("THREE.Audio: Audio is already playing.");return}if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+nwa;const owa=this.context.createBufferSource();return owa.buffer=this.buffer,owa.loop=this.loop,owa.loopStart=this.loopStart,owa.loopEnd=this.loopEnd,owa.onended=this.onEnded.bind(this),owa.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=owa,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let pwa=1,qwa=this.filters.length;pwa<qwa;pwa++)this.filters[pwa-1].connect(this.filters[pwa]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let rwa=1,swa=this.filters.length;rwa<swa;rwa++)this.filters[rwa-1].disconnect(this.filters[rwa]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(twa){return twa||(twa=[]),!0===this._connected?(this.disconnect(),this.filters=twa.slice(),this.connect()):this.filters=twa.slice(),this}setDetune(uwa){if(this.detune=uwa,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(vwa){return this.setFilters(vwa?[vwa]:[])}setPlaybackRate(wwa){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=wwa,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,0.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(xwa){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=xwa,!0===this.isPlaying&&(this.source.loop=this.loop),this}setLoopStart(ywa){return this.loopStart=ywa,this}setLoopEnd(zwa){return this.loopEnd=zwa,this}getVolume(){return this.gain.gain.value}setVolume(Awa){return this.gain.gain.setTargetAtTime(Awa,this.context.currentTime,0.01),this}}).prototype.load=function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const b=this,c=new Lja();return c.load(a,function(a){b.setBuffer(a)}),this},(class{constructor(Bwa,Cwa=2048){this.analyser=Bwa.context.createAnalyser(),this.analyser.fftSize=Cwa,this.data=new Uint8Array(this.analyser.frequencyBinCount),Bwa.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let Dwa=0;const Ewa=this.getFrequencyData();for(let Fwa=0;Fwa<Ewa.length;Fwa++)Dwa+=Ewa[Fwa];return Dwa/Ewa.length}}).prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},wI.prototype.updateCubeMap=function(a,b){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(a,b)},wI.prototype.clear=function(a,b,c,d){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(a,b,c,d)},Ae.crossOrigin=void 0,Ae.loadTexture=function(a,b,c,d){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const e=new $ga();e.setCrossOrigin(this.crossOrigin);const f=e.load(a,c,void 0,d);return b&&(f.mapping=b),f},Ae.loadTextureCube=function(a,b,c,d){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const e=new Pga();e.setCrossOrigin(this.crossOrigin);const f=e.load(a,c,void 0,d);return b&&(f.mapping=b),f},Ae.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Ae.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"137"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="137")}}])